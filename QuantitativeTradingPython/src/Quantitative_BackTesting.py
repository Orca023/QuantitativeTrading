# !/usr/bin/python3
# coding=utf-8


#################################################################################

# Title: Python3 quantitative trading v20221214
# Explain: Python3 market timing, Python3 pick stock, Python3 size position, Python3 back testing, Python3 indicators, Python3 data cleaning
# Author: 趙健
# E-mail: 283640621@qq.com
# Telephont number: +86 18604537694
# E-mail: chinaorcaz@gmail.com
# Date: 歲在壬寅
# Operating system: Windows10 x86_64 Inter(R)-Core(TM)-m3-6Y30
# Interpreter: python-3.11.2-amd64.exe
# Interpreter: Python-3.11.2-tar.xz, Python-3.11.2-amd64.deb
# Operating system: google-pixel-2 android-11 termux-0.118 ubuntu-22.04-LTS-rootfs arm64-aarch64 MSM8998-Snapdragon835-Qualcomm®-Kryo™-280
# Interpreter: Python-3.10.6-tar.xz, python3-3.10.6-aarch64.deb

# 使用説明：
# 控制臺命令列運行指令：
# C:\QuantitativeTrading> C:/QuantitativeTrading/Python/Python311/python.exe C:/QuantitativeTrading/QuantitativeTradingPython/QuantitativeTradingServer.py configFile=C:/QuantitativeTrading/QuantitativeTradingPython/config.txt webPath=C:/QuantitativeTrading/html/ host=::0 port=10001 Key=username:password Is_multi_thread=False number_Worker_process=0 is_Monitor_Concurrent=0 is_monitor=False time_sleep=0.02 monitor_dir=C:/QuantitativeTrading/Intermediary/ monitor_file=C:/QuantitativeTrading/Intermediary/intermediary_write_C.txt output_dir=C:/QuantitativeTrading/Intermediary/ output_file=C:/QuantitativeTrading/Intermediary/intermediary_write_Python.txt temp_cache_IO_data_dir=C:/QuantitativeTrading/temp/
# root@localhost:~# /usr/bin/python3 /home/QuantitativeTrading/QuantitativeTradingPython/QuantitativeTradingServer.py configFile=/home/QuantitativeTrading/QuantitativeTradingPython/config.txt webPath=/home/QuantitativeTrading/html/ host=::0 port=10001 Key=username:password Is_multi_thread=False number_Worker_process=0 is_Monitor_Concurrent=0 is_monitor=False time_sleep=0.02 monitor_dir=/home/QuantitativeTrading/Intermediary/ monitor_file=/home/QuantitativeTrading/Intermediary/intermediary_write_C.txt output_dir=/home/QuantitativeTrading/Intermediary/ output_file=/home/QuantitativeTrading/Intermediary/intermediary_write_Python.txt temp_cache_IO_data_dir=/home/QuantitativeTrading/temp/

#################################################################################


import math  # 導入 Python 原生包「math」，用於數學計算;
# import random  # 導入 Python 原生包「random」，用於生成隨機數;
# import copy  # 導入 Python 原生包「copy」，用於對字典對象的複製操作（深複製（傳值）、潛複製（傳址））;
# import json  # 導入 Python 原生模組「json」，用於解析 JSON 文檔;
# import csv  # 導入 Python 原生模組「csv」，用於解析 .csv 文檔;
# import pickle  # 導入 Python 原生模組「pickle」，用於將結構化的内存數據直接備份到硬盤二進制文檔，以及從硬盤文檔直接導入結構化内存數據;
# import multiprocessing
# from multiprocessing import Pool
# import os, sys, signal, stat  # 加載Python原生的操作系統接口模組os、使用或維護的變量的接口模組sys;
# import pathlib  # from pathlib import Path 用於檢查判斷指定的路徑對象是目錄還是文檔;
# import string  # 加載Python原生的字符串處理模組;
# import time  # 加載Python原生的日期數據處理模組;
import datetime  # 加載Python原生的日期數據處理模組;
import warnings
# warnings.filterwarnings("ignore")  # 設置控制臺不打印所有警告信息;
warnings.filterwarnings("ignore", category=RuntimeWarning)  # 設置控制臺不打印指定（category = RuntimeWarning）的特定警告信息;
# # 棄用控制臺打印警告信息;
# def fxn():
#     warnings.warn("deprecated", DeprecationWarning)  # 棄用控制臺打印警告信息;
# with warnings.catch_warnings():
#     warnings.simplefilter("ignore")
#     fxn()
# with warnings.catch_warnings(record=True) as w:
#     # Cause all warnings to always be triggered.
#     warnings.simplefilter("always")
#     # Trigger a warning.
#     fxn()
#     # Verify some things
#     assert len(w) == 1
#     assert issubclass(w[-1].category, DeprecationWarning)
#     assert "deprecated" in str(w[-1].message)


# 導入第三方擴展包，需要事先已經在操作系統控制臺命令行安裝配置成功;
# 先升級 pip 擴展包管理工具：root@localhost:~# python -m pip install --upgrade pip
# 再安裝第三方擴展包：root@localhost:~# pip install sympy -i https://pypi.mirrors.ustc.edu.cn/simple
import numpy  # as np
# import pandas  # as pd
# from pandas import Series as pandas_Series  # 從第三方擴展包「pandas」中導入一維向量「Series」模組，用於構建擴展包「pandas」的一維向量「Series」類型變量;
# from pandas import DataFrame as pandas_DataFrame  # 從第三方擴展包「pandas」中導入二維矩陣「DataFrame」模組，用於構建擴展包「pandas」的二維矩陣「DataFrame」類型變量;
# import pyarrow
# import openpyxl
# import xlrd
# import matplotlib  # as mpl
# import matplotlib.pyplot as matplotlib_pyplot
# import matplotlib.font_manager as matplotlib_font_manager  # 導入第三方擴展包「matplotlib」中的字體管理器，用於設置生成圖片中文字的字體;
# %matplotlib inline
# matplotlib.rcParams['font.sans-serif'] = ['SimHei']
# matplotlib.rcParams['font.family'] = 'sans-serif'
# matplotlib.rcParams['axes.unicode_minus'] = False
# import mplfinance  # 導入第三方擴展包「mplfinance」，用於製作日棒缐（K Days Line）圖;
# from mplfinance.original_flavor import candlestick_ohlc as mplfinance_original_flavor_candlestick_ohlc  # 從第三方擴展包「mplfinance」中導入「original_flavor」模組的「candlestick_ohlc()」函數，用於繪製股票作日棒缐（K Days Line）圖;
# import seaborn  # as sns
# https://www.scipy.org/docs.html
# import scipy
# from scipy import stats as scipy_stats  # 導入第三方擴展包「scipy」，用於統計學計算;
# import scipy.stats as scipy_stats
# import scipy.optimize
# from scipy.optimize import show_options
# from scipy.optimize import OptimizeWarning
# warnings.filterwarnings("ignore", category=OptimizeWarning)  # 設置控制臺不打印指定（category = OptimizeWarning）的特定警告信息;
from scipy.optimize import minimize as scipy_optimize_minimize  # 導入第三方擴展包「scipy」中的優化模組「optimize」中的「minimize()」函數，用於通用形式優化問題求解（optimization）;
# from scipy.optimize import linprog as scipy_optimize_linprog  # 導入第三方擴展包「scipy」中的優化模組「optimize」中的「linprog()」函數，用於缐性規劃問題求解（optimization）;
# from scipy.optimize import shgo as scipy_optimize_shgo  # 導入第三方擴展包「scipy」中的優化模組「optimize」中的「shgo()」函數，用於全跼優化問題求解（optimization）;
# from scipy.optimize import curve_fit as scipy_optimize_curve_fit  # 導入第三方擴展包「scipy」中的優化模組「optimize」中的「curve_fit()」函數，用於擬合自定義函數;
# from scipy.optimize import root as scipy_optimize_root  # 導入第三方擴展包「scipy」中的優化模組「optimize」中的「root()」函數，用於一元方程求根計算;
# from scipy.optimize import fsolve as scipy_optimize_fsolve  # 導入第三方擴展包「scipy」中的優化模組「optimize」中的「fsolve()」函數，用於多元非缐性方程組求根計算;
# from scipy.interpolate import make_interp_spline as scipy_interpolate_make_interp_spline  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「make_interp_spline()」函數，用於擬合鏈條插值（Spline）函數;
# from scipy.interpolate import BSpline as scipy_interpolate_BSpline  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「BSpline()」函數，用於擬合一維鏈條插值（1 Dimension BSpline）函數;
# from scipy.interpolate import interp1d as scipy_interpolate_interp1d  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「interp1d()」函數，用於擬合一維插值（1 Dimension）函數;
# from scipy.interpolate import UnivariateSpline as scipy_interpolate_UnivariateSpline  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「UnivariateSpline()」函數，用於擬合一維鏈條插值（1 Dimension spline）函數;
# from scipy.interpolate import lagrange as scipy_interpolate_lagrange  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「lagrange()」函數，用於擬合一維拉格朗日法（lagrange）插值（1 Dimension）函數;
# from scipy.interpolate import RectBivariateSpline as scipy_interpolate_RectBivariateSpline  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「RectBivariateSpline()」函數，用於擬合二維鏈條插值（2 Dimension BSpline）函數;
# from scipy.interpolate import griddata as scipy_interpolate_griddata  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「griddata()」函數，用於擬合二多維非結構化插值（2 Dimension）函數;
# from scipy.interpolate import Rbf as scipy_interpolate_Rbf  # 導入第三方擴展包「scipy」中的插值模組「interpolate」中的「Rbf()」函數，用於擬合多維非結構化插值（n Dimension）函數;
# from scipy.misc import derivative as scipy_derivative_derivative  # 導入第三方擴展包「scipy」中的數值微分計算模組「misc」中的「derivative()」函數，用於一元方程（一維）（1 Dimension）微分計算;
# # from scipy.derivative import derivative as scipy_derivative_derivative  # 導入第三方擴展包「scipy」中的數值微分計算模組「derivative」中的「derivative()」函數，用於一元方程（一維）（1 Dimension）微分計算;
# from scipy.integrate import quad as scipy_integrate_quad  # 導入第三方擴展包「scipy」中的數值積分計算模組「integrate」中的「quad()」函數，用於一元方程（一維）（1 Dimension）定積分計算;
# from scipy.integrate import dblquad as scipy_integrate_dblquad  # 導入第三方擴展包「scipy」中的數值積分計算模組「integrate」中的「dblquad()」函數，用於二元方程（二維）（2 Dimension）定積分計算;
# from scipy.integrate import tplquad as scipy_integrate_tplquad  # 導入第三方擴展包「scipy」中的數值積分計算模組「integrate」中的「tplquad()」函數，用於三元方程（三維）（3 Dimension）定積分計算;
# from scipy.integrate import nquad as scipy_integrate_nquad  # 導入第三方擴展包「scipy」中的數值積分計算模組「integrate」中的「nquad()」函數，用於多元方程（多維）（n Dimension）定積分計算;
# from scipy.integrate import odeint as scipy_integrate_odeint  # 導入第三方擴展包「scipy」中的數值積分計算模組「integrate」中的「odeint()」函數，用於求解常微分方程（Ordinary Differential Equation）;
# from scipy.integrate import ode as scipy_integrate_ode  # 導入第三方擴展包「scipy」中的數值積分計算模組「integrate」中的「ode()」函數，用於求解常微分方程（大系統、複雜系統）（Ordinary Differential Equation）;
# from scipy.linalg import solve as scipy_linalg_solve  # 導入第三方擴展包「scipy」中的缐性代數模組「linalg」中的「solve()」函數，用於求解矩陣（matrix）乘、除法（multiplication, division）（求解缐性方程組）計算;
# from scipy.linalg import inv as scipy_linalg_inv  # 導入第三方擴展包「scipy」中的缐性代數模組「linalg」中的「inv()」函數，用於求解矩陣（matrix）的逆（Inverse matrix）計算;
# # https://www.statsmodels.org/stable/index.html
# import statsmodels.api as statsmodels_api  # 導入第三方擴展包「statsmodels」中的「api()」函數，用於模型方程式擬合自定義函數;
# import statsmodels.formula.api as statsmodels_formula_api  # 導入第三方擴展包「statsmodels」中的公式模組「formula」中的「api()」函數，用於模型方程式擬合;
# from statsmodels.tsa.arima_model import ARIMA as statsmodels_tsa_arima_model_ARIMA  # 導入第三方擴展包「statsmodels」中的時間序列（Time Series）分析模組「tsa」中的自回歸差分移動平均模型模組「arima_model」中的「ARIMA()」函數，用於擬合自回歸移動平均模型（ARIMA）;
# from statsmodels.tsa.seasonal import seasonal_decompose as statsmodels_tsa_seasonal_seasonal_decompose  # 導入第三方擴展包「statsmodels」中的時間序列（Time Series）分析模組「tsa」中的自回歸差分移動平均模型模組「seasonal」中的「seasonal_decompose()」函數，用於擬合自回歸移動平均模型（ARIMA）;
# https://docs.sympy.org/latest/tutorial/preliminaries.html#installation
# import sympy  # 導入第三方擴展包「sympy」，用於符號計算;
# https://dateutil.readthedocs.io/en/latest/
# https://github.com/dateutil/dateutil
# 先升級 pip 擴展包管理工具：root@localhost:~# python -m pip install --upgrade pip
# 再安裝第三方擴展包：root@localhost:~# pip install python-dateutil -i https://pypi.mirrors.ustc.edu.cn/simple
# from dateutil.relativedelta import relativedelta as dateutil_relativedelta_relativedelta    # 從第三方擴展包「dateutil」中導入「relativedelta」模組中的「relativedelta()」函數，用於處理日期數據加減量，需要事先安裝：pip install python-dateutil 配置成功;
# from dateutil.parser import parse as dateutil_parser_parse  # 從第三方擴展包「dateutil」中導入「parser」模組中的「parse()」函數，用於格式化日期數據，需要事先安裝：pip install python-dateutil 配置成功;
# https://alkaline-ml.com/pmdarima/
# https://github.com/alkaline-ml/pmdarima
# from pmdarima.arima import auto_arima as pmdarima_arima_auto_arima  # 導入第三方擴展包「pmdarima」中的自回歸差分移動平均模型模組「arima」中的「auto_arima()」函數，用於自動擬合含有季節周期的時間序列（Time Series）模型預測分析;

# 匯入自定義的描述統計模組脚本文檔「./Statis_Descript.py」;
# os.getcwd() # 獲取當前工作目錄路徑;
# os.path.abspath("..")  # 當前運行脚本所在目錄上一層的絕對路徑;
# os.path.join(os.path.abspath("."), 'Statis_Descript')  # 拼接路徑字符串;
# pathlib.Path(os.path.join(os.path.abspath("."), Statis_Descript)  # 返回路徑對象;
# sys.path.append(os.path.abspath(".."))  # 將上一層目錄加入系統的搜索清單，當導入脚本時會增加搜索這個自定義添加的路徑;
# 注意導入本地 Python 脚本，只寫文檔名不要加文檔的擴展名「.py」，如果不使用 sys.path.append() 函數添加自定義其它的搜索路徑，則只能放在當前的工作目錄「"."」
# import Statis_Descript as Statis_Descript  # 導入當前運行代碼所在目錄的，自定義脚本文檔「./Statis_Descript」;
# Transformation = Statis_Descript.Transformation
# outliers_clean = Statis_Descript.outliers_clean
# from Statis_Descript import Transformation as Transformation  # 導入自定義 Python 脚本文檔「./Statis_Descript.py」中的數據歸一化、數據變換函數「Transformation()」，用於將原始數據歸一化處理;
# from Statis_Descript import outliers_clean as outliers_clean  # 導入自定義 Python 脚本文檔「./Statis_Descript.py」中的離群值檢查（含有粗大誤差的數據）函數「outliers_clean()」，用於檢查原始數據歸中的離群值;

# 匯入自定義的日棒缐（K-Line）原始數據整理模組脚本文檔「./Quantitative_Data_Cleaning.py」;
# import Quantitative_Data_Cleaning as Quantitative_Data_Cleaning

# 匯入自定義的量化交易指標計算模組脚本文檔「./Quantitative_Indicators.py」;
import Quantitative_Indicators as Quantitative_Indicators  # 導入當前運行代碼所在目錄的，自定義脚本文檔「./Quantitative_Indicators」;
Intuitive_Momentum = Quantitative_Indicators.Intuitive_Momentum
Intuitive_Momentum_KLine = Quantitative_Indicators.Intuitive_Momentum_KLine
# return_Intuitive_Momentum = Intuitive_Momentum(
#     stepping_data["ticker_symbol"]["close_price"],  # = [],
#     int(3),  # 觀察收益率歷史向前推的交易日長度;
#     y_P_Positive = None,  # = float(1.0),  # 增長率（正）的可能性（頻率）示意;
#     y_P_Negative = None,  # = float(1.0),  # 衰退率（負）的可能性（頻率）示意;
#     weight = None  # = []  # [float(int(int(i) + int(1)) / int(P1)) for i in range(P1)]  # 每計增長率的權重（weight）值，距離當下時長的倒數（直覺推理有效性示意）;
# )
# print("closing price growth rate :\n", return_Intuitive_Momentum)
# return_Intuitive_Momentum_KLine = Intuitive_Momentum_KLine(
#     {
#         "date_transaction": stepping_data["ticker_symbol"]["date_transaction"],  # 交易日期;
#         "turnover_volume": stepping_data["ticker_symbol"]["turnover_volume"],  # 成交量;
#         # "turnover_amount": stepping_data["ticker_symbol"]["turnover_amount"],  # 成交總金額;
#         "opening_price": stepping_data["ticker_symbol"]["opening_price"],  # 開盤成交價;
#         "close_price": stepping_data["ticker_symbol"]["close_price"],  # 收盤成交價;
#         "low_price": stepping_data["ticker_symbol"]["low_price"],  # 最低成交價;
#         "high_price": stepping_data["ticker_symbol"]["high_price"],  # 最高成交價;
#         # "focus": stepping_data["ticker_symbol"]["focus"],  # 當日成交價重心;
#         # "amplitude": stepping_data["ticker_symbol"]["amplitude"],  # 當日成交價絕對振幅;
#         # "amplitude_rate": stepping_data["ticker_symbol"]["amplitude_rate"],  # 當日成交價相對振幅（%）;
#         # "opening_price_Standardization": stepping_data["ticker_symbol"]["opening_price_Standardization"],  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
#         # "closing_price_Standardization": stepping_data["ticker_symbol"]["closing_price_Standardization"],  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
#         # "low_price_Standardization": stepping_data["ticker_symbol"]["low_price_Standardization"],  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
#         # "high_price_Standardization": stepping_data["ticker_symbol"]["high_price_Standardization"],  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
#         "turnover_volume_growth_rate": stepping_data["ticker_symbol"]["turnover_volume_growth_rate"],  # 成交量的成長率;
#         "opening_price_growth_rate": stepping_data["ticker_symbol"]["opening_price_growth_rate"],  # 開盤價的成長率;
#         "closing_price_growth_rate": stepping_data["ticker_symbol"]["closing_price_growth_rate"],  # 收盤價的成長率;
#         "closing_minus_opening_price_growth_rate": stepping_data["ticker_symbol"]["closing_minus_opening_price_growth_rate"],  # 收盤價減開盤價的成長率;
#         "high_price_proportion": stepping_data["ticker_symbol"]["high_price_proportion"],  # 收盤價和開盤價裏的最大值占最高價的比例;
#         "low_price_proportion": stepping_data["ticker_symbol"]["low_price_proportion"],  # 最低價占收盤價和開盤價裏的最小值的比例;
#         # "turnover_rate": stepping_data["ticker_symbol"]["turnover_rate"],  # 成交量換手率;
#         # "price_earnings": stepping_data["ticker_symbol"]["price_earnings"],  # 每股收益（公司經營利潤率 ÷ 股本）;
#         # "book_value_per_share": stepping_data["ticker_symbol"]["book_value_per_share"],  # 每股净值（公司净資產 ÷ 股本）;
#         # "capitalization": stepping_data["ticker_symbol"]["capitalization"]  # 總市值;
#     },
#     int(3),  # 觀察收益率歷史向前推的交易日長度;
#     y_P_Positive = None,  # = float(1.0),  # 增長率（正）的可能性（頻率）示意;
#     y_P_Negative = None,  # = float(1.0),  # 衰退率（負）的可能性（頻率）示意;
#     weight = None,  # = [],  # [float(int(int(i) + int(1)) / int(P1)) for i in range(P1)]  # 每計增長率的權重（weight）值，距離當下時長的倒數（直覺推理有效性示意）;
#     Intuitive_Momentum = Intuitive_Momentum
# )
# print("turnover volume growth rate :\n", return_Intuitive_Momentum_KLine["P1_turnover_volume_growth_rate"])
# print("opening price growth rate :\n", return_Intuitive_Momentum_KLine["P1_opening_price_growth_rate"])
# print("closing price growth rate :\n", return_Intuitive_Momentum_KLine["P1_closing_price_growth_rate"])
# print("closing minus opening price growth rate :\n", return_Intuitive_Momentum_KLine["P1_closing_minus_opening_price_growth_rate"])
# print("high price proportion :\n", return_Intuitive_Momentum_KLine["P1_high_price_proportion"])
# print("low price proportion :\n", return_Intuitive_Momentum_KLine["P1_low_price_proportion"])
# print("intuitive momentum indicator :\n", return_Intuitive_Momentum_KLine["P1_Intuitive_Momentum"])

# 匯入自定義的量化交易擇時模組脚本文檔「./Quantitative_MarketTiming.py」;
import Quantitative_MarketTiming as Quantitative_MarketTiming  # 導入當前運行代碼所在目錄的，自定義脚本文檔「./Quantitative_MarketTiming」;
MarketTiming_fit_model = Quantitative_MarketTiming.MarketTiming_fit_model
MarketTiming = Quantitative_MarketTiming.MarketTiming
# return_MarketTiming = MarketTiming(
#     stepping_data = {"ticker_symbol": stepping_data["ticker_symbol"]},  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     stepping_data = {"ticker_symbol": stepping_data["ticker_symbol"]},  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     Pdata_0 = [int(3), float(+1.0), float(-1.0), float(0.0)],  # stepping_data["ticker_symbol"]["Pdata_0"],
#     # weight = [],  # stepping_data["ticker_symbol"]["weight"],  # [float(1.0) for i in range(int(0), int(len(stepping_data)), int(1))],
#     Plower = [-math.inf, -math.inf, -math.inf, -math.inf],  # stepping_data["ticker_symbol"]["Plower"],
#     Pupper = [+math.inf, +math.inf, +math.inf, +math.inf],  # stepping_data["ticker_symbol"]["Pupper"],
#     MarketTiming_fit_model = MarketTiming_fit_model,
#     Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
#     investment_method = "Long_Position_and_Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# return_MarketTiming == {
#     str(ticker_symbol) : {
#         "Coefficient": coefficient_from_fit,  # 最優化計算之後得到的參數;
#         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
#         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
#         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
#         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
#         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
#         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
#         "profit_total": y_total,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
#         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
#         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
#         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
#         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
#         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
#         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
#         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
#         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
#         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
#         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
#         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
#         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
#         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
#         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
#         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
#         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
#         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
#         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
#         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
#         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
#         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
#         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
#         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
#         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
#         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
#         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
#         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
#         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
#         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
#         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
#         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
#         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
#         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
#         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
#         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
#         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
#         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
#         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
#         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
#         "revenue_and_expenditure_records_date_transaction": y_G,  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
#         "weight_MarketTiming": weight_MarketTiming_Dict  # 擇時權重，每兩次對衝交易的盈利概率占比;
#     }
# }
# print("optimization - coefficient : ", return_MarketTiming["ticker_symbol"]["Coefficient"])  # 最優化計算之後得到的參數;
# print("optimization - coefficient StandardDeviation : ", return_MarketTiming["ticker_symbol"]["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
# print("optimization - coefficient Confidence Lower 95% : ", return_MarketTiming["ticker_symbol"]["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
# print("optimization - coefficient Confidence Upper 95% : ", return_MarketTiming["ticker_symbol"]["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
# print("y - fit : ", return_MarketTiming["ticker_symbol"]["Yfit"])  # 擬合 y 值;
# print("y - fit Uncertainty Lower : ", return_MarketTiming["ticker_symbol"]["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
# print("y - fit Uncertainty Upper : ", return_MarketTiming["ticker_symbol"]["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
# print("residual : ", return_MarketTiming["ticker_symbol"]["Residual"])  # 擬合殘差;
# print("optimization - y_profit : ", return_MarketTiming["ticker_symbol"]["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("Long Position optimization - y_profit : ", return_MarketTiming["ticker_symbol"]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("Short Selling optimization - y_profit : ", return_MarketTiming["ticker_symbol"]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("optimization - y_loss : ", return_MarketTiming["ticker_symbol"]["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("Long Position optimization - y_loss : ", return_MarketTiming["ticker_symbol"]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("Short Selling optimization - y_loss : ", return_MarketTiming["ticker_symbol"]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("profit total per share : ", return_MarketTiming["ticker_symbol"]["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Long Position profit total per share : ", return_MarketTiming["ticker_symbol"]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Short Selling profit total per share : ", return_MarketTiming["ticker_symbol"]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("profit Positive : ", return_MarketTiming["ticker_symbol"]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Long Position profit Positive : ", return_MarketTiming["ticker_symbol"]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Short Selling_profit Positive : ", return_MarketTiming["ticker_symbol"]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("profit Positive probability : ", return_MarketTiming["ticker_symbol"]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Long Position profit Positive probability : ", return_MarketTiming["ticker_symbol"]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Short Selling profit Positive probability : ", return_MarketTiming["ticker_symbol"]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("profit Negative : ", return_MarketTiming["ticker_symbol"]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Long Position profit Negative : ", return_MarketTiming["ticker_symbol"]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Short Selling profit Negative : ", return_MarketTiming["ticker_symbol"]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("profit Negative probability : ", return_MarketTiming["ticker_symbol"]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Long Position profit Negative probability : ", return_MarketTiming["ticker_symbol"]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Short Selling profit Negative probability : ", return_MarketTiming["ticker_symbol"]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("maximum_drawdown : ", return_MarketTiming["ticker_symbol"]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Long_Position : ", return_MarketTiming["ticker_symbol"]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Short_Selling : ", return_MarketTiming["ticker_symbol"]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("Long_Position_drawdown_date_transaction : ", return_MarketTiming["ticker_symbol"]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# print("Short_Selling_drawdown_date_transaction : ", return_MarketTiming["ticker_symbol"]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# print("average price amplitude date transaction : ", return_MarketTiming["ticker_symbol"]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Long Position average price amplitude date transaction : ", return_MarketTiming["ticker_symbol"]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Short Selling average price amplitude date transaction : ", return_MarketTiming["ticker_symbol"]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("average volume turnover date transaction : ", return_MarketTiming["ticker_symbol"]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Long Position average volume turnover date transaction : ", return_MarketTiming["ticker_symbol"]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Short Selling average volume turnover date transaction : ", return_MarketTiming["ticker_symbol"]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("average date transaction between : ", return_MarketTiming["ticker_symbol"]["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Long Position average date transaction between : ", return_MarketTiming["ticker_symbol"]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Short Selling average date transaction between : ", return_MarketTiming["ticker_symbol"]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("number Long Position date transaction : ", len(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"]))
# print("number Short Selling date transaction : ", len(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"]))
# print("weight MarketTiming : ", return_MarketTiming["ticker_symbol"]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_MarketTiming["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_MarketTiming["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_MarketTiming["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# print(return_MarketTiming["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# # return_MarketTiming["fit-image"].savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
# # import matplotlib
# # matplotlib.pyplot.show()
# # plot_Thread = threading.Thread(target=matplotlib.pyplot.show, args=(), daemon=False)
# # plot_Thread.start()
# # matplotlib.pyplot.savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
# return_MarketTiming_fit_model = MarketTiming_fit_model(
#     {"ticker_symbol" : stepping_data["ticker_symbol"]},  # stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     return_MarketTiming["ticker_symbol"]["Coefficient"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
#     return_MarketTiming["ticker_symbol"]["Coefficient"][1],  # float(+0.1),  # P2  # 買入閾值;
#     return_MarketTiming["ticker_symbol"]["Coefficient"][2],  # float(-0.1),  # P3  # 賣出閾值;
#     return_MarketTiming["ticker_symbol"]["Coefficient"][3],  # float(0.0),  # P4  # risk threshold drawdown loss; # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
#     Intuitive_Momentum_KLine,
#     "Long_Position_and_Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# return_MarketTiming_fit_model == {
#     "ticker_symbol" : {
#         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
#         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
#         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
#         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
#         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
#         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
#         "profit_total": y_total,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
#         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
#         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
#         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
#         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
#         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
#         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
#         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
#         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
#         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
#         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
#         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
#         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
#         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
#         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
#         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
#         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
#         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
#         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
#         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
#         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
#         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
#         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
#         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
#         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
#         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
#         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
#         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
#         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
#         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
#         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
#         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
#         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
#         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
#         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
#         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
#         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
#         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
#         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
#         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
#         "revenue_and_expenditure_records_date_transaction": y_G  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
#     }
# }
# print("y_profit = ", return_MarketTiming_fit_model["002611"]["y_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_Long_Position_profit = ", return_MarketTiming_fit_model["002611"]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_Short_Selling_profit = ", return_MarketTiming_fit_model["002611"]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_loss = ", return_MarketTiming_fit_model["002611"]["y_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("y_Long_Position_loss = ", return_MarketTiming_fit_model["002611"]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("y_Short_Selling_loss = ", return_MarketTiming_fit_model["002611"]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("profit_total = ", return_MarketTiming_fit_model["ticker_symbol"]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# print("Long_Position_profit_total = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# print("Short_Selling_profit_total = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# print("profit_Positive = ", return_MarketTiming_fit_model["ticker_symbol"]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Long_Position_profit_Positive = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Short_Selling_profit_Positive = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("profit_Positive_probability = ", return_MarketTiming_fit_model["ticker_symbol"]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Long_Position_profit_Positive_probability = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Short_Selling_profit_Positive_probability = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("profit_Negative = ", return_MarketTiming_fit_model["ticker_symbol"]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Long_Position_profit_Negative = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Short_Selling_profit_Negative = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("profit_Negative_probability = ", return_MarketTiming_fit_model["ticker_symbol"]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Long_Position_profit_Negative_probability = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Short_Selling_profit_Negative_probability = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print("maximum_drawdown = ", return_MarketTiming_fit_model["ticker_symbol"]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Long_Position = ", return_MarketTiming_fit_model["ticker_symbol"]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Short_Selling = ", return_MarketTiming_fit_model["ticker_symbol"]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# print("average_price_amplitude_date_transaction = ", return_MarketTiming_fit_model["ticker_symbol"]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Long_Position_average_price_amplitude_date_transaction = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Short_Selling_average_price_amplitude_date_transaction = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print("average_volume_turnover_date_transaction = ", return_MarketTiming_fit_model["ticker_symbol"]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Long_Position_average_volume_turnover_date_transaction = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Short_Selling_average_volume_turnover_date_transaction = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print("average_date_transaction_between = ", return_MarketTiming_fit_model["ticker_symbol"]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
# print("Long_Position_average_date_transaction_between = ", return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Short_Selling_average_date_transaction_between = ", return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("weight_MarketTiming = ", return_MarketTiming_fit_model["ticker_symbol"]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_MarketTiming_fit_model["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# print(return_MarketTiming_fit_model["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;

# 匯入自定義的量化交易選股模組脚本文檔「./Quantitative_PickStock.py」;
import Quantitative_PickStock as Quantitative_PickStock  # 導入當前運行代碼所在目錄的，自定義脚本文檔「./Quantitative_PickStock」;
PickStock_fit_model = Quantitative_PickStock.PickStock_fit_model
PickStock = Quantitative_PickStock.PickStock
# return_PickStock = PickStock(
#     stepping_data = stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     stepping_data = stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     Pdata_0 = [int(3), int(5)],  # stepping_data["Pdata_0"],
#     # weight = []  # stepping_data["weight"],
#     Plower = [-math.inf, -math.inf],  # stepping_data["Plower"],
#     Pupper = [+math.inf, +math.inf],  # stepping_data["Pupper"],
#     MarketTiming_Parameter = MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;  # = {"ticker_symbol" : {"Long_Position" : [int, float, float, float], "Short_Selling" : [int, float, float, float]}},
#     PickStock_fit_model = PickStock_fit_model,
#     MarketTiming = MarketTiming,
#     MarketTiming_fit_model = MarketTiming_fit_model,
#     Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
#     investment_method = "Long_Position_and_Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# print("optimization - coefficient : ", return_PickStock["Coefficient"])  # 最優化計算之後得到的參數;
# print("optimization - coefficient StandardDeviation : ", return_PickStock["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
# print("optimization - coefficient Confidence Lower 95% : ", return_PickStock["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
# print("optimization - coefficient Confidence Upper 95% : ", return_PickStock["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
# print("y - fit : ", return_PickStock["Yfit"])  # 擬合 y 值;
# print("y - fit Uncertainty Lower : ", return_PickStock["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
# print("y - fit Uncertainty Upper : ", return_PickStock["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
# print("residual : ", return_PickStock["Residual"])  # 擬合殘差;
# print("optimization - y_profit : ", return_PickStock["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("Long Position optimization - y_profit : ", return_PickStock["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("Short Selling optimization - y_profit : ", return_PickStock["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("optimization - y_loss : ", return_PickStock["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("Long Position optimization - y_loss : ", return_PickStock["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("Short Selling optimization - y_loss : ", return_PickStock["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("maximum_drawdown : ", return_PickStock["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Long_Position : ", return_PickStock["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Short_Selling : ", return_PickStock["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("profit total per share : ", return_PickStock["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Long Position profit total per share : ", return_PickStock["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Short Selling profit total per share : ", return_PickStock["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("profit Positive : ", return_PickStock["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Long Position profit Positive : ", return_PickStock["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Short Selling_profit Positive : ", return_PickStock["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("profit Positive probability : ", return_PickStock["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Long Position profit Positive probability : ", return_PickStock["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Short Selling profit Positive probability : ", return_PickStock["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("profit Negative : ", return_PickStock["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Long Position profit Negative : ", return_PickStock["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Short Selling profit Negative : ", return_PickStock["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("profit Negative probability : ", return_PickStock["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Long Position profit Negative probability : ", return_PickStock["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Short Selling profit Negative probability : ", return_PickStock["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("average price amplitude date transaction : ", return_PickStock["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Long Position average price amplitude date transaction : ", return_PickStock["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Short Selling average price amplitude date transaction : ", return_PickStock["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("average volume turnover date transaction : ", return_PickStock["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Long Position average volume turnover date transaction : ", return_PickStock["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Short Selling average volume turnover date transaction : ", return_PickStock["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("average date transaction between : ", return_PickStock["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Long Position average date transaction between : ", return_PickStock["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Short Selling average date transaction between : ", return_PickStock["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("number PickStock transaction : ", return_PickStock["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
# print("weight_PickStock : ", return_PickStock["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
# print("pick stock sort ticker symbol : ", return_PickStock["PickStock_sort"]["ticker_symbol"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
# print("pick stock sort score : ", return_PickStock["PickStock_sort"]["score"])  # 依照選股規則排序篩選出的股票得分值存儲數組;
# print(return_PickStock["PickStock_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# print("test profit estimate : ", return_PickStock["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("test odds ratio estimate : ", return_PickStock["test_odds_ratio"])
# print("test date transaction between : ", return_PickStock["test_date_transaction_between"])
# # print(return_PickStock["testData"]);  # 傳入測試數據集的計算結果;
# print("test profit total per share : ", return_PickStock["testData"]["profit_total"])
# print("test Long Position profit total per share : ", return_PickStock["testData"]["Long_Position_profit_total"])
# print("test Short Selling profit total per share : ", return_PickStock["testData"]["Short_Selling_profit_total"])
# print("test profit positive per share : ", return_PickStock["testData"]["profit_Positive"])
# print("test Long Position profit positive per share : ", return_PickStock["testData"]["Long_Position_profit_Positive"])
# print("test Short Selling profit positive per share : ", return_PickStock["testData"]["Short_Selling_profit_Positive"])
# print("test profit positive probability : ", return_PickStock["testData"]["profit_Positive_probability"])
# print("test Long Position profit positive probability : ", return_PickStock["testData"]["Long_Position_profit_Positive_probability"])
# print("test Short Selling profit positive probability : ", return_PickStock["testData"]["Short_Selling_profit_Positive_probability"])
# print("test profit negative per share : ", return_PickStock["testData"]["profit_Negative"])
# print("test Long Position profit negative per share : ", return_PickStock["testData"]["Long_Position_profit_Negative"])
# print("test Short Selling profit negative per share : ", return_PickStock["testData"]["Short_Selling_profit_Negative"])
# print("test profit negative probability : ", return_PickStock["testData"]["profit_Negative_probability"])
# print("test Long Position profit negative probability : ", return_PickStock["testData"]["Long_Position_profit_Negative_probability"])
# print("test Short Selling profit negative probability : ", return_PickStock["testData"]["Short_Selling_profit_Negative_probability"])
# print("test average date transaction between : ", return_PickStock["testData"]["average_date_transaction_between"])
# print("test Long Position average date transaction between : ", return_PickStock["testData"]["Long_Position_average_date_transaction_between"])
# print("test Short Selling average date transaction between : ", return_PickStock["testData"]["Short_Selling_average_date_transaction_between"])
# print("test number_PickStock_transaction : ", return_PickStock["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
# print("test weight PickStock : ", return_PickStock["testData"]["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
# # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["P1_Array"])
# # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
# # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
# # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"])
# # return_PickStock["fit-image"].savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
# # import matplotlib
# # matplotlib.pyplot.show()
# # plot_Thread = threading.Thread(target=matplotlib.pyplot.show, args=(), daemon=False)
# # plot_Thread.start()
# # matplotlib.pyplot.savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
# return_PickStock_fit_model = PickStock_fit_model(
#     stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     return_PickStock["Coefficient"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
#     return_PickStock["Coefficient"][1],  # int(3),  # P2  # 依據市值高低分組選股的分類數目;
#     MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;  # = {"ticker_symbol" : {"Long_Position" : [int, float, float, float], "Short_Selling" : [int, float, float, float]}},
#     MarketTiming,
#     MarketTiming_fit_model,
#     Intuitive_Momentum_KLine,
#     "Long_Position_and_Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# print("y_profit = ", return_PickStock_fit_model["y_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_Long_Position_profit = ", return_PickStock_fit_model["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_Short_Selling_profit = ", return_PickStock_fit_model["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_loss = ", return_PickStock_fit_model["y_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("y_Long_Position_loss = ", return_PickStock_fit_model["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("y_Short_Selling_loss = ", return_PickStock_fit_model["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("maximum_drawdown = ", return_PickStock_fit_model["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Long_Position = ", return_PickStock_fit_model["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Short_Selling = ", return_PickStock_fit_model["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("profit_total = ", return_PickStock_fit_model["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Long_Position_profit_total = ", return_PickStock_fit_model["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Short_Selling_profit_total = ", return_PickStock_fit_model["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("profit_Positive = ", return_PickStock_fit_model["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Long_Position_profit_Positive = ", return_PickStock_fit_model["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Short_Selling_profit_Positive = ", return_PickStock_fit_model["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("profit_Positive_probability = ", return_PickStock_fit_model["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Long_Position_profit_Positive_probability = ", return_PickStock_fit_model["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Short_Selling_profit_Positive_probability = ", return_PickStock_fit_model["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("profit_Negative = ", return_PickStock_fit_model["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Long_Position_profit_Negative = ", return_PickStock_fit_model["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Short_Selling_profit_Negative = ", return_PickStock_fit_model["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("profit_Negative_probability = ", return_PickStock_fit_model["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Long_Position_profit_Negative_probability = ", return_PickStock_fit_model["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Short_Selling_profit_Negative_probability = ", return_PickStock_fit_model["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("average_price_amplitude_date_transaction = ", return_PickStock_fit_model["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Long_Position_average_price_amplitude_date_transaction = ", return_PickStock_fit_model["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Short_Selling_average_price_amplitude_date_transaction = ", return_PickStock_fit_model["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("average_volume_turnover_date_transaction = ", return_PickStock_fit_model["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Long_Position_average_volume_turnover_date_transaction = ", return_PickStock_fit_model["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Short_Selling_average_volume_turnover_date_transaction = ", return_PickStock_fit_model["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("average_date_transaction_between = ", return_PickStock_fit_model["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
# print("Long_Position_average_date_transaction_between = ", return_PickStock_fit_model["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Short_Selling_average_date_transaction_between = ", return_PickStock_fit_model["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("number_PickStock_transaction = ", return_PickStock_fit_model["number_PickStock_transaction"])  # 交易過股票的總隻數;
# print("weight_PickStock = ", return_PickStock_fit_model["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
# print(return_PickStock_fit_model["PickStock_sort"])  # 依照選股規則排序篩選出的股票代碼字符串和得分存儲字典（Dict）;
# print(return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
# print(return_PickStock_fit_model["PickStock_sort"]["score"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"])
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"])
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;

# 匯入自定義的量化交易倉位模組脚本文檔「./Quantitative_SizePosition.py」;
import Quantitative_SizePosition as Quantitative_SizePosition  # 導入當前運行代碼所在目錄的，自定義脚本文檔「./Quantitative_PickStock」;
SizePosition_fit_model = Quantitative_SizePosition.SizePosition_fit_model
SizePosition = Quantitative_SizePosition.SizePosition
# return_SizePosition = SizePosition(
#     stepping_data = stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     stepping_data = stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     Pdata_0 = [return_MarketTiming_fit_model["ticker_symbol"]["weight_MarketTiming"], return_PickStock_fit_model["weight_PickStock"]],  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # stepping_data["002611"]["Pdata_0"],  # [{"ticker_symbol" : {"Long_Position" : float(), "Short_Selling" : float()}, {"ticker_symbol" : {"Long_Position" : float(), "Short_Selling" : float()}}],
#     weight = [],  # stepping_data["002611"]["weight"],
#     Plower = [],  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],  # [{"ticker_symbol" : {"Long_Position" : float(0.0), "Short_Selling" : float(0.0)}}, {"ticker_symbol" : {"Long_Position" : float(), "Short_Selling" : float()}}],  # [-math.inf, -math.inf, -math.inf, -math.inf, -math.inf],
#     Pupper = [],  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],  # [{"ticker_symbol" : {"Long_Position" : float(1.0), "Short_Selling" : float(1.0)}}, {"ticker_symbol" : {"Long_Position" : float(), "Short_Selling" : float()}}],  # [+math.inf, +math.inf, +math.inf, +math.inf, +math.inf],
#     MarketTiming_Parameter = MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;  # = {"ticker_symbol" : {"Long_Position" : [int, float, float, float], "Short_Selling" : [int, float, float, float]}},
#     PickStock_Parameter = PickStock_Parameter,  # 按照選股規則優化之後的參數字典;  # PickStock_Parameter_Dict,  # {"ticker_symbol" : {"Long_Position" : [int(), int()], "Short_Selling" => [int(), int()]}},
#     PickStock_ticker_symbol = return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"],  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;  # [[str()]],
#     SizePosition_fit_model = SizePosition_fit_model,
#     PickStock = PickStock,
#     PickStock_fit_model = PickStock_fit_model,
#     MarketTiming = MarketTiming,
#     MarketTiming_fit_model = MarketTiming_fit_model,
#     Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
#     investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# );
# print("optimization - coefficient 1 - weight_MarketTiming :", "\n", return_SizePosition["Coefficient"][0], "optimization - coefficient 2 - weight_PickStock :", "\n", return_SizePosition["Coefficient"][1])  # 最優化計算之後得到的參數;
# # print("optimization - coefficient StandardDeviation : ", return_SizePosition["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
# # print("optimization - coefficient Confidence Lower 95% : ", return_SizePosition["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
# # print("optimization - coefficient Confidence Upper 95% : ", return_SizePosition["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
# # print("y - fit : ", return_SizePosition["Yfit"])  # 擬合 y 值;
# # print("y - fit Uncertainty Lower : ", return_SizePosition["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
# # print("y - fit Uncertainty Upper : ", return_SizePosition["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
# # print("residual : ", return_SizePosition["Residual"])  # 擬合殘差;
# print("optimization - y_profit : ", return_SizePosition["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("Long Position optimization - y_profit : ", return_SizePosition["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("Short Selling optimization - y_profit : ", return_SizePosition["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# print("optimization - y_loss : ", return_SizePosition["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("Long Position optimization - y_loss : ", return_SizePosition["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("Short Selling optimization - y_loss : ", return_SizePosition["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# print("maximum_drawdown : ", return_SizePosition["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Long_Position : ", return_SizePosition["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Short_Selling : ", return_SizePosition["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("profit total per share : ", return_SizePosition["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Long Position profit total per share : ", return_SizePosition["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("Short Selling profit total per share : ", return_SizePosition["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("profit Positive : ", return_SizePosition["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Long Position profit Positive : ", return_SizePosition["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Short Selling_profit Positive : ", return_SizePosition["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("profit Positive probability : ", return_SizePosition["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Long Position profit Positive probability : ", return_SizePosition["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Short Selling profit Positive probability : ", return_SizePosition["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("profit Negative : ", return_SizePosition["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Long Position profit Negative : ", return_SizePosition["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Short Selling profit Negative : ", return_SizePosition["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("profit Negative probability : ", return_SizePosition["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Long Position profit Negative probability : ", return_SizePosition["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Short Selling profit Negative probability : ", return_SizePosition["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("average price amplitude date transaction : ", return_SizePosition["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Long Position average price amplitude date transaction : ", return_SizePosition["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Short Selling average price amplitude date transaction : ", return_SizePosition["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("average volume turnover date transaction : ", return_SizePosition["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Long Position average volume turnover date transaction : ", return_SizePosition["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Short Selling average volume turnover date transaction : ", return_SizePosition["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("average date transaction between : ", return_SizePosition["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Long Position average date transaction between : ", return_SizePosition["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Short Selling average date transaction between : ", return_SizePosition["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("number SizePosition transaction : ", return_SizePosition["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
# print(return_SizePosition["SizePosition_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# print("test profit estimate : ", return_SizePosition["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# print("test odds ratio estimate : ", return_SizePosition["test_odds_ratio"])
# print("test date transaction between : ", return_SizePosition["test_date_transaction_between"])
# # print(return_SizePosition["testData"])  # 傳入測試數據集的計算結果;
# print("test profit total per share : ", return_SizePosition["testData"]["profit_total"])
# print("test Long Position profit total per share : ", return_SizePosition["testData"]["Long_Position_profit_total"])
# print("test Short Selling profit total per share : ", return_SizePosition["testData"]["Short_Selling_profit_total"])
# print("test profit positive per share : ", return_SizePosition["testData"]["profit_Positive"])
# print("test Long Position profit positive per share : ", return_SizePosition["testData"]["Long_Position_profit_Positive"])
# print("test Short Selling profit positive per share : ", return_SizePosition["testData"]["Short_Selling_profit_Positive"])
# print("test profit positive probability : ", return_SizePosition["testData"]["profit_Positive_probability"])
# print("test Long Position profit positive probability : ", return_SizePosition["testData"]["Long_Position_profit_Positive_probability"])
# print("test Short Selling profit positive probability : ", return_SizePosition["testData"]["Short_Selling_profit_Positive_probability"])
# print("test profit negative per share : ", return_SizePosition["testData"]["profit_Negative"])
# print("test Long Position profit negative per share : ", return_SizePosition["testData"]["Long_Position_profit_Negative"])
# print("test Short Selling profit negative per share : ", return_SizePosition["testData"]["Short_Selling_profit_Negative"])
# print("test profit negative probability : ", return_SizePosition["testData"]["profit_Negative_probability"])
# print("test Long Position profit negative probability : ", return_SizePosition["testData"]["Long_Position_profit_Negative_probability"])
# print("test Short Selling profit negative probability : ", return_SizePosition["testData"]["Short_Selling_profit_Negative_probability"])
# print("test average date transaction between : ", return_SizePosition["testData"]["average_date_transaction_between"])
# print("test Long Position average date transaction between : ", return_SizePosition["testData"]["Long_Position_average_date_transaction_between"])
# print("test Short Selling average date transaction between : ", return_SizePosition["testData"]["Short_Selling_average_date_transaction_between"])
# print("test number SizePosition transaction : ", return_SizePosition["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
# # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["P1_Array"])
# # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
# # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
# # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"])
# weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
# weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
# if isinstance(return_SizePosition["Coefficient"], list) and len(return_SizePosition["Coefficient"]) >= 1 and isinstance(return_SizePosition["Coefficient"][0], dict):
#     for key, value in return_SizePosition["Coefficient"][0].items():
#         # print("Key: {key}, Value: {value}")
#         if isinstance(value, dict) and "Long_Position" in value:
#             if isinstance(weight_MarketTiming_Dict, dict) and str(key) in weight_MarketTiming_Dict:
#                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
#                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
#             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
#                 weight_MarketTiming_Dict[str(key)] = {}
#                 weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
#             # else:
# if isinstance(return_SizePosition["Coefficient"], dict) and len(return_SizePosition["Coefficient"]) >= 2 and isinstance(return_SizePosition["Coefficient"][1], dict):
#     for key, value in return_SizePosition["Coefficient"][1].items():
#         # print("Key: {key}, Value: {value}")
#         if isinstance(value, dict) and "Long_Position" in value:
#             if isinstance(weight_PickStock_Dict, dict) and str(key) in weight_PickStock_Dict:
#                 if isinstance(weight_PickStock_Dict[str(key)], dict):
#                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
#             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
#                 weight_PickStock_Dict[str(key)] = {}
#                 weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
#             # else:
# return_SizePosition = None  # 釋放内存;
# # investment_method = "Short_Selling"
# return_SizePosition = SizePosition(
#     stepping_data = stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     stepping_data = stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     Pdata_0 = [weight_MarketTiming_Dict, weight_PickStock_Dict],  # stepping_data["002611"]["Pdata_0"],
#     weight = [],  # stepping_data["002611"]["weight"],
#     Plower = [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
#     Pupper = [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
#     MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
#     PickStock_Parameter = PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;
#     PickStock_ticker_symbol = return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"],  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
#     SizePosition_fit_model = SizePosition_fit_model,
#     PickStock = PickStock,
#     PickStock_fit_model = PickStock_fit_model,
#     MarketTiming = MarketTiming,
#     MarketTiming_fit_model = MarketTiming_fit_model,
#     Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
#     investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# if isinstance(return_SizePosition["Coefficient"], list) and len(return_SizePosition["Coefficient"]) >= 1 and isinstance(return_SizePosition["Coefficient"][0], dict):
#     for key, value in return_SizePosition["Coefficient"][0].items():
#         # print("Key: {key}, Value: {value}")
#         if isinstance(value, dict) and "Short_Selling" in value:
#             if isinstance(weight_MarketTiming_Dict, dict) and str(key) in weight_PickStock_Dict:
#                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
#                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
#             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
#                 weight_MarketTiming_Dict[str(key)] = {}
#                 weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
#             # else:
# if isinstance(return_SizePosition["Coefficient"], list) and len(return_SizePosition["Coefficient"]) >= 2 and isinstance(return_SizePosition["Coefficient"][1], dict):
#     for key, value in return_SizePosition["Coefficient"][1].items():
#         # print("Key: {key}, Value: {value}")
#         if isinstance(value, dict) and Base.haskey(value, "Short_Selling")
#             if isinstance(weight_PickStock_Dict, dict) and str(key) in weight_PickStock_Dict:
#                 if isinstance(weight_PickStock_Dict[str(key)], dict):
#                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
#             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
#                 weight_PickStock_Dict[str(key)] = {}
#                 weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
#             # else:
# return_SizePosition = None  # 釋放内存;
# SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]  # 依照倉位規則優化之後得到的倉位數據存儲字典;
# return_SizePosition_fit_model = SizePosition_fit_model(
#     stepping_data,  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
#     SizePosition_Parameter_Array[0],  # 股票擇時交易倉位占比;  # weight_MarketTiming_Dict,  # {"ticker_symbol" : {"Long_Position" : float(), "Short_Selling" : float()}},
#     SizePosition_Parameter_Array[1],  # 選股組合占比;  # weight_PickStock_Dict,  # {"ticker_symbol" : {"Long_Position" : float(), "Short_Selling" : float()}},
#     {"ticker_symbol" : {"investment_method" : return_MarketTiming["ticker_symbol"]["Coefficient"]}},  # MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;  # {"ticker_symbol" : {"Long_Position" : [int(), float(), float(), float()], "Short_Selling" : [int(), float(), float(), float()]}},
#     {"investment_method" : return_PickStock["Coefficient"]},  # PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;  # {"ticker_symbol" : {"Long_Position" : [int(), int()], "Short_Selling" => [int(), int()]}},
#     return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"],  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;  # [[str()]],
#     PickStock,
#     PickStock_fit_model,
#     MarketTiming,
#     MarketTiming_fit_model,
#     Intuitive_Momentum_KLine,
#     "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# print("y_profit = ", return_PickStock_fit_model["y_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_Long_Position_profit = ", return_PickStock_fit_model["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_Short_Selling_profit = ", return_PickStock_fit_model["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# print("y_loss = ", return_PickStock_fit_model["y_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("y_Long_Position_loss = ", return_PickStock_fit_model["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("y_Short_Selling_loss = ", return_PickStock_fit_model["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# print("maximum_drawdown = ", return_PickStock_fit_model["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Long_Position = ", return_PickStock_fit_model["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("maximum_drawdown_Short_Selling = ", return_PickStock_fit_model["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# print("profit_total = ", return_SizePosition_fit_model["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# print("Long_Position_profit_total = ", return_SizePosition_fit_model["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# print("Short_Selling_profit_total = ", return_SizePosition_fit_model["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# print("profit_Positive = ", return_SizePosition_fit_model["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("profit_Negative = ", return_SizePosition_fit_model["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Long_Position_profit_Positive = ", return_SizePosition_fit_model["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Long_Position_profit_Negative = ", return_SizePosition_fit_model["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("Short_Selling_profit_Positive = ", return_SizePosition_fit_model["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# print("Short_Selling_profit_Negative = ", return_SizePosition_fit_model["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# print("profit_Positive_probability = ", return_SizePosition_fit_model["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("profit_Negative_probability = ", return_SizePosition_fit_model["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Long_Position_profit_Positive_probability = ", return_SizePosition_fit_model["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Long_Position_profit_Negative_probability = ", return_SizePosition_fit_model["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("Short_Selling_profit_Positive_probability = ", return_SizePosition_fit_model["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# print("Short_Selling_profit_Negative_probability = ", return_SizePosition_fit_model["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# print("average_price_amplitude_date_transaction = ", return_SizePosition_fit_model["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Long_Position_average_price_amplitude_date_transaction = ", return_SizePosition_fit_model["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("Short_Selling_average_price_amplitude_date_transaction = ", return_SizePosition_fit_model["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# print("average_volume_turnover_date_transaction = ", return_SizePosition_fit_model["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Long_Position_average_volume_turnover_date_transaction = ", return_SizePosition_fit_model["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("Short_Selling_average_volume_turnover_date_transaction = ", return_SizePosition_fit_model["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# print("average_date_transaction_between = ", return_SizePosition_fit_model["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
# print("Long_Position_average_date_transaction_between = ", return_SizePosition_fit_model["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("Short_Selling_average_date_transaction_between = ", return_SizePosition_fit_model["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# print("number_SizePosition_transaction = ", return_SizePosition_fit_model["number_PickStock_transaction"])  # 交易過股票的總隻數;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"])
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;



# 四、回測（back testing），推進分析（Stepper movement）（propulsion analysis）;

# import numpy
# import scipy
# from scipy import stats as scipy_stats  # 導入第三方擴展包「scipy」，用於統計學計算;
# import scipy.stats as scipy_stats
# https://www.scipy.org/docs.html
def BackTesting_Stepper(
    steppingData = {},  # = {"ticker_symbol" : {"date_transaction" : [datetime.date("2024-01-02").strftime("%Y-%m-%d")], "turnover_volume" : [int], "opening_price" : [float], "close_price" : [float], "low_price" : [float], "high_price" : [float]}},
    # risk_threshold = float(0.0),  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
    training_sequence_length = int(60),
    training_ticker_symbol = [],  # [str(item) for item in steppingData.keys()],  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
    testing_ticker_symbol = [],  # [str(item) for item in steppingData.keys()],  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
    testing_sequence_length = int(1),
    SizePosition = lambda argument : argument,
    SizePosition_fit_model = lambda argument : argument,
    SizePosition_Pdata_0 = [],
    SizePosition_weight = [],  # [float(1.0) for i in 1:len(training_data)],
    SizePosition_Plower = [],  # [-math.inf, -math.inf, -math.inf, -math.inf],
    SizePosition_Pupper = [],  # [+math.inf, +math.inf, +math.inf, +math.inf],
    PickStock = lambda argument : argument,
    PickStock_fit_model = lambda argument : argument,
    PickStock_Pdata_0 = [],
    PickStock_weight = [],  # [float(1.0) for i in 1:len(training_data)],
    PickStock_Plower = [],  # [-math.inf, -math.inf, -math.inf, -math.inf],
    PickStock_Pupper = [],  # [+math.inf, +math.inf, +math.inf, +math.inf],
    MarketTiming = lambda argument : argument,
    MarketTiming_fit_model = lambda argument : argument,
    MarketTiming_Pdata_0 = [],
    MarketTiming_weight = [],  # [float(1.0) for i in 1:len(training_data)],
    MarketTiming_Plower = [],  # [-math.inf, -math.inf, -math.inf, -math.inf],
    MarketTiming_Pupper = [],  # [+math.inf, +math.inf, +math.inf, +math.inf],
    Quantitative_Indicators_Function = lambda argument : argument,
    investment_method = "Long_Position_and_Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
):

    # 函數傳入參數 training_ticker_symbol 的預設值，設置爲等於傳入參數 steppingData 字典（dict）的鍵（key）名字符串（str）的列表（list）;
    if isinstance(training_ticker_symbol, list) and int(len(training_ticker_symbol)) == int(0):
        if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
            training_ticker_symbol = [str(item) for item in steppingData.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
    # 函數傳入參數 training_ticker_symbol 的預設值，設置爲等於傳入參數 steppingData 字典（dict）的鍵（key）名字符串（str）的列表（list）;
    if isinstance(testing_ticker_symbol, list) and int(len(testing_ticker_symbol)) == int(0):
        if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
            testing_ticker_symbol = [str(item) for item in steppingData.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;

    # risk_threshold_drawdown_loss = risk_threshold  # = float(0.0)  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
    training_data_sequence_length = training_sequence_length  # = int(60)
    training_data_ticker_symbol_Array = training_ticker_symbol  # = [str(item) for item in steppingData.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
    testing_data_ticker_symbol_Array = testing_ticker_symbol  # = [str(item) for item in steppingData.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
    testing_data_sequence_length = testing_sequence_length  # = int(1)

    # 求解各股票裏的最長交易天數;
    # 交易過股票的總隻數，函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
    maximum_ticker_symbol_transaction = int(0)  # 交易過股票的總隻數;
    maximum_dates_transaction = int(0)  # 各股票裏的最長交易天數;
    minimum_dates_transaction = int(0)  # 各股票裏的最短交易天數;
    if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        # 交易過股票的總隻數，函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
        maximum_ticker_symbol_transaction = int(len([item for item in steppingData.keys()]))  # 交易過股票的總隻數;
        # print(maximum_ticker_symbol_transaction)
        maximum_dates_transaction = int(0)  # 各股票裏的最長交易天數;
        minimum_dates_transaction = int(0)  # 各股票裏的最短交易天數;
        dates_transaction_Array = []
        # 遍歷字典的鍵:值對;
        for key, value in steppingData.items():
            # print("Key: {key}, Value: {value}")
            if isinstance(value, dict):
                if ("date_transaction" in value) and isinstance(value["date_transaction"], list):
                    # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                    dates_transaction_Array.append(int(len(value["date_transaction"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;

                    # 篩選最長交易天數;
                    if int(len(value["date_transaction"])) > int(maximum_dates_transaction):
                        maximum_dates_transaction_2 = int(len(value["date_transaction"]))
                        # global maximum_dates_transaction *= int(0)
                        maximum_dates_transaction *= int(0)
                        # global maximum_dates_transaction += int(maximum_dates_transaction_2)
                        maximum_dates_transaction += int(maximum_dates_transaction_2)
                if ("turnover_volume" in value) and isinstance(value["turnover_volume"], list):
                    dates_transaction_Array.append(int(len(value["turnover_volume"])))

                    # 篩選最長交易天數;
                    if int(len(value["turnover_volume"])) > int(maximum_dates_transaction):
                        maximum_dates_transaction_2 = int(len(value["turnover_volume"]))
                        # global maximum_dates_transaction *= int(0)
                        maximum_dates_transaction *= int(0)
                        # global maximum_dates_transaction += int(maximum_dates_transaction_2)
                        maximum_dates_transaction += int(maximum_dates_transaction_2)
                if ("opening_price" in value) and isinstance(value["opening_price"], list):
                    dates_transaction_Array.append(int(len(value["opening_price"])))

                    # 篩選最長交易天數;
                    if int(len(value["opening_price"])) > int(maximum_dates_transaction):
                        maximum_dates_transaction_2 = int(len(value["opening_price"]))
                        # global maximum_dates_transaction *= int(0)
                        maximum_dates_transaction *= int(0)
                        # global maximum_dates_transaction += int(maximum_dates_transaction_2)
                        maximum_dates_transaction += int(maximum_dates_transaction_2)
                if ("close_price" in value) and isinstance(value["close_price"], list):
                    dates_transaction_Array.append(int(len(value["close_price"])))

                    # 篩選最長交易天數;
                    if int(len(value["close_price"])) > int(maximum_dates_transaction):
                        maximum_dates_transaction_2 = int(len(value["close_price"]))
                        # global maximum_dates_transaction *= int(0)
                        maximum_dates_transaction *= int(0)
                        # global maximum_dates_transaction += int(maximum_dates_transaction_2)
                        maximum_dates_transaction += int(maximum_dates_transaction_2)
                if ("low_price" in value) and isinstance(value["low_price"], list):
                    dates_transaction_Array.append(int(len(value["low_price"])))

                    # 篩選最長交易天數;
                    if int(len(value["low_price"])) > int(maximum_dates_transaction):
                        maximum_dates_transaction_2 = int(len(value["low_price"]))
                        # global maximum_dates_transaction *= int(0)
                        maximum_dates_transaction *= int(0)
                        # global maximum_dates_transaction += int(maximum_dates_transaction_2)
                        maximum_dates_transaction += int(maximum_dates_transaction_2)
                if ("high_price" in value) and isinstance(value["high_price"], list):
                    dates_transaction_Array.append(int(len(value["high_price"])))

                    # 篩選最長交易天數;
                    if int(len(value["high_price"])) > int(maximum_dates_transaction):
                        maximum_dates_transaction_2 = int(len(value["high_price"]))
                        # global maximum_dates_transaction *= int(0)
                        maximum_dates_transaction *= int(0)
                        # global maximum_dates_transaction += int(maximum_dates_transaction_2)
                        maximum_dates_transaction += int(maximum_dates_transaction_2)
        # print(maximum_dates_transaction)
        if int(len(dates_transaction_Array)) > int(0):
            minimum_dates_transaction_2 = int(min(dates_transaction_Array))
            minimum_dates_transaction *= int(0)
            minimum_dates_transaction += int(minimum_dates_transaction_2)
        # print(minimum_dates_transaction)
        dates_transaction_Array = None

    # 求解擇時優化參數迭代初始值的預設值;
    if isinstance(MarketTiming_Pdata_0, list) and int(len(MarketTiming_Pdata_0)) == int(0):
        # if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        #     # 優化求解擇時參數;
        #     MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
        #     weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
        #     Plower_weight_MarketTiming_Dict = {}
        #     Pupper_weight_MarketTiming_Dict = {}

        #     for key, value in steppingData.items():
        #         # print("Key: {key}, Value: {value}")
        #         if isinstance(value, dict) and ("date_transaction" in value and isinstance(value["date_transaction"], list)) and ("turnover_volume" in value and isinstance(value["turnover_volume"], list)) and ("opening_price" in value and isinstance(value["opening_price"], list)) and ("close_price" in value and isinstance(value["close_price"], list)) and ("low_price" in value and isinstance(value["low_price"], list)) and ("high_price" in value and isinstance(value["high_price"], list)) and ("focus" in value and isinstance(value["focus"], list)) and ("amplitude" in value and isinstance(value["amplitude"], list)) and ("amplitude_rate" in value and isinstance(value["amplitude_rate"], list)) and ("opening_price_Standardization" in value and isinstance(value["opening_price_Standardization"], list)) and ("closing_price_Standardization" in value and isinstance(value["closing_price_Standardization"], list)) and ("low_price_Standardization" in value and isinstance(value["low_price_Standardization"], list)) and ("high_price_Standardization" in value and isinstance(value["high_price_Standardization"], list)) and ("turnover_volume_growth_rate" in value and isinstance(value["turnover_volume_growth_rate"], list)) and ("opening_price_growth_rate" in value and isinstance(value["opening_price_growth_rate"], list)) and ("closing_price_growth_rate" in value and isinstance(value["closing_price_growth_rate"], list)) and ("closing_minus_opening_price_growth_rate" in value and isinstance(value["closing_minus_opening_price_growth_rate"], list)) and ("high_price_proportion" in value and isinstance(value["high_price_proportion"], list)) and ("low_price_proportion" in value and isinstance(value["low_price_proportion"], list)):

        #             x0 = value["date_transaction"]  # 交易日期;
        #             x1 = value["turnover_volume"]  # 成交量;
        #             # x2 = value["turnover_amount"]  # 成交總金額;
        #             x3 = value["opening_price"]  # 開盤成交價;
        #             x4 = value["close_price"]  # 收盤成交價;
        #             x5 = value["low_price"]  # 最低成交價;
        #             x6 = value["high_price"]  # 最高成交價;
        #             x7 = value["focus"]  # 當日成交價重心;
        #             x8 = value["amplitude"]  # 當日成交價絕對振幅;
        #             x9 = value["amplitude_rate"]  # 當日成交價相對振幅（%）;
        #             x10 = value["opening_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
        #             x11 = value["closing_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
        #             x12 = value["low_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
        #             x13 = value["high_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
        #             x14 = value["turnover_volume_growth_rate"]  # 成交量的成長率;
        #             x15 = value["opening_price_growth_rate"]  # 開盤價的成長率;
        #             x16 = value["closing_price_growth_rate"]  # 收盤價的成長率;
        #             x17 = value["closing_minus_opening_price_growth_rate"]  # 收盤價減開盤價的成長率;
        #             x18 = value["high_price_proportion"]  # 收盤價和開盤價裏的最大值占最高價的比例;
        #             x19 = value["low_price_proportion"]  # 最低價占收盤價和開盤價裏的最小值的比例;
        #             # x20 = value["turnover_rate"]  # 成交量換手率;
        #             # x21 = value["price_earnings"]  # 每股收益（公司經營利潤率 ÷ 股本）;
        #             # x22 = value["book_value_per_share"]  # 每股净值（公司净資產 ÷ 股本）;
        #             # x23 = value["capitalization"]  # 總市值;
        #             # x24 = value["moving_average_5"]  # 收盤價 5 日滑動平均缐;
        #             # x25 = value["moving_average_10"]  # 收盤價 10 日滑動平均缐;
        #             # x26 = value["moving_average_20"]  # 收盤價 20 日滑動平均缐;
        #             # x27 = value["moving_average_30"]  # 收盤價 30 日滑動平均缐;
        #             Pdata_0 = value["Pdata_0"]
        #             Plower = value["Plower"]
        #             Pupper = value["Pupper"]
        #             weight = value["weight"]

        #             # investment_method = "Long_Position"
        #             return_MarketTiming = MarketTiming(
        #                 training_data = {
        #                     str(key) : {
        #                         "date_transaction": x0,
        #                         "turnover_volume": x1,
        #                         "opening_price": x3,
        #                         "close_price": x4,
        #                         "low_price": x5,
        #                         "high_price": x6,
        #                         "focus": x7,
        #                         "amplitude": x8,
        #                         "amplitude_rate": x9,
        #                         "opening_price_Standardization": x10,
        #                         "closing_price_Standardization": x11,
        #                         "low_price_Standardization": x12,
        #                         "high_price_Standardization": x13,
        #                         "turnover_volume_growth_rate": x14,
        #                         "opening_price_growth_rate": x15,
        #                         "closing_price_growth_rate": x16,
        #                         "closing_minus_opening_price_growth_rate": x17,
        #                         "high_price_proportion": x18,
        #                         "low_price_proportion": x19,
        #                         "Pdata_0": Pdata_0,
        #                         "Plower": Plower,
        #                         "Pupper": Pupper,
        #                         "weight": weight
        #                     }
        #                 },
        #                 testing_data = {
        #                     str(key) : {
        #                         "date_transaction": x0,
        #                         "turnover_volume": x1,
        #                         "opening_price": x3,
        #                         "close_price": x4,
        #                         "low_price": x5,
        #                         "high_price": x6,
        #                         "focus": x7,
        #                         "amplitude": x8,
        #                         "amplitude_rate": x9,
        #                         "opening_price_Standardization": x10,
        #                         "closing_price_Standardization": x11,
        #                         "low_price_Standardization": x12,
        #                         "high_price_Standardization": x13,
        #                         "turnover_volume_growth_rate": x14,
        #                         "opening_price_growth_rate": x15,
        #                         "closing_price_growth_rate": x16,
        #                         "closing_minus_opening_price_growth_rate": x17,
        #                         "high_price_proportion": x18,
        #                         "low_price_proportion": x19,
        #                         "Pdata_0": Pdata_0,
        #                         "Plower": Plower,
        #                         "Pupper": Pupper,
        #                         "weight": weight
        #                     }
        #                 },
        #                 Pdata_0 = [],  # [int(5), float(+0.1), float(-0.1), float(0.0)],  # [Pdata_0[1], Pdata_0[2], Pdata_0[3], Pdata_0[4]],  # Pdata_0, # value["Pdata_0"],
        #                 weight = [],  # weight,  # value["weight"],
        #                 Plower = [],  # [-math.inf, -math.inf, -math.inf, -math.inf],  # [Plower[1], Plower[2], Plower[3], Plower[4]],  # Plower, # value["Plower"],
        #                 Pupper = [],  # [+math.inf, +math.inf, +math.inf, +math.inf],  # [Pupper[1], Pupper[2], Pupper[3], Pupper[4]],  # Pupper, # value["Pupper"],
        #                 MarketTiming_fit_model = MarketTiming_fit_model,
        #                 Quantitative_Indicators_Function = Quantitative_Indicators_Function,
        #                 investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
        #             )
        #             # return_MarketTiming == {
        #             #     "ticker_symbol" : {
        #             #         "Coefficient": coefficient_from_fit,  # 最優化計算之後得到的參數;
        #             #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
        #             #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
        #             #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
        #             #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
        #             #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
        #             #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
        #             #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #             #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #             #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #             #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
        #             #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
        #             #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
        #             #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
        #             #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
        #             #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
        #             #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
        #             #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
        #             #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
        #             #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
        #             #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
        #             #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
        #             #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
        #             #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
        #             #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #             #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #             #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #             #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
        #             #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
        #             #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #             #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #             #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #             #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
        #             #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
        #             #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
        #             #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
        #             #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
        #             #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
        #             #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
        #             #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
        #             #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
        #             #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
        #             #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
        #             #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
        #             #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
        #             #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
        #             #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
        #             #         "revenue_and_expenditure_records_date_transaction": y_G,  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
        #             #         "weight_MarketTiming": weight_MarketTiming_Dict
        #             #     }
        #             # }
        #             # print(return_MarketTiming[key]["Coefficient"])  # 最優化計算之後得到的參數;
        #             # print(return_MarketTiming[key]["y_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
        #             # print(return_MarketTiming[key]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
        #             # print(return_MarketTiming[key]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
        #             # print(return_MarketTiming[key]["y_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
        #             # print(return_MarketTiming[key]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
        #             # print(return_MarketTiming[key]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
        #             # print(return_MarketTiming[key]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
        #             # print(return_MarketTiming[key]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
        #             # print(return_MarketTiming[key]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
        #             # print(return_MarketTiming[key]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
        #             # print(return_MarketTiming[key]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
        #             # print(return_MarketTiming[key]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
        #             # print(return_MarketTiming[key]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
        #             # print(return_MarketTiming[key]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
        #             # print(return_MarketTiming[key]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
        #             # print(return_MarketTiming[key]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
        #             # print(return_MarketTiming[key]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
        #             # print(return_MarketTiming[key]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
        #             # print(return_MarketTiming[key]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
        #             # print(return_MarketTiming[key]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
        #             # print(return_MarketTiming[key]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
        #             # print(return_MarketTiming[key]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
        #             # print(return_MarketTiming[key]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
        #             # print(return_MarketTiming[key]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #             # print(return_MarketTiming[key]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #             # print(return_MarketTiming[key]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #             # print(return_MarketTiming[key]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
        #             # print(return_MarketTiming[key]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
        #             # print(return_MarketTiming[key]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #             # print(return_MarketTiming[key]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #             # print(return_MarketTiming[key]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #             # print(return_MarketTiming[key]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
        #             # print(return_MarketTiming[key]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
        #             # print(return_MarketTiming[key]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
        #             # print(return_MarketTiming[key]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
        #             # print(return_MarketTiming[key]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
        #             # print(return_MarketTiming[key]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
        #             # print(return_MarketTiming[key]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
        #             # print(return_MarketTiming[key]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
        #             # print(return_MarketTiming[key]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
        #             # print(return_MarketTiming[key]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
        #             # print(return_MarketTiming[key]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
        #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
        #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
        #             # print(return_MarketTiming[key]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
        #             # print(return_MarketTiming[key]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
        #             # MarketTiming_Parameter[str(key)] = {}
        #             if isinstance(MarketTiming_Parameter, dict) and str(key) in MarketTiming_Parameter:
        #                 if isinstance(MarketTiming_Parameter[str(key)], dict):
        #                     MarketTiming_Parameter[str(key)]["Long_Position"] = return_MarketTiming[key]["Coefficient"]
        #             elif isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
        #                 MarketTiming_Parameter[str(key)] = {}
        #                 MarketTiming_Parameter[str(key)]["Long_Position"] = return_MarketTiming[key]["Coefficient"]
        #             # else:
        #             if isinstance(weight_MarketTiming_Dict, dict) and str(key) in weight_MarketTiming_Dict:
        #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
        #                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["weight_MarketTiming"]["Long_Position"]  # 依照擇時規則交易倉位參數的存儲字典;
        #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
        #                 weight_MarketTiming_Dict[str(key)] = {}
        #                 weight_MarketTiming_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["weight_MarketTiming"]["Long_Position"]  # 依照擇時規則交易倉位參數的存儲字典;
        #             # else:
        #             if isinstance(Plower_weight_MarketTiming_Dict, dict) and str(key) in Plower_weight_MarketTiming_Dict:
        #                 if isinstance(Plower_weight_MarketTiming_Dict[str(key)], dict):
        #                     Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
        #             elif isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
        #                 Plower_weight_MarketTiming_Dict[str(key)] = {}
        #                 Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
        #             # else:
        #             if isinstance(Pupper_weight_MarketTiming_Dict, dict) and str(key) in Pupper_weight_MarketTiming_Dict:
        #                 if isinstance(Pupper_weight_MarketTiming_Dict[str(key)], dict):
        #                     Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #             elif isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
        #                 Pupper_weight_MarketTiming_Dict[str(key)] = {}
        #                 Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #             # else:
        #             return_MarketTiming = None  # 釋放内存;

        #             # investment_method = "Short_Selling"
        #             return_MarketTiming = MarketTiming(
        #                 training_data = {
        #                     str(key) : {
        #                         "date_transaction": x0,
        #                         "turnover_volume": x1,
        #                         "opening_price": x3,
        #                         "close_price": x4,
        #                         "low_price": x5,
        #                         "high_price": x6,
        #                         "focus": x7,
        #                         "amplitude": x8,
        #                         "amplitude_rate": x9,
        #                         "opening_price_Standardization": x10,
        #                         "closing_price_Standardization": x11,
        #                         "low_price_Standardization": x12,
        #                         "high_price_Standardization": x13,
        #                         "turnover_volume_growth_rate": x14,
        #                         "opening_price_growth_rate": x15,
        #                         "closing_price_growth_rate": x16,
        #                         "closing_minus_opening_price_growth_rate": x17,
        #                         "high_price_proportion": x18,
        #                         "low_price_proportion": x19,
        #                         "Pdata_0": Pdata_0,
        #                         "Plower": Plower,
        #                         "Pupper": Pupper,
        #                         "weight": weight
        #                     }
        #                 },
        #                 testing_data = {
        #                     str(key) : {
        #                         "date_transaction": x0,
        #                         "turnover_volume": x1,
        #                         "opening_price": x3,
        #                         "close_price": x4,
        #                         "low_price": x5,
        #                         "high_price": x6,
        #                         "focus": x7,
        #                         "amplitude": x8,
        #                         "amplitude_rate": x9,
        #                         "opening_price_Standardization": x10,
        #                         "closing_price_Standardization": x11,
        #                         "low_price_Standardization": x12,
        #                         "high_price_Standardization": x13,
        #                         "turnover_volume_growth_rate": x14,
        #                         "opening_price_growth_rate": x15,
        #                         "closing_price_growth_rate": x16,
        #                         "closing_minus_opening_price_growth_rate": x17,
        #                         "high_price_proportion": x18,
        #                         "low_price_proportion": x19,
        #                         "Pdata_0": Pdata_0,
        #                         "Plower": Plower,
        #                         "Pupper": Pupper,
        #                         "weight": weight
        #                     }
        #                 },
        #                 Pdata_0 = [],  # [int(5), float(+0.1), float(-0.1), float(0.0)],  # [Pdata_0[1], Pdata_0[2], Pdata_0[3], Pdata_0[4]],  # Pdata_0, # value["Pdata_0"],
        #                 weight = [],  # weight,  # value["weight"],
        #                 Plower = [],  # [-math.inf, -math.inf, -math.inf, -math.inf],  # [Plower[1], Plower[2], Plower[3], Plower[4]],  # Plower, # value["Plower"],
        #                 Pupper = [],  # [+math.inf, +math.inf, +math.inf, +math.inf],  # [Pupper[1], Pupper[2], Pupper[3], Pupper[4]],  # Pupper, # value["Pupper"],
        #                 MarketTiming_fit_model = MarketTiming_fit_model,
        #                 Quantitative_Indicators_Function = Quantitative_Indicators_Function,
        #                 investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
        #             )
        #             if isinstance(MarketTiming_Parameter, dict) and str(key) in MarketTiming_Parameter:
        #                 if isinstance(MarketTiming_Parameter[str(key)], dict):
        #                     MarketTiming_Parameter[str(key)]["Short_Selling"] = return_MarketTiming[key]["Coefficient"]
        #             elif isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
        #                 MarketTiming_Parameter[str(key)] = {}
        #                 MarketTiming_Parameter[str(key)]["Short_Selling"] = return_MarketTiming[key]["Coefficient"]
        #             # else:
        #             if isinstance(weight_MarketTiming_Dict, dict) and str(key) in weight_MarketTiming_Dict:
        #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
        #                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["weight_MarketTiming"]["Short_Selling"]  # 依照擇時規則交易倉位參數的存儲字典;
        #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
        #                 weight_MarketTiming_Dict[str(key)] = {}
        #                 weight_MarketTiming_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["weight_MarketTiming"]["Short_Selling"]  # 依照擇時規則交易倉位參數的存儲字典;
        #             # else:
        #             if isinstance(Plower_weight_MarketTiming_Dict, dict) and str(key) in Plower_weight_MarketTiming_Dict:
        #                 if isinstance(Plower_weight_MarketTiming_Dict[str(key)], dict):
        #                     Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
        #             elif isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
        #                 Plower_weight_MarketTiming_Dict[str(key)] = {}
        #                 Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
        #             # else:
        #             if isinstance(Pupper_weight_MarketTiming_Dict, dict) and str(key) in Pupper_weight_MarketTiming_Dict:
        #                 if isinstance(Pupper_weight_MarketTiming_Dict[str(key)], dict):
        #                     Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #             elif isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
        #                 Pupper_weight_MarketTiming_Dict[str(key)] = {}
        #                 Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #             # else:
        #             return_MarketTiming = None  # 釋放内存;
        #     # print(MarketTiming_Parameter)
        #     # print(weight_MarketTiming_Dict)
        #     # print(Plower_weight_MarketTiming_Dict)
        #     # print(Pupper_weight_MarketTiming_Dict)
        #     MarketTiming_Pdata_0 = MarketTiming_Parameter

        #     for key, value in steppingData.items():
        #         if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
        #             MarketTiming_Parameter[str(key)] = {}
        #         if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
        #             weight_MarketTiming_Dict[str(key)] = {}
        #         if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
        #             Plower_weight_MarketTiming_Dict[str(key)] = {}
        #         if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
        #             Pupper_weight_MarketTiming_Dict[str(key)] = {}
        #         MarketTiming_Parameter[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
        #         MarketTiming_Parameter[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
        #         weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #         Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
        #         Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
        #         Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #         Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #     MarketTiming_Pdata_0 = MarketTiming_Parameter

        #     MarketTiming_Parameter = None
        #     weight_MarketTiming_Dict = None
        #     Plower_weight_MarketTiming_Dict = None
        #     Pupper_weight_MarketTiming_Dict = None
        MarketTiming_Pdata_0 = [int(5), float(0.1), float(-0.1), float(0.0)]

    # 求解擇時優化參數迭代下界的預設值;
    if isinstance(MarketTiming_Plower, list) and int(len(MarketTiming_Plower)) == int(0):
        # if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        #     MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
        #     weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
        #     Plower_weight_MarketTiming_Dict = {}
        #     Pupper_weight_MarketTiming_Dict = {}
        #     for key, value in steppingData.items():
        #         if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
        #             MarketTiming_Parameter[str(key)] = {}
        #         if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
        #             weight_MarketTiming_Dict[str(key)] = {}
        #         if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
        #             Plower_weight_MarketTiming_Dict[str(key)] = {}
        #         if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
        #             Pupper_weight_MarketTiming_Dict[str(key)] = {}
        #         MarketTiming_Parameter[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
        #         MarketTiming_Parameter[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
        #         weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #         Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
        #         Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
        #         Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #         Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #     MarketTiming_Plower = Plower_weight_MarketTiming_Dict
        #     MarketTiming_Parameter = None
        #     weight_MarketTiming_Dict = None
        #     Plower_weight_MarketTiming_Dict = None
        #     Pupper_weight_MarketTiming_Dict = None
        MarketTiming_Plower = [int(1), -math.inf, -math.inf, -math.inf]

    # 求解擇時優化參數迭代上界的預設值;
    if isinstance(MarketTiming_Pupper, list) and int(len(MarketTiming_Pupper)) == int(0):
        # if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        #     MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
        #     weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
        #     Plower_weight_MarketTiming_Dict = {}
        #     Pupper_weight_MarketTiming_Dict = {}
        #     for key, value in steppingData.items():
        #         if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
        #             MarketTiming_Parameter[str(key)] = {}
        #         if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
        #             weight_MarketTiming_Dict[str(key)] = {}
        #         if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
        #             Plower_weight_MarketTiming_Dict[str(key)] = {}
        #         if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
        #             Pupper_weight_MarketTiming_Dict[str(key)] = {}
        #         MarketTiming_Parameter[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
        #         MarketTiming_Parameter[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
        #         weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #         Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
        #         Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
        #         Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
        #         Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
        #     MarketTiming_Pupper = Pupper_weight_MarketTiming_Dict
        #     MarketTiming_Parameter = None
        #     weight_MarketTiming_Dict = None
        #     Plower_weight_MarketTiming_Dict = None
        #     Pupper_weight_MarketTiming_Dict = None
        MarketTiming_Pupper = [int([int(maximum_dates_transaction) if int(maximum_dates_transaction) > int(0) else int(1) for i in range(int(0), int(1), int(1))][int(0)]), +math.inf, +math.inf, +math.inf]

    # 求解選股優化參數迭代初始值的預設值;
    if isinstance(PickStock_Pdata_0, list) and int(len(PickStock_Pdata_0)) == int(0):
        # if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        #     # x0 = steppingData["ticker_symbol"]["date_transaction"]  # 交易日期;
        #     # x1 = steppingData["ticker_symbol"]["turnover_volume"]  # 成交量;
        #     # # x2 = steppingData["ticker_symbol"]["turnover_amount"]  # 成交總金額;
        #     # x3 = steppingData["ticker_symbol"]["opening_price"]  # 開盤成交價;
        #     # x4 = steppingData["ticker_symbol"]["close_price"]  # 收盤成交價;
        #     # x5 = steppingData["ticker_symbol"]["low_price"]  # 最低成交價;
        #     # x6 = steppingData["ticker_symbol"]["high_price"]  # 最高成交價;
        #     # x7 = steppingData["ticker_symbol"]["focus"]  # 當日成交價重心;
        #     # x8 = steppingData["ticker_symbol"]["amplitude"]  # 當日成交價絕對振幅;
        #     # x9 = steppingData["ticker_symbol"]["amplitude_rate"]  # 當日成交價相對振幅（%）;
        #     # x10 = steppingData["ticker_symbol"]["opening_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
        #     # x11 = steppingData["ticker_symbol"]["closing_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
        #     # x12 = steppingData["ticker_symbol"]["low_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
        #     # x13 = steppingData["ticker_symbol"]["high_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
        #     # x14 = steppingData["ticker_symbol"]["turnover_volume_growth_rate"]  # 成交量的成長率;
        #     # x15 = steppingData["ticker_symbol"]["opening_price_growth_rate"]  # 開盤價的成長率;
        #     # x16 = steppingData["ticker_symbol"]["closing_price_growth_rate"]  # 收盤價的成長率;
        #     # x17 = steppingData["ticker_symbol"]["closing_minus_opening_price_growth_rate"]  # 收盤價減開盤價的成長率;
        #     # x18 = steppingData["ticker_symbol"]["high_price_proportion"]  # 收盤價和開盤價裏的最大值占最高價的比例;
        #     # x19 = steppingData["ticker_symbol"]["low_price_proportion"]  # 最低價占收盤價和開盤價裏的最小值的比例;
        #     # # x20 = steppingData["ticker_symbol"]["turnover_rate"]  # 成交量換手率;
        #     # # x21 = steppingData["ticker_symbol"]["price_earnings"]  # 每股收益（公司經營利潤率 ÷ 股本）;
        #     # # x22 = steppingData["ticker_symbol"]["book_value_per_share"]  # 每股净值（公司净資產 ÷ 股本）;
        #     # # x23 = steppingData["ticker_symbol"]["capitalization"]  # 總市值;
        #     # # x24 = steppingData["ticker_symbol"]["moving_average_5"]  # 收盤價 5 日滑動平均缐;
        #     # # x25 = steppingData["ticker_symbol"]["moving_average_10"]  # 收盤價 10 日滑動平均缐;
        #     # # x26 = steppingData["ticker_symbol"]["moving_average_20"]  # 收盤價 20 日滑動平均缐;
        #     # # x27 = steppingData["ticker_symbol"]["moving_average_30"]  # 收盤價 30 日滑動平均缐;
        #     # Pdata_0 = steppingData["ticker_symbol"]["Pdata_0"]
        #     # Plower = steppingData["ticker_symbol"]["Plower"]
        #     # Pupper = steppingData["ticker_symbol"]["Pupper"]
        #     # weight = steppingData["ticker_symbol"]["weight"]
        #     # Pdata_0 = steppingData["Pdata_0"]
        #     # Plower = steppingData["Plower"]
        #     # Pupper = steppingData["Pupper"]
        #     # weight = steppingData["weight"]

        #     # 優化求解選股參數;
        #     PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_ticker_symbol = []
        #     weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
        #     Plower_weight_PickStock_Dict = {}
        #     Pupper_weight_PickStock_Dict = {}

        #     # investment_method = "Long_Position"
        #     return_PickStock = PickStock(
        #         training_data = steppingData,
        #         testing_data = steppingData,
        #         Pdata_0 = [],  # [int(5), int(3)],  # [Pdata_0[1], Pdata_0[2]],  # Pdata_0, # value["Pdata_0"],
        #         weight = [],  # weight,  # value["weight"],
        #         Plower = [],  # [-math.inf, -math.inf],  # [Plower[1], Plower[2]],  # Plower, # value["Plower"],
        #         Pupper = [],  # [+math.inf, +math.inf],  # [Pupper[1], Pupper[2]],  # Pupper, # value["Pupper"],
        #         MarketTiming_Parameter = {},  # weight_MarketTiming_Dict,  # MarketTiming_Pdata_0,  # MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;
        #         PickStock_fit_model = PickStock_fit_model,
        #         MarketTiming = MarketTiming,
        #         MarketTiming_fit_model = MarketTiming_fit_model,
        #         Quantitative_Indicators_Function = Quantitative_Indicators_Function,
        #         investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
        #     )
        #     # print("optimization - coefficient : ", return_PickStock["Coefficient"])  # 最優化計算之後得到的參數;
        #     # print("optimization - coefficient StandardDeviation : ", return_PickStock["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
        #     # print("optimization - coefficient Confidence Lower 95% : ", return_PickStock["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
        #     # print("optimization - coefficient Confidence Upper 95% : ", return_PickStock["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
        #     # print("y - fit : ", return_PickStock["Yfit"])  # 擬合 y 值;
        #     # print("y - fit Uncertainty Lower : ", return_PickStock["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
        #     # print("y - fit Uncertainty Upper : ", return_PickStock["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
        #     # print("residual : ", return_PickStock["Residual"])  # 擬合殘差;
        #     # print("optimization - y_profit : ", return_PickStock["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
        #     # print("Long Position optimization - y_profit : ", return_PickStock["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
        #     # print("Short Selling optimization - y_profit : ", return_PickStock["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
        #     # print("optimization - y_loss : ", return_PickStock["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
        #     # print("Long Position optimization - y_loss : ", return_PickStock["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
        #     # print("Short Selling optimization - y_loss : ", return_PickStock["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
        #     # print("maximum_drawdown : ", return_PickStock["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #     # print("maximum_drawdown_Long_Position : ", return_PickStock["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #     # print("maximum_drawdown_Short_Selling : ", return_PickStock["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
        #     # print("profit total per share : ", return_PickStock["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #     # print("Long Position profit total per share : ", return_PickStock["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #     # print("Short Selling profit total per share : ", return_PickStock["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #     # print("profit Positive : ", return_PickStock["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
        #     # print("Long Position profit Positive : ", return_PickStock["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
        #     # print("Short Selling_profit Positive : ", return_PickStock["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
        #     # print("profit Positive probability : ", return_PickStock["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
        #     # print("Long Position profit Positive probability : ", return_PickStock["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
        #     # print("Short Selling profit Positive probability : ", return_PickStock["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
        #     # print("profit Negative : ", return_PickStock["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
        #     # print("Long Position profit Negative : ", return_PickStock["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
        #     # print("Short Selling profit Negative : ", return_PickStock["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
        #     # print("profit Negative probability : ", return_PickStock["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
        #     # print("Long Position profit Negative probability : ", return_PickStock["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
        #     # print("Short Selling profit Negative probability : ", return_PickStock["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
        #     # print("average price amplitude date transaction : ", return_PickStock["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #     # print("Long Position average price amplitude date transaction : ", return_PickStock["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #     # print("Short Selling average price amplitude date transaction : ", return_PickStock["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
        #     # print("average volume turnover date transaction : ", return_PickStock["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
        #     # print("Long Position average volume turnover date transaction : ", return_PickStock["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
        #     # print("Short Selling average volume turnover date transaction : ", return_PickStock["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
        #     # print("average date transaction between : ", return_PickStock["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
        #     # print("Long Position average date transaction between : ", return_PickStock["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
        #     # print("Short Selling average date transaction between : ", return_PickStock["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
        #     # print("number PickStock transaction : ", return_PickStock["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
        #     # print("weight_PickStock : ", return_PickStock["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
        #     # print("pick stock sort ticker symbol : ", return_PickStock["PickStock_sort"]["ticker_symbol"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
        #     # print("pick stock sort score : ", return_PickStock["PickStock_sort"]["score"])  # 依照選股規則排序篩選出的股票得分值存儲數組;
        #     # print(return_PickStock["PickStock_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
        #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
        #     # print("test profit estimate : ", return_PickStock["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
        #     # print("test odds ratio estimate : ", return_PickStock["test_odds_ratio"])
        #     # print("test date transaction between : ", return_PickStock["test_date_transaction_between"])
        #     # # print(return_PickStock["testData"])  # 傳入測試數據集的計算結果;
        #     # print("test profit total per share : ", return_PickStock["testData"]["profit_total"])
        #     # print("test Long Position profit total per share : ", return_PickStock["testData"]["Long_Position_profit_total"])
        #     # print("test Short Selling profit total per share : ", return_PickStock["testData"]["Short_Selling_profit_total"])
        #     # print("test profit positive per share : ", return_PickStock["testData"]["profit_Positive"])
        #     # print("test Long Position profit positive per share : ", return_PickStock["testData"]["Long_Position_profit_Positive"])
        #     # print("test Short Selling profit positive per share : ", return_PickStock["testData"]["Short_Selling_profit_Positive"])
        #     # print("test profit positive probability : ", return_PickStock["testData"]["profit_Positive_probability"])
        #     # print("test Long Position profit positive probability : ", return_PickStock["testData"]["Long_Position_profit_Positive_probability"])
        #     # print("test Short Selling profit positive probability : ", return_PickStock["testData"]["Short_Selling_profit_Positive_probability"])
        #     # print("test profit negative per share : ", return_PickStock["testData"]["profit_Negative"])
        #     # print("test Long Position profit negative per share : ", return_PickStock["testData"]["Long_Position_profit_Negative"])
        #     # print("test Short Selling profit negative per share : ", return_PickStock["testData"]["Short_Selling_profit_Negative"])
        #     # print("test profit negative probability : ", return_PickStock["testData"]["profit_Negative_probability"])
        #     # print("test Long Position profit negative probability : ", return_PickStock["testData"]["Long_Position_profit_Negative_probability"])
        #     # print("test Short Selling profit negative probability : ", return_PickStock["testData"]["Short_Selling_profit_Negative_probability"])
        #     # print("test average date transaction between : ", return_PickStock["testData"]["average_date_transaction_between"])
        #     # print("test Long Position average date transaction between : ", return_PickStock["testData"]["Long_Position_average_date_transaction_between"])
        #     # print("test Short Selling average date transaction between : ", return_PickStock["testData"]["Short_Selling_average_date_transaction_between"])
        #     # print("test number_PickStock_transaction : ", return_PickStock["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
        #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["P1_Array"])
        #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
        #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
        #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"])
        #     # PickStock_Parameter = {}
        #     PickStock_Parameter["Long_Position"] = return_PickStock["Coefficient"]
        #     PickStock_ticker_symbol = return_PickStock["PickStock_sort"]["ticker_symbol"]
        #     for key, value in return_PickStock["weight_PickStock"].items():
        #         # print("Key: {key}, Value: {value}")
        #         if isinstance(value, dict) and "Long_Position" in value:
        #             if isinstance(weight_PickStock_Dict, dict) and str(key) in weight_PickStock_Dict:
        #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
        #                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
        #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
        #                 weight_PickStock_Dict[str(key)] = {}
        #                 weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
        #             # else:
        #             if isinstance(Plower_weight_PickStock_Dict, dict) and str(key) in Plower_weight_PickStock_Dict:
        #                 if isinstance(Plower_weight_PickStock_Dict[str(key)], dict):
        #                     Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
        #             elif isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
        #                 Plower_weight_PickStock_Dict[str(key)] = {}
        #                 Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
        #             # else:
        #             if isinstance(Pupper_weight_PickStock_Dict, dict) and str(key) in Pupper_weight_PickStock_Dict:
        #                 if isinstance(Pupper_weight_PickStock_Dict[str(key)], dict):
        #                     Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
        #             elif isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
        #                 Pupper_weight_PickStock_Dict[str(key)] = {}
        #                 Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
        #             # else:
        #     return_PickStock = None  # 釋放内存;

        #     # investment_method = "Short_Selling"
        #     return_PickStock = PickStock(
        #         training_data = steppingData,
        #         testing_data = steppingData,
        #         Pdata_0 = [],  # [int(5), int(3)],  # [Pdata_0[1], Pdata_0[2]],  # Pdata_0, # value["Pdata_0"],
        #         weight = [],  # weight,  # value["weight"],
        #         Plower = [],  # [-math.inf, -math.inf],  # [Plower[1], Plower[2]],  # Plower, # value["Plower"],
        #         Pupper = [],  # [+math.inf, +math.inf],  # [Pupper[1], Pupper[2]],  # Pupper, # value["Pupper"],
        #         MarketTiming_Parameter = {},  # weight_MarketTiming_Dict,  # MarketTiming_Pdata_0,  # MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;  # ::Base.Dict{Core.String, Core.Any} = Base.Dict{Core.String, Core.Any}(),
        #         PickStock_fit_model = PickStock_fit_model,
        #         MarketTiming = MarketTiming,
        #         MarketTiming_fit_model = MarketTiming_fit_model,
        #         Quantitative_Indicators_Function = Quantitative_Indicators_Function,
        #         investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
        #     )
        #     PickStock_Parameter["Short_Selling"] = return_PickStock["Coefficient"]
        #     PickStock_ticker_symbol = return_PickStock["PickStock_sort"]["ticker_symbol"]
        #     for key, value in return_PickStock["weight_PickStock"].items():
        #         # print("Key: {key}, Value: {value}")
        #         if isinstance(value, dict) and "Short_Selling" in value:
        #             if isinstance(weight_PickStock_Dict, dict) and str(key) in weight_PickStock_Dict:
        #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
        #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
        #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
        #                 weight_PickStock_Dict[str(key)] = {}
        #                 weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
        #             # else:
        #             if isinstance(Plower_weight_PickStock_Dict, dict) and str(key) in Plower_weight_PickStock_Dict:
        #                 if isinstance(Plower_weight_PickStock_Dict[str(key)], dict):
        #                     Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
        #             elif isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
        #                 Plower_weight_PickStock_Dict[str(key)] = {}
        #                 Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
        #             # else:
        #             if isinstance(Pupper_weight_PickStock_Dict, dict) and str(key) in Pupper_weight_PickStock_Dict:
        #                 if isinstance(Pupper_weight_PickStock_Dict[str(key)], dict):
        #                     Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
        #             elif isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
        #                 Pupper_weight_PickStock_Dict[str(key)] = {}
        #                 Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
        #             # else:
        #     return_PickStock = None  # 釋放内存;
        #     # print(PickStock_Parameter)
        #     # print(PickStock_ticker_symbol)
        #     # print(weight_PickStock_Dict)
        #     # print(Plower_weight_PickStock_Dict)
        #     # print(Pupper_weight_PickStock_Dict)
        #     PickStock_Pdata_0 = PickStock_Parameter

        #     PickStock_Parameter["Long_Position"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_Parameter["Short_Selling"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_ticker_symbol = [str(item) for item in steppingData.keys()]  # [str]
        #     PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_dates_transaction), int(1))]
        #     for key, value in steppingData.items():
        #         if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
        #             weight_PickStock_Dict[str(key)] = {}
        #         if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
        #             Plower_weight_PickStock_Dict[str(key)] = {}
        #         if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
        #             Pupper_weight_PickStock_Dict[str(key)] = {}
        #         weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
        #         Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
        #         Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
        #         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
        #         Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
        #         Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
        #     PickStock_Pdata_0 = PickStock_Parameter

        #     PickStock_Parameter = None
        #     PickStock_ticker_symbol = None
        #     weight_PickStock_Dict = None
        #     Plower_weight_PickStock_Dict = None
        #     Pupper_weight_PickStock_Dict = None
        PickStock_Pdata_0 = [int(5), int(3)]

    # 求解選股優化參數迭代下界的預設值;
    if isinstance(PickStock_Plower, list) and int(len(PickStock_Plower)) == int(0):
        # if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        #     # 優化求解選股參數;
        #     PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_ticker_symbol = []
        #     weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
        #     Plower_weight_PickStock_Dict = {}
        #     Pupper_weight_PickStock_Dict = {}
        #     PickStock_Parameter["Long_Position"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_Parameter["Short_Selling"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_ticker_symbol = [str(item) for item in steppingData.keys()]  # [str]
        #     PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_dates_transaction), int(1))]
        #     for key, value in steppingData.items():
        #         if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
        #             weight_PickStock_Dict[str(key)] = {}
        #         if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
        #             Plower_weight_PickStock_Dict[str(key)] = {}
        #         if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
        #             Pupper_weight_PickStock_Dict[str(key)] = {}
        #         weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
        #         Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
        #         Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
        #         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
        #         Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
        #         Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
        #     PickStock_Plower = Plower_weight_PickStock_Dict
        #     PickStock_Parameter = None
        #     PickStock_ticker_symbol = None
        #     weight_PickStock_Dict = None
        #     Plower_weight_PickStock_Dict = None
        #     Pupper_weight_PickStock_Dict = None
        PickStock_Plower = [int(1), int(1)]

    # 求解選股優化參數迭代上界的預設值;
    if isinstance(PickStock_Pupper, list) and int(len(PickStock_Pupper)) == int(0):
        # if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
        #     # 優化求解選股參數;
        #     PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_ticker_symbol = []
        #     weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
        #     Plower_weight_PickStock_Dict = {}
        #     Pupper_weight_PickStock_Dict = {}
        #     PickStock_Parameter["Long_Position"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_Parameter["Short_Selling"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
        #     PickStock_ticker_symbol = [str(item) for item in steppingData.keys()]  # [str]
        #     PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_dates_transaction), int(1))]
        #     for key, value in steppingData.items():
        #         if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
        #             weight_PickStock_Dict[str(key)] = {}
        #         if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
        #             Plower_weight_PickStock_Dict[str(key)] = {}
        #         if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
        #             Pupper_weight_PickStock_Dict[str(key)] = {}
        #         weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
        #         Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
        #         Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
        #         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
        #         Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
        #         Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
        #     PickStock_Pupper = Pupper_weight_PickStock_Dict
        #     PickStock_Parameter = None
        #     PickStock_ticker_symbol = None
        #     weight_PickStock_Dict = None
        #     Plower_weight_PickStock_Dict = None
        #     Pupper_weight_PickStock_Dict = None
        PickStock_Pupper = [int([int(maximum_dates_transaction) if int(maximum_dates_transaction) > int(0) else int(1) for i in range(int(0), int(1), int(1))][int(0)]), int([int(maximum_ticker_symbol_transaction) if int(maximum_ticker_symbol_transaction) > int(0) else int(1) for i in range(int(0), int(1), int(1))][int(0)])]

    # 求解倉位優化參數迭代初始值的預設值;
    if isinstance(SizePosition_Pdata_0, list) and int(len(SizePosition_Pdata_0)) == int(0):
        if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):

            SizePosition_Parameter_Array = []  # 依照倉位規則優化之後得到的倉位數據存儲字典;
            weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
            weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;

            # # investment_method = "Long_Position"
            # return_SizePosition = SizePosition(
            #     training_data = steppingData,
            #     testing_data = steppingData,
            #     Pdata_0 = [],  # [MarketTiming_Pdata_0, PickStock_Pdata_0],  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # steppingData["002611"]["Pdata_0"],
            #     weight = [],  # steppingData["002611"]["weight"],
            #     Plower = [],  # [MarketTiming_Plower, PickStock_Plower],  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
            #     Pupper = [],  # [MarketTiming_Pupper, PickStock_Pupper],  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
            #     MarketTiming_Parameter = {},  # weight_MarketTiming_Dict,  # MarketTiming_Pdata_0,  # MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;
            #     PickStock_Parameter = {},  # weight_PickStock_Dict,  # PickStock_Pdata_0,  # PickStock_Parameter,  # 按照選股規則優化之後的參數字典;
            #     PickStock_ticker_symbol = [[str(item) for item in steppingData.keys()] for i in range(int(0), int(maximum_dates_transaction), int(1))],  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
            #     SizePosition_fit_model = SizePosition_fit_model,
            #     PickStock = PickStock,
            #     PickStock_fit_model = PickStock_fit_model,
            #     MarketTiming = MarketTiming,
            #     MarketTiming_fit_model = MarketTiming_fit_model,
            #     Quantitative_Indicators_Function = Quantitative_Indicators_Function,
            #     investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
            # )
            # # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", return_SizePosition["Coefficient"][1], "\n", "optimization - coefficient 2 - weight_PickStock :", "\n", return_SizePosition["Coefficient"][2])  # 最優化計算之後得到的參數;
            # # # print("optimization - coefficient StandardDeviation : ", return_SizePosition["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
            # # # print("optimization - coefficient Confidence Lower 95% : ", return_SizePosition["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
            # # # print("optimization - coefficient Confidence Upper 95% : ", return_SizePosition["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
            # # # print("y - fit : ", return_SizePosition["Yfit"])  # 擬合 y 值;
            # # # print("y - fit Uncertainty Lower : ", return_SizePosition["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
            # # # print("y - fit Uncertainty Upper : ", return_SizePosition["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
            # # # print("residual : ", return_SizePosition["Residual"])  # 擬合殘差;
            # # print("optimization - y_profit : ", return_SizePosition["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
            # # print("Long Position optimization - y_profit : ", return_SizePosition["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
            # # print("Short Selling optimization - y_profit : ", return_SizePosition["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
            # # print("optimization - y_loss : ", return_SizePosition["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
            # # print("Long Position optimization - y_loss : ", return_SizePosition["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
            # # print("Short Selling optimization - y_loss : ", return_SizePosition["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
            # # print("maximum_drawdown : ", return_SizePosition["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
            # # print("maximum_drawdown_Long_Position : ", return_SizePosition["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
            # # print("maximum_drawdown_Short_Selling : ", return_SizePosition["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
            # # print("profit total per share : ", return_SizePosition["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
            # # print("Long Position profit total per share : ", return_SizePosition["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
            # # print("Short Selling profit total per share : ", return_SizePosition["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
            # # print("profit Positive : ", return_SizePosition["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
            # # print("Long Position profit Positive : ", return_SizePosition["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
            # # print("Short Selling_profit Positive : ", return_SizePosition["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
            # # print("profit Positive probability : ", return_SizePosition["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
            # # print("Long Position profit Positive probability : ", return_SizePosition["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
            # # print("Short Selling profit Positive probability : ", return_SizePosition["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
            # # print("profit Negative : ", return_SizePosition["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
            # # print("Long Position profit Negative : ", return_SizePosition["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
            # # print("Short Selling profit Negative : ", return_SizePosition["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
            # # print("profit Negative probability : ", return_SizePosition["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
            # # print("Long Position profit Negative probability : ", return_SizePosition["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
            # # print("Short Selling profit Negative probability : ", return_SizePosition["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
            # # print("average price amplitude date transaction : ", return_SizePosition["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
            # # print("Long Position average price amplitude date transaction : ", return_SizePosition["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
            # # print("Short Selling average price amplitude date transaction : ", return_SizePosition["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
            # # print("average volume turnover date transaction : ", return_SizePosition["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
            # # print("Long Position average volume turnover date transaction : ", return_SizePosition["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
            # # print("Short Selling average volume turnover date transaction : ", return_SizePosition["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
            # # print("average date transaction between : ", return_SizePosition["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
            # # print("Long Position average date transaction between : ", return_SizePosition["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
            # # print("Short Selling average date transaction between : ", return_SizePosition["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
            # # print("number SizePosition transaction : ", return_SizePosition["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
            # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
            # # print("test profit estimate : ", return_SizePosition["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
            # # print("test odds ratio estimate : ", return_SizePosition["test_odds_ratio"])
            # # print("test date transaction between : ", return_SizePosition["test_date_transaction_between"])
            # # # print(return_SizePosition["testData"])  # 傳入測試數據集的計算結果;
            # # print("test profit total per share : ", return_SizePosition["testData"]["profit_total"])
            # # print("test Long Position profit total per share : ", return_SizePosition["testData"]["Long_Position_profit_total"])
            # # print("test Short Selling profit total per share : ", return_SizePosition["testData"]["Short_Selling_profit_total"])
            # # print("test profit positive per share : ", return_SizePosition["testData"]["profit_Positive"])
            # # print("test Long Position profit positive per share : ", return_SizePosition["testData"]["Long_Position_profit_Positive"])
            # # print("test Short Selling profit positive per share : ", return_SizePosition["testData"]["Short_Selling_profit_Positive"])
            # # print("test profit positive probability : ", return_SizePosition["testData"]["profit_Positive_probability"])
            # # print("test Long Position profit positive probability : ", return_SizePosition["testData"]["Long_Position_profit_Positive_probability"])
            # # print("test Short Selling profit positive probability : ", return_SizePosition["testData"]["Short_Selling_profit_Positive_probability"])
            # # print("test profit negative per share : ", return_SizePosition["testData"]["profit_Negative"])
            # # print("test Long Position profit negative per share : ", return_SizePosition["testData"]["Long_Position_profit_Negative"])
            # # print("test Short Selling profit negative per share : ", return_SizePosition["testData"]["Short_Selling_profit_Negative"])
            # # print("test profit negative probability : ", return_SizePosition["testData"]["profit_Negative_probability"])
            # # print("test Long Position profit negative probability : ", return_SizePosition["testData"]["Long_Position_profit_Negative_probability"])
            # # print("test Short Selling profit negative probability : ", return_SizePosition["testData"]["Short_Selling_profit_Negative_probability"])
            # # print("test average date transaction between : ", return_SizePosition["testData"]["average_date_transaction_between"])
            # # print("test Long Position average date transaction between : ", return_SizePosition["testData"]["Long_Position_average_date_transaction_between"])
            # # print("test Short Selling average date transaction between : ", return_SizePosition["testData"]["Short_Selling_average_date_transaction_between"])
            # # print("test number SizePosition transaction : ", return_SizePosition["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
            # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["P1_Array"])
            # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
            # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
            # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"])
            # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
            # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
            # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
            #     for key, value in return_SizePosition["Coefficient"][0].items():
            #         # print("Key: {key}, Value: {value}")
            #         if isinstance(value, dict) and ("Long_Position" in value):
            #             if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
            #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
            #                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
            #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
            #                 weight_MarketTiming_Dict[str(key)] = {}
            #                 weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
            #             # else:
            # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
            #     for key, value in return_SizePosition["Coefficient"][1].items():
            #         # print("Key: {key}, Value: {value}")
            #         if isinstance(value, dict) and ("Long_Position" in value):
            #             if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
            #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
            #                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
            #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
            #                 weight_PickStock_Dict[str(key)] = {}
            #                 weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
            #             # else:
            # return_SizePosition = None  # 釋放内存;

            # # investment_method = "Short_Selling"
            # return_SizePosition = SizePosition(
            #     training_data = steppingData,
            #     testing_data = steppingData,
            #     Pdata_0 = [],  # [MarketTiming_Pdata_0, PickStock_Pdata_0],  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # steppingData["002611"]["Pdata_0"],
            #     weight = [],  # steppingData["002611"]["weight"],
            #     Plower = [],  # [MarketTiming_Plower, PickStock_Plower],  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
            #     Pupper = [],  # [MarketTiming_Pupper, PickStock_Pupper],  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
            #     MarketTiming_Parameter = {},  # weight_MarketTiming_Dict,  # MarketTiming_Pdata_0,  # MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;
            #     PickStock_Parameter = {},  # weight_PickStock_Dict,  # PickStock_Pdata_0,  # PickStock_Parameter,  # 按照選股規則優化之後的參數字典;
            #     PickStock_ticker_symbol = [[str(item) for item in steppingData.keys()] for i in range(int(0), int(maximum_dates_transaction), int(1))],  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
            #     SizePosition_fit_model = SizePosition_fit_model,
            #     PickStock = PickStock,
            #     PickStock_fit_model = PickStock_fit_model,
            #     MarketTiming = MarketTiming,
            #     MarketTiming_fit_model = MarketTiming_fit_model,
            #     Quantitative_Indicators_Function = Quantitative_Indicators_Function,
            #     investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
            # )
            # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
            # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
            # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
            #     for key, value in return_SizePosition["Coefficient"][0].items():
            #         # print("Key: {key}, Value: {value}")
            #         if isinstance(value, dict) and ("Short_Selling" in value):
            #             if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
            #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
            #                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
            #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
            #                 weight_MarketTiming_Dict[str(key)] = {}
            #                 weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
            #             # else:
            # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
            #     for key, value in return_SizePosition["Coefficient"][1].items():
            #         # print("Key: {key}, Value: {value}")
            #         if isinstance(value, dict) and ("Short_Selling" in value):
            #             if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
            #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
            #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
            #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
            #                 weight_PickStock_Dict[str(key)] = {}
            #                 weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
            #             # else:
            # return_SizePosition = None  # 釋放内存;
            # SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
            # # print(SizePosition_Parameter_Array)
            # # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", SizePosition_Parameter_Array[0])  # 最優化計算之後得到的參數;
            # # print("optimization - coefficient 2 - weight_PickStock :", "\n", SizePosition_Parameter_Array[1])  # 最優化計算之後得到的參數;
            # SizePosition_Pdata_0 = SizePosition_Parameter_Array

            MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
            # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
            Plower_weight_MarketTiming_Dict = {}
            Pupper_weight_MarketTiming_Dict = {}
            for key, value in steppingData.items():
                if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
                    MarketTiming_Parameter[str(key)] = {}
                if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                    weight_MarketTiming_Dict[str(key)] = {}
                if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
                    Plower_weight_MarketTiming_Dict[str(key)] = {}
                if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
                    Pupper_weight_MarketTiming_Dict[str(key)] = {}
                MarketTiming_Parameter[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                MarketTiming_Parameter[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
                Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
                Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
                Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
            PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_ticker_symbol = []
            # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
            Plower_weight_PickStock_Dict = {}
            Pupper_weight_PickStock_Dict = {}
            PickStock_Parameter["Long_Position"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_Parameter["Short_Selling"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_ticker_symbol = [str(item) for item in steppingData.keys()]  # [str]
            PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_dates_transaction), int(1))]
            for key, value in steppingData.items():
                if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                    weight_PickStock_Dict[str(key)] = {}
                if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
                    Plower_weight_PickStock_Dict[str(key)] = {}
                if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
                    Pupper_weight_PickStock_Dict[str(key)] = {}
                weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
                Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
                Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
                Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
                Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
            SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
            SizePosition_Pdata_0 = SizePosition_Parameter_Array

            SizePosition_Parameter_Array = None
            MarketTiming_Parameter = None
            weight_MarketTiming_Dict = None
            Plower_weight_MarketTiming_Dict = None
            Pupper_weight_MarketTiming_Dict = None
            PickStock_Parameter = None
            PickStock_ticker_symbol = None
            weight_PickStock_Dict = None
            Plower_weight_PickStock_Dict = None
            Pupper_weight_PickStock_Dict = None

    # 求解倉位優化參數迭代下界的預設值;
    if isinstance(SizePosition_Plower, list) and int(len(SizePosition_Plower)) == int(0):
        if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
            SizePosition_Parameter_Array = []  # 依照倉位規則優化之後得到的倉位數據存儲字典;
            MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
            weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
            Plower_weight_MarketTiming_Dict = {}
            Pupper_weight_MarketTiming_Dict = {}
            for key, value in steppingData.items():
                if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
                    MarketTiming_Parameter[str(key)] = {}
                if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                    weight_MarketTiming_Dict[str(key)] = {}
                if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
                    Plower_weight_MarketTiming_Dict[str(key)] = {}
                if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
                    Pupper_weight_MarketTiming_Dict[str(key)] = {}
                MarketTiming_Parameter[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                MarketTiming_Parameter[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
                Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
                Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
                Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
            PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_ticker_symbol = []
            weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
            Plower_weight_PickStock_Dict = {}
            Pupper_weight_PickStock_Dict = {}
            PickStock_Parameter["Long_Position"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_Parameter["Short_Selling"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_ticker_symbol = [str(item) for item in steppingData.keys()]  # [str]
            PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_dates_transaction), int(1))]
            for key, value in steppingData.items():
                if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                    weight_PickStock_Dict[str(key)] = {}
                if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
                    Plower_weight_PickStock_Dict[str(key)] = {}
                if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
                    Pupper_weight_PickStock_Dict[str(key)] = {}
                weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
                Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
                Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
                Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
                Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
            SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
            SizePosition_Plower = [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict]
            SizePosition_Parameter_Array = None
            MarketTiming_Parameter = None
            weight_MarketTiming_Dict = None
            Plower_weight_MarketTiming_Dict = None
            Pupper_weight_MarketTiming_Dict = None
            PickStock_Parameter = None
            PickStock_ticker_symbol = None
            weight_PickStock_Dict = None
            Plower_weight_PickStock_Dict = None
            Pupper_weight_PickStock_Dict = None

    # 求解倉位優化參數迭代上界的預設值;
    if isinstance(SizePosition_Pupper, list) and int(len(SizePosition_Pupper)) == int(0):
        if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):
            SizePosition_Parameter_Array = []  # 依照倉位規則優化之後得到的倉位數據存儲字典;
            MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
            weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
            Plower_weight_MarketTiming_Dict = {}
            Pupper_weight_MarketTiming_Dict = {}
            for key, value in steppingData.items():
                if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
                    MarketTiming_Parameter[str(key)] = {}
                if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                    weight_MarketTiming_Dict[str(key)] = {}
                if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
                    Plower_weight_MarketTiming_Dict[str(key)] = {}
                if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
                    Pupper_weight_MarketTiming_Dict[str(key)] = {}
                MarketTiming_Parameter[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                MarketTiming_Parameter[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
                Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
                Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
                Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
            PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_ticker_symbol = []
            weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
            Plower_weight_PickStock_Dict = {}
            Pupper_weight_PickStock_Dict = {}
            PickStock_Parameter["Long_Position"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_Parameter["Short_Selling"] = [int(5), int(3)]  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
            PickStock_ticker_symbol = [str(item) for item in steppingData.keys()]  # [str]
            PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_dates_transaction), int(1))]
            for key, value in steppingData.items():
                if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                    weight_PickStock_Dict[str(key)] = {}
                if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
                    Plower_weight_PickStock_Dict[str(key)] = {}
                if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
                    Pupper_weight_PickStock_Dict[str(key)] = {}
                weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
                Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
                Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in steppingData.keys()])))
                Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
                Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
            SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
            SizePosition_Pupper = [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict]
            SizePosition_Parameter_Array = None
            MarketTiming_Parameter = None
            weight_MarketTiming_Dict = None
            Plower_weight_MarketTiming_Dict = None
            Pupper_weight_MarketTiming_Dict = None
            PickStock_Parameter = None
            PickStock_ticker_symbol = None
            weight_PickStock_Dict = None
            Plower_weight_PickStock_Dict = None
            Pupper_weight_PickStock_Dict = None

    # 記錄推進分析交易信息的序列;
    return_stepping_Dict = {}  # 推進分析信息和結果的存儲字典;

    # print(steppingData)
    if not (isinstance(steppingData, dict) and int(len(steppingData)) > int(0)):
        print(str("Error : stepping test data sequence Dictionary unrecognize .") + "\n" + str("steppingData::Base.Dict{Core.String, Core.Any} .") + "\n")
        # exit(0)
        return return_stepping_Dict

    # 推進分析;
    if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):

        # # 交易過股票的總隻數，函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
        # maximum_ticker_symbol_transaction = int(len([item for item in steppingData.keys()]))  # 交易過股票的總隻數;
        # # print(maximum_ticker_symbol_transaction)
        # maximum_dates_transaction = int(0)  # 各股票裏的最長交易天數;
        # minimum_dates_transaction = int(0)  # 各股票裏的最短交易天數;
        # dates_transaction_Array = []
        # # 遍歷字典的鍵:值對;
        # for key, value in steppingData.items():
        #     # print("Key: {key}, Value: {value}")
        #     if isinstance(value, dict):
        #         if ("date_transaction" in value) and isinstance(value["date_transaction"], list):
        #             # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
        #             dates_transaction_Array.append(int(len(value["date_transaction"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;

        #             # 篩選最長交易天數;
        #             if int(len(value["date_transaction"])) > int(maximum_dates_transaction):
        #                 maximum_dates_transaction_2 = int(len(value["date_transaction"]))
        #                 # global maximum_dates_transaction *= int(0)
        #                 maximum_dates_transaction *= int(0)
        #                 # global maximum_dates_transaction += int(maximum_dates_transaction_2)
        #                 maximum_dates_transaction += int(maximum_dates_transaction_2)
        #         if ("turnover_volume" in value) and isinstance(value["turnover_volume"], list):
        #             dates_transaction_Array.append(int(len(value["turnover_volume"])))

        #             # 篩選最長交易天數;
        #             if int(len(value["turnover_volume"])) > int(maximum_dates_transaction):
        #                 maximum_dates_transaction_2 = int(len(value["turnover_volume"]))
        #                 # global maximum_dates_transaction *= int(0)
        #                 maximum_dates_transaction *= int(0)
        #                 # global maximum_dates_transaction += int(maximum_dates_transaction_2)
        #                 maximum_dates_transaction += int(maximum_dates_transaction_2)
        #         if ("opening_price" in value) and isinstance(value["opening_price"], list):
        #             dates_transaction_Array.append(int(len(value["opening_price"])))

        #             # 篩選最長交易天數;
        #             if int(len(value["opening_price"])) > int(maximum_dates_transaction):
        #                 maximum_dates_transaction_2 = int(len(value["opening_price"]))
        #                 # global maximum_dates_transaction *= int(0)
        #                 maximum_dates_transaction *= int(0)
        #                 # global maximum_dates_transaction += int(maximum_dates_transaction_2)
        #                 maximum_dates_transaction += int(maximum_dates_transaction_2)
        #         if ("close_price" in value) and isinstance(value["close_price"], list):
        #             dates_transaction_Array.append(int(len(value["close_price"])))

        #             # 篩選最長交易天數;
        #             if int(len(value["close_price"])) > int(maximum_dates_transaction):
        #                 maximum_dates_transaction_2 = int(len(value["close_price"]))
        #                 # global maximum_dates_transaction *= int(0)
        #                 maximum_dates_transaction *= int(0)
        #                 # global maximum_dates_transaction += int(maximum_dates_transaction_2)
        #                 maximum_dates_transaction += int(maximum_dates_transaction_2)
        #         if ("low_price" in value) and isinstance(value["low_price"], list):
        #             dates_transaction_Array.append(int(len(value["low_price"])))

        #             # 篩選最長交易天數;
        #             if int(len(value["low_price"])) > int(maximum_dates_transaction):
        #                 maximum_dates_transaction_2 = int(len(value["low_price"]))
        #                 # global maximum_dates_transaction *= int(0)
        #                 maximum_dates_transaction *= int(0)
        #                 # global maximum_dates_transaction += int(maximum_dates_transaction_2)
        #                 maximum_dates_transaction += int(maximum_dates_transaction_2)
        #         if ("high_price" in value) and isinstance(value["high_price"], list):
        #             dates_transaction_Array.append(int(len(value["high_price"])))

        #             # 篩選最長交易天數;
        #             if int(len(value["high_price"])) > int(maximum_dates_transaction):
        #                 maximum_dates_transaction_2 = int(len(value["high_price"]))
        #                 # global maximum_dates_transaction *= int(0)
        #                 maximum_dates_transaction *= int(0)
        #                 # global maximum_dates_transaction += int(maximum_dates_transaction_2)
        #                 maximum_dates_transaction += int(maximum_dates_transaction_2)
        # # print(maximum_dates_transaction)
        # if int(len(dates_transaction_Array)) > int(0):
        #     minimum_dates_transaction_2 = int(min(dates_transaction_Array))
        #     minimum_dates_transaction *= int(0)
        #     minimum_dates_transaction += int(minimum_dates_transaction_2)
        # # print(minimum_dates_transaction)
        # dates_transaction_Array = None

        # 記錄每個交易日的回撤值序列;
        drawdown_Array_Long_Position = []  # 記錄做多模式每個交易日的回撤值序列;
        drawdown_Array_Short_Selling = []  # 記錄做空模式每個交易日的回撤值序列;

        # 伸縮框滑動式遍歷;
        stepping_sequence_Array = []  # 記錄推進分析股票交易信息的序列;
        for i in range(int(0), int(minimum_dates_transaction), int(1)):

            if int(int(i) + int(1)) >= int(training_data_sequence_length):

                stepping_transaction_Dict = {}  # 記錄推進分析股票交易信息的字典;

                if int(len(training_data_ticker_symbol_Array)) > int(0):

                    # 截取數據序列目標區段;
                    trainingData = {}
                    for j in range(int(0), int(len(training_data_ticker_symbol_Array)), int(1)):
                        # 判斷當前股票代碼字符串（ticker_symbol）是否在指定數組内;
                        if (str(training_data_ticker_symbol_Array[j]) in steppingData) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])], dict) and int(len(steppingData[str(training_data_ticker_symbol_Array[j])])) > int(0):
                            if (("date_transaction" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["date_transaction"], list)) and (("turnover_volume" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_volume"], list)) and (("opening_price" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price"], list)) and (("close_price" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["close_price"], list)) and (("low_price" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["low_price"], list)) and (("high_price" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["high_price"], list)) and (("focus" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["focus"], list)) and (("amplitude" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["amplitude"], list)) and (("amplitude_rate" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["amplitude_rate"], list)) and (("opening_price_Standardization" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price_Standardization"], list)) and (("closing_price_Standardization" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["closing_price_Standardization"], list)) and (("low_price_Standardization" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["low_price_Standardization"], list)) and (("high_price_Standardization" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["high_price_Standardization"], list)) and (("turnover_volume_growth_rate" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_volume_growth_rate"], list)) and (("opening_price_growth_rate" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price_growth_rate"], list)) and (("closing_price_growth_rate" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["closing_price_growth_rate"], list)) and (("closing_minus_opening_price_growth_rate" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["closing_minus_opening_price_growth_rate"], list)) and (("high_price_proportion" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["high_price_proportion"], list)) and (("low_price_proportion" in steppingData[str(training_data_ticker_symbol_Array[j])]) and isinstance(steppingData[str(training_data_ticker_symbol_Array[j])]["low_price_proportion"], list)):

                                # 判斷訓練集數據滑框尾界是否在數據序列範圍内;
                                if int(int(i) + int(1)) <= int(min([int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["date_transaction"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_volume"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["close_price"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["low_price"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["high_price"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["focus"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["amplitude"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["amplitude_rate"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price_Standardization"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["closing_price_Standardization"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["low_price_Standardization"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["high_price_Standardization"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_volume_growth_rate"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price_growth_rate"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["closing_price_growth_rate"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["closing_minus_opening_price_growth_rate"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["high_price_proportion"])), int(len(steppingData[str(training_data_ticker_symbol_Array[j])]["low_price_proportion"]))])):
                                    # 判斷訓練集數據滑框頭界是否在數據序列範圍内;
                                    if int(int(i) + int(1)) >= int(training_data_sequence_length):

                                        x0 = steppingData[str(training_data_ticker_symbol_Array[j])]["date_transaction"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 交易日期;
                                        x1 = steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_volume"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 成交量;
                                        # x2 = steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_amount"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 成交總金額;
                                        x3 = steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 開盤成交價;
                                        x4 = steppingData[str(training_data_ticker_symbol_Array[j])]["close_price"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤成交價;
                                        x5 = steppingData[str(training_data_ticker_symbol_Array[j])]["low_price"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 最低成交價;
                                        x6 = steppingData[str(training_data_ticker_symbol_Array[j])]["high_price"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 最高成交價;
                                        x7 = steppingData[str(training_data_ticker_symbol_Array[j])]["focus"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 當日成交價重心;
                                        x8 = steppingData[str(training_data_ticker_symbol_Array[j])]["amplitude"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 當日成交價絕對振幅;
                                        x9 = steppingData[str(training_data_ticker_symbol_Array[j])]["amplitude_rate"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 當日成交價相對振幅（%）;
                                        x10 = steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price_Standardization"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                        x11 = steppingData[str(training_data_ticker_symbol_Array[j])]["closing_price_Standardization"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                        x12 = steppingData[str(training_data_ticker_symbol_Array[j])]["low_price_Standardization"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                        x13 = steppingData[str(training_data_ticker_symbol_Array[j])]["high_price_Standardization"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                        x14 = steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_volume_growth_rate"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 成交量的成長率;
                                        x15 = steppingData[str(training_data_ticker_symbol_Array[j])]["opening_price_growth_rate"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 開盤價的成長率;
                                        x16 = steppingData[str(training_data_ticker_symbol_Array[j])]["closing_price_growth_rate"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價的成長率;
                                        x17 = steppingData[str(training_data_ticker_symbol_Array[j])]["closing_minus_opening_price_growth_rate"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價減開盤價的成長率;
                                        x18 = steppingData[str(training_data_ticker_symbol_Array[j])]["high_price_proportion"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價和開盤價裏的最大值占最高價的比例;
                                        x19 = steppingData[str(training_data_ticker_symbol_Array[j])]["low_price_proportion"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 最低價占收盤價和開盤價裏的最小值的比例;
                                        # x20 = steppingData[str(training_data_ticker_symbol_Array[j])]["turnover_rate"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 成交量換手率;
                                        # x21 = steppingData[str(training_data_ticker_symbol_Array[j])]["price_earnings"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 每股收益（公司經營利潤率 ÷ 股本）;
                                        # x22 = steppingData[str(training_data_ticker_symbol_Array[j])]["book_value_per_share"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 每股净值（公司净資產 ÷ 股本）;
                                        # x23 = steppingData[str(training_data_ticker_symbol_Array[j])]["capitalization"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 總市值;
                                        # x24 = steppingData[str(training_data_ticker_symbol_Array[j])]["moving_average_5"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價 5 日滑動平均缐;
                                        # x25 = steppingData[str(training_data_ticker_symbol_Array[j])]["moving_average_10"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價 10 日滑動平均缐;
                                        # x26 = steppingData[str(training_data_ticker_symbol_Array[j])]["moving_average_20"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價 20 日滑動平均缐;
                                        # x27 = steppingData[str(training_data_ticker_symbol_Array[j])]["moving_average_30"][int(int(i) - int(training_data_sequence_length) + int(1)):int(int(i) + int(1)):int(1)]  # 收盤價 30 日滑動平均缐;
                                        Pdata_0 = steppingData[str(training_data_ticker_symbol_Array[j])]["Pdata_0"]
                                        Plower = steppingData[str(training_data_ticker_symbol_Array[j])]["Plower"]
                                        Pupper = steppingData[str(training_data_ticker_symbol_Array[j])]["Pupper"]
                                        weight = steppingData[str(training_data_ticker_symbol_Array[j])]["weight"]

                                        trainingData[str(training_data_ticker_symbol_Array[j])] = {
                                            "date_transaction": x0,  # 交易日期;
                                            "turnover_volume": x1,  # 成交量;
                                            # "turnover_amount": x2,  # 成交總金額;
                                            "opening_price": x3,  # 開盤成交價;
                                            "close_price": x4,  # 收盤成交價;
                                            "low_price": x5,  # 最低成交價;
                                            "high_price": x6,  # 最高成交價;
                                            "focus": x7,  # 當日成交價重心;
                                            "amplitude": x8,  # 當日成交價絕對振幅;
                                            "amplitude_rate": x9,  # 當日成交價相對振幅（%）;
                                            "opening_price_Standardization": x10,  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                            "closing_price_Standardization": x11,  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                            "low_price_Standardization": x12,  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                            "high_price_Standardization": x13,  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                            "turnover_volume_growth_rate": x14,  # 成交量的成長率;
                                            "opening_price_growth_rate": x15,  # 開盤價的成長率;
                                            "closing_price_growth_rate": x16,  # 收盤價的成長率;
                                            "closing_minus_opening_price_growth_rate": x17,  # 收盤價減開盤價的成長率;
                                            "high_price_proportion": x18,  # 收盤價和開盤價裏的最大值占最高價的比例;
                                            "low_price_proportion": x19,  # 最低價占收盤價和開盤價裏的最小值的比例;
                                            # "turnover_rate": x20,  # 成交量換手率;
                                            # "price_earnings": x21,  # 每股收益（公司經營利潤率 ÷ 股本）;
                                            # "book_value_per_share": x22,  # 每股净值（公司净資產 ÷ 股本）;
                                            # "capitalization": x23,  # 總市值;
                                            # "moving_average_5": x24,  # 收盤價 5 日滑動平均缐;
                                            # "moving_average_10": x25,  # 收盤價 10 日滑動平均缐;
                                            # "moving_average_20": x26,  # 收盤價 20 日滑動平均缐;
                                            # "moving_average_30": x27,  # 收盤價 30 日滑動平均缐;
                                            "Pdata_0": Pdata_0,
                                            "Plower": Plower,
                                            "Pupper": Pupper,
                                            "weight": weight
                                        }

                                        # 釋放内存;
                                        x0 = None
                                        x1 = None
                                        # x2 = None
                                        x3 = None
                                        x4 = None
                                        x5 = None
                                        x6 = None
                                        x7 = None
                                        x8 = None
                                        x9 = None
                                        x10 = None
                                        x11 = None
                                        x12 = None
                                        x13 = None
                                        x14 = None
                                        x15 = None
                                        x16 = None
                                        x17 = None
                                        x18 = None
                                        x19 = None
                                        # x20 = None
                                        # x21 = None
                                        # x22 = None
                                        # x23 = None
                                        # x24 = None
                                        # x25 = None
                                        # x26 = None
                                        # x27 = None
                                        Pdata_0 = None
                                        Plower = None
                                        Pupper = None
                                        weight = None

                    # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典，優化求解擇時參數;
                    MarketTiming_Parameter_Dict = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
                    weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                    Plower_weight_MarketTiming_Dict = {}
                    Pupper_weight_MarketTiming_Dict = {}
                    if isinstance(trainingData, dict) and int(len(trainingData)) > int(0):
                        for key, value in trainingData.items():
                            # print("Key: {key}, Value: {value}")
                            if isinstance(value, dict) and (("date_transaction" in value) and isinstance(value["date_transaction"], list)) and (("turnover_volume" in value) and isinstance(value["turnover_volume"], list)) and (("opening_price" in value) and isinstance(value["opening_price"], list)) and (("close_price" in value) and isinstance(value["close_price"], list)) and (("low_price" in value) and isinstance(value["low_price"], list)) and (("high_price" in value) and isinstance(value["high_price"], list)) and (("focus" in value) and isinstance(value["focus"], list)) and (("amplitude" in value) and isinstance(value["amplitude"], list)) and (("amplitude_rate" in value) and isinstance(value["amplitude_rate"], list)) and (("opening_price_Standardization" in value) and isinstance(value["opening_price_Standardization"], list)) and (("closing_price_Standardization" in value) and isinstance(value["closing_price_Standardization"], list)) and (("low_price_Standardization" in value) and isinstance(value["low_price_Standardization"], list)) and (("high_price_Standardization" in value) and isinstance(value["high_price_Standardization"], list)) and (("turnover_volume_growth_rate" in value) and isinstance(value["turnover_volume_growth_rate"], list)) and (("opening_price_growth_rate" in value) and isinstance(value["opening_price_growth_rate"], list)) and (("closing_price_growth_rate" in value) and isinstance(value["closing_price_growth_rate"], list)) and (("closing_minus_opening_price_growth_rate" in value) and isinstance(value["closing_minus_opening_price_growth_rate"], list)) and (("high_price_proportion" in value) and isinstance(value["high_price_proportion"], list)) and (("low_price_proportion" in value) and isinstance(value["low_price_proportion"], list)):

                                # investment_method = "Long_Position"
                                return_MarketTiming = MarketTiming(
                                    training_data = {
                                        str(key) : {
                                            "date_transaction": value["date_transaction"],
                                            "turnover_volume": value["turnover_volume"],
                                            # "turnover_amount": value["turnover_amount"],
                                            "opening_price": value["opening_price"],
                                            "close_price": value["close_price"],
                                            "low_price": value["low_price"],
                                            "high_price": value["high_price"],
                                            "focus": value["focus"],
                                            "amplitude": value["amplitude"],
                                            "amplitude_rate": value["amplitude_rate"],
                                            "opening_price_Standardization": value["opening_price_Standardization"],
                                            "closing_price_Standardization": value["closing_price_Standardization"],
                                            "low_price_Standardization": value["low_price_Standardization"],
                                            "high_price_Standardization": value["high_price_Standardization"],
                                            "turnover_volume_growth_rate": value["turnover_volume_growth_rate"],
                                            "opening_price_growth_rate": value["opening_price_growth_rate"],
                                            "closing_price_growth_rate": value["closing_price_growth_rate"],
                                            "closing_minus_opening_price_growth_rate": value["closing_minus_opening_price_growth_rate"],
                                            "high_price_proportion": value["high_price_proportion"],
                                            "low_price_proportion": value["low_price_proportion"],
                                            "Pdata_0": value["Pdata_0"],
                                            "Plower": value["Plower"],
                                            "Pupper": value["Pupper"],
                                            "weight": value["weight"]
                                        }
                                    },
                                    testing_data = {
                                        str(key) : {
                                            "date_transaction": value["date_transaction"],
                                            "turnover_volume": value["turnover_volume"],
                                            "opening_price": value["opening_price"],
                                            "close_price": value["close_price"],
                                            "low_price": value["low_price"],
                                            "high_price": value["high_price"],
                                            "focus": value["focus"],
                                            "amplitude": value["amplitude"],
                                            "amplitude_rate": value["amplitude_rate"],
                                            "opening_price_Standardization": value["opening_price_Standardization"],
                                            "closing_price_Standardization": value["closing_price_Standardization"],
                                            "low_price_Standardization": value["low_price_Standardization"],
                                            "high_price_Standardization": value["high_price_Standardization"],
                                            "turnover_volume_growth_rate": value["turnover_volume_growth_rate"],
                                            "opening_price_growth_rate": value["opening_price_growth_rate"],
                                            "closing_price_growth_rate": value["closing_price_growth_rate"],
                                            "closing_minus_opening_price_growth_rate": value["closing_minus_opening_price_growth_rate"],
                                            "high_price_proportion": value["high_price_proportion"],
                                            "low_price_proportion": value["low_price_proportion"],
                                            "Pdata_0": value["Pdata_0"],
                                            "Plower": value["Plower"],
                                            "Pupper": value["Pupper"],
                                            "weight": value["weight"]
                                        }
                                    },
                                    Pdata_0 = MarketTiming_Pdata_0,  # [int(3), float(+0.1), float(-0.1), float(0.0)],  # [Pdata_0[1], Pdata_0[2], Pdata_0[3], Pdata_0[4]],  # Pdata_0, # value["Pdata_0"],
                                    weight = MarketTiming_weight,  # [],  # weight,  # value["weight"],
                                    Plower = MarketTiming_Plower,  # [-math.inf, -math.inf, -math.inf, -math.inf],  # [Plower[1], Plower[2], Plower[3], Plower[4]],  # Plower, # value["Plower"],
                                    Pupper = MarketTiming_Pupper,  # [+math.inf, +math.inf, +math.inf, +math.inf],  # [Pupper[1], Pupper[2], Pupper[3], Pupper[4]],  # Pupper, # value["Pupper"],
                                    MarketTiming_fit_model = MarketTiming_fit_model,
                                    Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                                    investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                )
                                # return_MarketTiming == {
                                #     "ticker_symbol" : {
                                #         "Coefficient": coefficient_from_fit,  # 最優化計算之後得到的參數;
                                #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
                                #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
                                #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
                                #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
                                #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
                                #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
                                #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
                                #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
                                #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
                                #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
                                #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
                                #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
                                #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
                                #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
                                #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
                                #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
                                #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                #         "revenue_and_expenditure_records_date_transaction": y_G,  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                #         "weight_MarketTiming": weight_MarketTiming_Dict
                                #     }
                                # }
                                # print(return_MarketTiming[key]["Coefficient"])  # 最優化計算之後得到的參數;
                                # print(return_MarketTiming[key]["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                # print(return_MarketTiming[key]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                # print(return_MarketTiming[key]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                # print(return_MarketTiming[key]["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                # print(return_MarketTiming[key]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                # print(return_MarketTiming[key]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                # print(return_MarketTiming[key]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                # print(return_MarketTiming[key]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                # print(return_MarketTiming[key]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                # print(return_MarketTiming[key]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                # print(return_MarketTiming[key]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                # print(return_MarketTiming[key]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                # print(return_MarketTiming[key]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                # print(return_MarketTiming[key]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                # print(return_MarketTiming[key]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                # print(return_MarketTiming[key]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                # print(return_MarketTiming[key]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                # print(return_MarketTiming[key]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                # print(return_MarketTiming[key]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                # print(return_MarketTiming[key]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                # print(return_MarketTiming[key]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                # print(return_MarketTiming[key]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                # print(return_MarketTiming[key]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                # print(return_MarketTiming[key]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                # print(return_MarketTiming[key]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                # print(return_MarketTiming[key]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                # print(return_MarketTiming[key]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                # print(return_MarketTiming[key]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                # print(return_MarketTiming[key]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                # print(return_MarketTiming[key]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                # print(return_MarketTiming[key]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                # print(return_MarketTiming[key]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                # print(return_MarketTiming[key]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                # print(return_MarketTiming[key]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                # print(return_MarketTiming[key]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                # print(return_MarketTiming[key]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                # print(return_MarketTiming[key]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                # print(return_MarketTiming[key]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                # print(return_MarketTiming[key]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                # print(return_MarketTiming[key]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                # print(return_MarketTiming[key]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                # print(return_MarketTiming[key]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                # print(return_MarketTiming[key]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                # print(return_MarketTiming[key]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                # print(return_MarketTiming[key]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                # print(return_MarketTiming[key]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                # MarketTiming_Parameter_Dict[str(key)] = {}
                                if isinstance(MarketTiming_Parameter_Dict, dict) and (str(key) in MarketTiming_Parameter_Dict):
                                    if isinstance(MarketTiming_Parameter_Dict[str(key)], dict):
                                        MarketTiming_Parameter_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["Coefficient"]
                                elif isinstance(MarketTiming_Parameter_Dict, dict) and (not (str(key) in MarketTiming_Parameter_Dict)):
                                    MarketTiming_Parameter_Dict[str(key)] = {}
                                    MarketTiming_Parameter_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["Coefficient"]
                                # else:
                                if isinstance(return_MarketTiming[key], dict) and ("weight_MarketTiming" in return_MarketTiming[key]) and isinstance(return_MarketTiming[key]["weight_MarketTiming"], dict) and ("Long_Position" in return_MarketTiming[key]["weight_MarketTiming"]):
                                    if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
                                        if isinstance(weight_MarketTiming_Dict[str(key)], dict):
                                            weight_MarketTiming_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["weight_MarketTiming"]["Long_Position"]  # 依照擇時規則交易倉位參數的存儲字典;
                                    elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                                        weight_MarketTiming_Dict[str(key)] = {}
                                        weight_MarketTiming_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["weight_MarketTiming"]["Long_Position"]  # 依照擇時規則交易倉位參數的存儲字典;
                                    # else:
                                if isinstance(Plower_weight_MarketTiming_Dict, dict) and (str(key) in Plower_weight_MarketTiming_Dict):
                                    if isinstance(Plower_weight_MarketTiming_Dict[str(key)], dict):
                                        Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
                                elif isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
                                    Plower_weight_MarketTiming_Dict[str(key)] = {}
                                    Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
                                # else:
                                if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (str(key) in Pupper_weight_MarketTiming_Dict):
                                    if isinstance(Pupper_weight_MarketTiming_Dict[str(key)], dict):
                                        Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                                elif isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
                                    Pupper_weight_MarketTiming_Dict[str(key)] = {}
                                    Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                                # else:
                                return_MarketTiming = None  # 釋放内存;

                                # investment_method = "Short_Selling"
                                return_MarketTiming = MarketTiming(
                                    training_data = {
                                        str(key) : {
                                            "date_transaction": value["date_transaction"],
                                            "turnover_volume": value["turnover_volume"],
                                            # "turnover_amount": value["turnover_amount"],
                                            "opening_price": value["opening_price"],
                                            "close_price": value["close_price"],
                                            "low_price": value["low_price"],
                                            "high_price": value["high_price"],
                                            "focus": value["focus"],
                                            "amplitude": value["amplitude"],
                                            "amplitude_rate": value["amplitude_rate"],
                                            "opening_price_Standardization": value["opening_price_Standardization"],
                                            "closing_price_Standardization": value["closing_price_Standardization"],
                                            "low_price_Standardization": value["low_price_Standardization"],
                                            "high_price_Standardization": value["high_price_Standardization"],
                                            "turnover_volume_growth_rate": value["turnover_volume_growth_rate"],
                                            "opening_price_growth_rate": value["opening_price_growth_rate"],
                                            "closing_price_growth_rate": value["closing_price_growth_rate"],
                                            "closing_minus_opening_price_growth_rate": value["closing_minus_opening_price_growth_rate"],
                                            "high_price_proportion": value["high_price_proportion"],
                                            "low_price_proportion": value["low_price_proportion"],
                                            "Pdata_0": value["Pdata_0"],
                                            "Plower": value["Plower"],
                                            "Pupper": value["Pupper"],
                                            "weight": value["weight"]
                                        }
                                    },
                                    testing_data = {
                                        str(key) : {
                                            "date_transaction": value["date_transaction"],
                                            "turnover_volume": value["turnover_volume"],
                                            "opening_price": value["opening_price"],
                                            "close_price": value["close_price"],
                                            "low_price": value["low_price"],
                                            "high_price": value["high_price"],
                                            "focus": value["focus"],
                                            "amplitude": value["amplitude"],
                                            "amplitude_rate": value["amplitude_rate"],
                                            "opening_price_Standardization": value["opening_price_Standardization"],
                                            "closing_price_Standardization": value["closing_price_Standardization"],
                                            "low_price_Standardization": value["low_price_Standardization"],
                                            "high_price_Standardization": value["high_price_Standardization"],
                                            "turnover_volume_growth_rate": value["turnover_volume_growth_rate"],
                                            "opening_price_growth_rate": value["opening_price_growth_rate"],
                                            "closing_price_growth_rate": value["closing_price_growth_rate"],
                                            "closing_minus_opening_price_growth_rate": value["closing_minus_opening_price_growth_rate"],
                                            "high_price_proportion": value["high_price_proportion"],
                                            "low_price_proportion": value["low_price_proportion"],
                                            "Pdata_0": value["Pdata_0"],
                                            "Plower": value["Plower"],
                                            "Pupper": value["Pupper"],
                                            "weight": value["weight"]
                                        }
                                    },
                                    Pdata_0 = MarketTiming_Pdata_0,  # [int(3), float(+1.0), float(-1.0), float(0.0)],  # [Pdata_0[1], Pdata_0[2], Pdata_0[3], Pdata_0[4]],  # Pdata_0, # value["Pdata_0"],
                                    weight = MarketTiming_weight,  # [],  # weight,  # value["weight"],
                                    Plower = MarketTiming_Plower,  # [-math.inf, -math.inf, -math.inf, -math.inf],  # [Plower[1], Plower[2], Plower[3], Plower[4]],  # Plower, # value["Plower"],
                                    Pupper = MarketTiming_Pupper,  # [+math.inf, +math.inf, +math.inf, +math.inf],  # [Pupper[1], Pupper[2], Pupper[3], Pupper[4]],  # Pupper, # value["Pupper"],
                                    MarketTiming_fit_model = MarketTiming_fit_model,
                                    Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                                    investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                )
                                if isinstance(MarketTiming_Parameter_Dict, dict) and (str(key) in MarketTiming_Parameter_Dict):
                                    if isinstance(MarketTiming_Parameter_Dict[str(key)], dict):
                                        MarketTiming_Parameter_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["Coefficient"]
                                elif isinstance(MarketTiming_Parameter_Dict, dict) and (not (str(key) in MarketTiming_Parameter_Dict)):
                                    MarketTiming_Parameter_Dict[str(key)] = {}
                                    MarketTiming_Parameter_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["Coefficient"]
                                # else:
                                if isinstance(return_MarketTiming[key], dict) and ("weight_MarketTiming" in return_MarketTiming[key]) and isinstance(return_MarketTiming[key]["weight_MarketTiming"], dict) and ("Short_Selling" in return_MarketTiming[key]["weight_MarketTiming"]):
                                    if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
                                        if isinstance(weight_MarketTiming_Dict[str(key)], dict):
                                            weight_MarketTiming_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["weight_MarketTiming"]["Short_Selling"]  # 依照擇時規則交易倉位參數的存儲字典;
                                    elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                                        weight_MarketTiming_Dict[str(key)] = {}
                                        weight_MarketTiming_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["weight_MarketTiming"]["Short_Selling"]  # 依照擇時規則交易倉位參數的存儲字典;
                                    # else:
                                if isinstance(Plower_weight_MarketTiming_Dict, dict) and (str(key) in Plower_weight_MarketTiming_Dict):
                                    if isinstance(Plower_weight_MarketTiming_Dict[str(key)], dict):
                                        Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
                                elif isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
                                    Plower_weight_MarketTiming_Dict[str(key)] = {}
                                    Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
                                # else:
                                if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (str(key) in Pupper_weight_MarketTiming_Dict):
                                    if isinstance(Pupper_weight_MarketTiming_Dict[str(key)], dict):
                                        Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
                                elif isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
                                    Pupper_weight_MarketTiming_Dict[str(key)] = {}
                                    Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
                                # else:
                                return_MarketTiming = None  # 釋放内存;
                    # print(MarketTiming_Parameter_Dict)
                    # print(weight_MarketTiming_Dict)
                    # print(Plower_weight_MarketTiming_Dict)
                    # print(Pupper_weight_MarketTiming_Dict)

                    # # 調試時使用，人爲指定擇時規則（MarketTiming）參數，注釋掉擇時規則（MarketTiming）優化過程的代碼，以提高運行速度;
                    # MarketTiming_Parameter_Dict = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
                    # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                    # Plower_weight_MarketTiming_Dict = {}
                    # Pupper_weight_MarketTiming_Dict = {}
                    # if isinstance(trainingData, dict) and int(len(trainingData)) > int(0):
                    #     for key, value in trainingData.items():
                    #         if isinstance(MarketTiming_Parameter_Dict, dict) and (not (str(key) in MarketTiming_Parameter_Dict)):
                    #             MarketTiming_Parameter_Dict[str(key)] = {}
                    #         if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                    #             weight_MarketTiming_Dict[str(key)] = {}
                    #         if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
                    #             Plower_weight_MarketTiming_Dict[str(key)] = {}
                    #         if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
                    #             Pupper_weight_MarketTiming_Dict[str(key)] = {}
                    #         MarketTiming_Parameter_Dict[str(key)]["Long_Position"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                    #         MarketTiming_Parameter_Dict[str(key)]["Short_Selling"] = [int(5), float(0.1), float(-0.1), float(0.0)]
                    #         weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                    #         Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
                    #         Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
                    #         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
                    #         Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
                    #         Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)

                    # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典，優化求解選股參數;
                    PickStock_Parameter_Dict = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
                    PickStock_ticker_symbol_Array = []  # Core.Array{Core.Array{Core.String, 1}, 1}();
                    weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                    Plower_weight_PickStock_Dict = {}
                    Pupper_weight_PickStock_Dict = {}
                    if isinstance(trainingData, dict) and int(len(trainingData)) > int(0):

                        # investment_method = "Long_Position"
                        return_PickStock = PickStock(
                            training_data = trainingData,
                            testing_data = trainingData,
                            Pdata_0 = PickStock_Pdata_0,  # [int(3), int(10)],  # [Pdata_0[1], Pdata_0[2]],  # Pdata_0, # value["Pdata_0"],
                            weight = PickStock_weight,  # [],  # weight,  # value["weight"],
                            Plower = PickStock_Plower,  # [-math.inf, -math.inf],  # [Plower[1], Plower[2]],  # Plower, # value["Plower"],
                            Pupper = PickStock_Pupper,  # [+math.inf, +math.inf],  # [Pupper[1], Pupper[2]],  # Pupper, # value["Pupper"],
                            MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;  # ::Base.Dict{Core.String, Core.Any} = Base.Dict{Core.String, Core.Any}(),
                            PickStock_fit_model = PickStock_fit_model,
                            MarketTiming = MarketTiming,
                            MarketTiming_fit_model = MarketTiming_fit_model,
                            Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                            investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                        )
                        # print("optimization - coefficient : ", return_PickStock["Coefficient"])  # 最優化計算之後得到的參數;
                        # print("optimization - coefficient StandardDeviation : ", return_PickStock["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
                        # print("optimization - coefficient Confidence Lower 95% : ", return_PickStock["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
                        # print("optimization - coefficient Confidence Upper 95% : ", return_PickStock["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
                        # print("y - fit : ", return_PickStock["Yfit"])  # 擬合 y 值;
                        # print("y - fit Uncertainty Lower : ", return_PickStock["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
                        # print("y - fit Uncertainty Upper : ", return_PickStock["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
                        # print("residual : ", return_PickStock["Residual"])  # 擬合殘差;
                        # print("optimization - y_profit : ", return_PickStock["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                        # print("Long Position optimization - y_profit : ", return_PickStock["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                        # print("Short Selling optimization - y_profit : ", return_PickStock["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                        # print("optimization - y_loss : ", return_PickStock["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                        # print("Long Position optimization - y_loss : ", return_PickStock["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                        # print("Short Selling optimization - y_loss : ", return_PickStock["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                        # print("maximum_drawdown : ", return_PickStock["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                        # print("maximum_drawdown_Long_Position : ", return_PickStock["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                        # print("maximum_drawdown_Short_Selling : ", return_PickStock["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                        # print("profit total per share : ", return_PickStock["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                        # print("Long Position profit total per share : ", return_PickStock["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                        # print("Short Selling profit total per share : ", return_PickStock["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                        # print("profit Positive : ", return_PickStock["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        # print("Long Position profit Positive : ", return_PickStock["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        # print("Short Selling_profit Positive : ", return_PickStock["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        # print("profit Positive probability : ", return_PickStock["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                        # print("Long Position profit Positive probability : ", return_PickStock["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                        # print("Short Selling profit Positive probability : ", return_PickStock["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                        # print("profit Negative : ", return_PickStock["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        # print("Long Position profit Negative : ", return_PickStock["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        # print("Short Selling profit Negative : ", return_PickStock["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        # print("profit Negative probability : ", return_PickStock["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                        # print("Long Position profit Negative probability : ", return_PickStock["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                        # print("Short Selling profit Negative probability : ", return_PickStock["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                        # print("average price amplitude date transaction : ", return_PickStock["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                        # print("Long Position average price amplitude date transaction : ", return_PickStock["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                        # print("Short Selling average price amplitude date transaction : ", return_PickStock["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                        # print("average volume turnover date transaction : ", return_PickStock["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                        # print("Long Position average volume turnover date transaction : ", return_PickStock["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                        # print("Short Selling average volume turnover date transaction : ", return_PickStock["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                        # print("average date transaction between : ", return_PickStock["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                        # print("Long Position average date transaction between : ", return_PickStock["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                        # print("Short Selling average date transaction between : ", return_PickStock["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                        # print("number PickStock transaction : ", return_PickStock["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
                        # print("weight_PickStock : ", return_PickStock["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
                        # print("pick stock sort ticker symbol : ", return_PickStock["PickStock_sort"]["ticker_symbol"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                        # print("pick stock sort score : ", return_PickStock["PickStock_sort"]["score"])  # 依照選股規則排序篩選出的股票得分值存儲數組;
                        # print(return_PickStock["PickStock_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                        # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                        # print("test profit estimate : ", return_PickStock["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                        # print("test odds ratio estimate : ", return_PickStock["test_odds_ratio"])
                        # print("test date transaction between : ", return_PickStock["test_date_transaction_between"])
                        # # print(return_PickStock["testData"])  # 傳入測試數據集的計算結果;
                        # print("test profit total per share : ", return_PickStock["testData"]["profit_total"])
                        # print("test Long Position profit total per share : ", return_PickStock["testData"]["Long_Position_profit_total"])
                        # print("test Short Selling profit total per share : ", return_PickStock["testData"]["Short_Selling_profit_total"])
                        # print("test profit positive per share : ", return_PickStock["testData"]["profit_Positive"])
                        # print("test Long Position profit positive per share : ", return_PickStock["testData"]["Long_Position_profit_Positive"])
                        # print("test Short Selling profit positive per share : ", return_PickStock["testData"]["Short_Selling_profit_Positive"])
                        # print("test profit positive probability : ", return_PickStock["testData"]["profit_Positive_probability"])
                        # print("test Long Position profit positive probability : ", return_PickStock["testData"]["Long_Position_profit_Positive_probability"])
                        # print("test Short Selling profit positive probability : ", return_PickStock["testData"]["Short_Selling_profit_Positive_probability"])
                        # print("test profit negative per share : ", return_PickStock["testData"]["profit_Negative"])
                        # print("test Long Position profit negative per share : ", return_PickStock["testData"]["Long_Position_profit_Negative"])
                        # print("test Short Selling profit negative per share : ", return_PickStock["testData"]["Short_Selling_profit_Negative"])
                        # print("test profit negative probability : ", return_PickStock["testData"]["profit_Negative_probability"])
                        # print("test Long Position profit negative probability : ", return_PickStock["testData"]["Long_Position_profit_Negative_probability"])
                        # print("test Short Selling profit negative probability : ", return_PickStock["testData"]["Short_Selling_profit_Negative_probability"])
                        # print("test average date transaction between : ", return_PickStock["testData"]["average_date_transaction_between"])
                        # print("test Long Position average date transaction between : ", return_PickStock["testData"]["Long_Position_average_date_transaction_between"])
                        # print("test Short Selling average date transaction between : ", return_PickStock["testData"]["Short_Selling_average_date_transaction_between"])
                        # print("test number_PickStock_transaction : ", return_PickStock["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
                        # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["P1_Array"])
                        # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
                        # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
                        # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"])
                        # PickStock_Parameter_Dict = {}
                        PickStock_Parameter_Dict["Long_Position"] = return_PickStock["Coefficient"]
                        PickStock_ticker_symbol_Array = return_PickStock["PickStock_sort"]["ticker_symbol"]
                        for key, value in return_PickStock["weight_PickStock"].items():
                            # print("Key: {key}, Value: {value}")
                            if isinstance(value, dict) and ("Long_Position" in value):
                                if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
                                    if isinstance(weight_PickStock_Dict[str(key)], dict):
                                        weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                                elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                                    weight_PickStock_Dict[str(key)] = {}
                                    weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                                # else:
                                if isinstance(Plower_weight_PickStock_Dict, dict) and (str(key) in Plower_weight_PickStock_Dict):
                                    if isinstance(Plower_weight_PickStock_Dict[str(key)], dict):
                                        Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
                                elif isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
                                    Plower_weight_PickStock_Dict[str(key)] = {}
                                    Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
                                # else:
                                if isinstance(Pupper_weight_PickStock_Dict, dict) and (str(key) in Pupper_weight_PickStock_Dict):
                                    if isinstance(Pupper_weight_PickStock_Dict[str(key)], dict):
                                        Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                                elif isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
                                    Pupper_weight_PickStock_Dict[str(key)] = {}
                                    Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                                # else:
                        return_PickStock = None  # 釋放内存;

                        # investment_method = "Short_Selling"
                        return_PickStock = PickStock(
                            training_data = trainingData,
                            testing_data = trainingData,
                            Pdata_0 = PickStock_Pdata_0,  # [int(3), int(10)],  # [Pdata_0[1], Pdata_0[2]],  # Pdata_0, # value["Pdata_0"],
                            weight = PickStock_weight,  # [],  # weight,  # value["weight"],
                            Plower = PickStock_Plower,  # [-math.inf, -math.inf],  # [Plower[1], Plower[2]],  # Plower, # value["Plower"],
                            Pupper = PickStock_Pupper,  # [+math.inf, +math.inf],  # [Pupper[1], Pupper[2]],  # Pupper, # value["Pupper"],
                            MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;  # ::Base.Dict{Core.String, Core.Any} = Base.Dict{Core.String, Core.Any}(),
                            PickStock_fit_model = PickStock_fit_model,
                            MarketTiming = MarketTiming,
                            MarketTiming_fit_model = MarketTiming_fit_model,
                            Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                            investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                        )
                        PickStock_Parameter_Dict["Short_Selling"] = return_PickStock["Coefficient"]
                        PickStock_ticker_symbol_Array = return_PickStock["PickStock_sort"]["ticker_symbol"]
                        for key, value in return_PickStock["weight_PickStock"].items():
                            # print("Key: {key}, Value: {value}")
                            if isinstance(value, dict) and ("Short_Selling" in value):
                                if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
                                    if isinstance(weight_PickStock_Dict[str(key)], dict):
                                        weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                                elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                                    weight_PickStock_Dict[str(key)] = {}
                                    weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                                # else:
                                if isinstance(Plower_weight_PickStock_Dict, dict) and (str(key) in Plower_weight_PickStock_Dict):
                                    if isinstance(Plower_weight_PickStock_Dict[str(key)], dict):
                                        Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
                                elif isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
                                    Plower_weight_PickStock_Dict[str(key)] = {}
                                    Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
                                # else:
                                if isinstance(Pupper_weight_PickStock_Dict, dict) and (str(key) in Pupper_weight_PickStock_Dict):
                                    if isinstance(Pupper_weight_PickStock_Dict[str(key)], dict):
                                        Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
                                elif isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
                                    Pupper_weight_PickStock_Dict[str(key)] = {}
                                    Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
                                # else:
                        return_PickStock = None  # 釋放内存;
                    # print(PickStock_Parameter_Dict)
                    # print(PickStock_ticker_symbol_Array)
                    # print(weight_PickStock_Dict)
                    # print(Plower_weight_PickStock_Dict)
                    # print(Pupper_weight_PickStock_Dict)

                    # # 調試時使用，人爲指定選股規則（PickStock）參數，注釋掉選股規則（PickStock）優化過程的代碼，以提高運行速度;
                    # PickStock_Parameter_Dict = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
                    # PickStock_ticker_symbol_Array = []  # Core.Array{Core.Array{Core.String, 1}, 1}();
                    # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                    # Plower_weight_PickStock_Dict = {}
                    # Pupper_weight_PickStock_Dict = {}
                    # PickStock_Parameter_Dict["Long_Position"] = [int(5), int(3)]
                    # PickStock_Parameter_Dict["Short_Selling"] = [int(5), int(3)]
                    # PickStock_ticker_symbol_Array = [str(item) for item in trainingData.keys()]  # [str]
                    # PickStock_ticker_symbol_Array = [PickStock_ticker_symbol_Array for i in range(int(0), int(training_data_sequence_length), int(1))]  # [[str]]
                    # if isinstance(trainingData, dict) and int(len(trainingData)) > int(0):
                    #     for key, value in trainingData.items():
                    #         if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                    #             weight_PickStock_Dict[str(key)] = {}
                    #         if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
                    #             Plower_weight_PickStock_Dict[str(key)] = {}
                    #         if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
                    #             Pupper_weight_PickStock_Dict[str(key)] = {}
                    #         weight_PickStock_Dict[str(key)]["Long_Position"] = float(int(1) / int(len(trainingData.keys())))
                    #         Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
                    #         Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                    #         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(int(1) / int(len(trainingData.keys())))
                    #         Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
                    #         Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)

                    PickStock_ticker_symbol_Array_testing_data_Long_Position = []
                    PickStock_ticker_symbol_Array_testing_data_Short_Selling = []
                    if isinstance(PickStock_ticker_symbol_Array, list) and int(len(PickStock_ticker_symbol_Array)) > int(0):
                        PickStock_ticker_symbol_Array_testing_data_Long_Position = PickStock_ticker_symbol_Array[int(int(len(PickStock_ticker_symbol_Array)) - int(1))]
                        PickStock_ticker_symbol_Array_testing_data_Short_Selling = PickStock_ticker_symbol_Array[int(int(len(PickStock_ticker_symbol_Array)) - int(1))]
                    # print(PickStock_ticker_symbol_Array_testing_data_Long_Position)
                    # print(PickStock_ticker_symbol_Array_testing_data_Short_Selling)

                    # # 倉位優化;
                    # SizePosition_Parameter_Array = []  # 依照倉位規則優化之後得到的倉位數據存儲字典;
                    # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                    # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                    # if isinstance(trainingData, dict) and int(len(trainingData)) > int(0):

                    #     # investment_method = "Long_Position"
                    #     return_SizePosition = SizePosition(
                    #         training_data = trainingData,
                    #         testing_data = trainingData,
                    #         Pdata_0 = SizePosition_Pdata_0,  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # trainingData["002611"]["Pdata_0"],
                    #         weight = SizePosition_weight,  # [],  # trainingData["002611"]["weight"],
                    #         Plower = SizePosition_Plower,  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
                    #         Pupper = SizePosition_Pupper,  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
                    #         MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                    #         PickStock_Parameter = PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;
                    #         PickStock_ticker_symbol = PickStock_ticker_symbol_Array,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                    #         SizePosition_fit_model = SizePosition_fit_model,
                    #         PickStock = PickStock,
                    #         PickStock_fit_model = PickStock_fit_model,
                    #         MarketTiming = MarketTiming,
                    #         MarketTiming_fit_model = MarketTiming_fit_model,
                    #         Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                    #         investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                    #     )
                    #     # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", return_SizePosition["Coefficient"][0], "optimization - coefficient 2 - weight_PickStock :", "\n", return_SizePosition["Coefficient"][1])  # 最優化計算之後得到的參數;
                    #     # # print("optimization - coefficient StandardDeviation : ", return_SizePosition["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
                    #     # # print("optimization - coefficient Confidence Lower 95% : ", return_SizePosition["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
                    #     # # print("optimization - coefficient Confidence Upper 95% : ", return_SizePosition["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
                    #     # # print("y - fit : ", return_SizePosition["Yfit"])  # 擬合 y 值;
                    #     # # print("y - fit Uncertainty Lower : ", return_SizePosition["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
                    #     # # print("y - fit Uncertainty Upper : ", return_SizePosition["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
                    #     # # print("residual : ", return_SizePosition["Residual"])  # 擬合殘差;
                    #     # print("y_profit : ", return_SizePosition["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                    #     # print("y_Long_Position_profit : ", return_SizePosition["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                    #     # print("y_Short_Selling_profit : ", return_SizePosition["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                    #     # print("y_loss : ", return_SizePosition["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                    #     # print("y_Long_Position_loss : ", return_SizePosition["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                    #     # print("y_Short_Selling_loss : ", return_SizePosition["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                    #     # print("maximum_drawdown : ", return_SizePosition["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                    #     # print("maximum_drawdown_Long_Position : ", return_SizePosition["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                    #     # print("maximum_drawdown_Short_Selling : ", return_SizePosition["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                    #     # print("profit total per share : ", return_SizePosition["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                    #     # print("Long Position profit total per share : ", return_SizePosition["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                    #     # print("Short Selling profit total per share : ", return_SizePosition["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                    #     # print("profit Positive : ", return_SizePosition["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                    #     # print("Long Position profit Positive : ", return_SizePosition["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                    #     # print("Short Selling_profit Positive : ", return_SizePosition["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                    #     # print("profit Positive probability : ", return_SizePosition["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                    #     # print("Long Position profit Positive probability : ", return_SizePosition["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                    #     # print("Short Selling profit Positive probability : ", return_SizePosition["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                    #     # print("profit Negative : ", return_SizePosition["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                    #     # print("Long Position profit Negative : ", return_SizePosition["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                    #     # print("Short Selling profit Negative : ", return_SizePosition["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                    #     # print("profit Negative probability : ", return_SizePosition["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                    #     # print("Long Position profit Negative probability : ", return_SizePosition["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                    #     # print("Short Selling profit Negative probability : ", return_SizePosition["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                    #     # print("average price amplitude date transaction : ", return_SizePosition["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                    #     # print("Long Position average price amplitude date transaction : ", return_SizePosition["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                    #     # print("Short Selling average price amplitude date transaction : ", return_SizePosition["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                    #     # print("average volume turnover date transaction : ", return_SizePosition["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                    #     # print("Long Position average volume turnover date transaction : ", return_SizePosition["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                    #     # print("Short Selling average volume turnover date transaction : ", return_SizePosition["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                    #     # print("average date transaction between : ", return_SizePosition["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                    #     # print("Long Position average date transaction between : ", return_SizePosition["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                    #     # print("Short Selling average date transaction between : ", return_SizePosition["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                    #     # print("number SizePosition transaction : ", return_SizePosition["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                    #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                    #     # print("test profit estimate : ", return_SizePosition["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                    #     # print("test odds ratio estimate : ", return_SizePosition["test_odds_ratio"])
                    #     # print("test date transaction between : ", return_SizePosition["test_date_transaction_between"])
                    #     # # print(return_SizePosition["testData"])  # 傳入測試數據集的計算結果;
                    #     # print("test profit total per share : ", return_SizePosition["testData"]["profit_total"])
                    #     # print("test Long Position profit total per share : ", return_SizePosition["testData"]["Long_Position_profit_total"])
                    #     # print("test Short Selling profit total per share : ", return_SizePosition["testData"]["Short_Selling_profit_total"])
                    #     # print("test profit positive per share : ", return_SizePosition["testData"]["profit_Positive"])
                    #     # print("test Long Position profit positive per share : ", return_SizePosition["testData"]["Long_Position_profit_Positive"])
                    #     # print("test Short Selling profit positive per share : ", return_SizePosition["testData"]["Short_Selling_profit_Positive"])
                    #     # print("test profit positive probability : ", return_SizePosition["testData"]["profit_Positive_probability"])
                    #     # print("test Long Position profit positive probability : ", return_SizePosition["testData"]["Long_Position_profit_Positive_probability"])
                    #     # print("test Short Selling profit positive probability : ", return_SizePosition["testData"]["Short_Selling_profit_Positive_probability"])
                    #     # print("test profit negative per share : ", return_SizePosition["testData"]["profit_Negative"])
                    #     # print("test Long Position profit negative per share : ", return_SizePosition["testData"]["Long_Position_profit_Negative"])
                    #     # print("test Short Selling profit negative per share : ", return_SizePosition["testData"]["Short_Selling_profit_Negative"])
                    #     # print("test profit negative probability : ", return_SizePosition["testData"]["profit_Negative_probability"])
                    #     # print("test Long Position profit negative probability : ", return_SizePosition["testData"]["Long_Position_profit_Negative_probability"])
                    #     # print("test Short Selling profit negative probability : ", return_SizePosition["testData"]["Short_Selling_profit_Negative_probability"])
                    #     # print("test average date transaction between : ", return_SizePosition["testData"]["average_date_transaction_between"])
                    #     # print("test Long Position average date transaction between : ", return_SizePosition["testData"]["Long_Position_average_date_transaction_between"])
                    #     # print("test Short Selling average date transaction between : ", return_SizePosition["testData"]["Short_Selling_average_date_transaction_between"])
                    #     # print("test number SizePosition transaction : ", return_SizePosition["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
                    #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["P1_Array"])
                    #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
                    #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
                    #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"])
                    #     # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                    #     # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                    #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
                    #         for key, value in return_SizePosition["Coefficient"][0].items():
                    #             # print("Key: {key}, Value: {value}")
                    #             if isinstance(value, dict) and ("Long_Position" in value):
                    #                 if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
                    #                     if isinstance(weight_MarketTiming_Dict[str(key)], dict):
                    #                         weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                    #                 elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                    #                     weight_MarketTiming_Dict[str(key)] = {}
                    #                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                    #                 # else:
                    #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
                    #         for key, value in return_SizePosition["Coefficient"][1].items():
                    #             # print("Key: {key}, Value: {value}")
                    #             if isinstance(value, dict) and ("Long_Position" in value):
                    #                 if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
                    #                     if isinstance(weight_PickStock_Dict[str(key)], dict):
                    #                         weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                    #                 elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                    #                     weight_PickStock_Dict[str(key)] = {}
                    #                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                    #                 # else:
                    #     return_SizePosition = None  # 釋放内存;

                    #     # investment_method = "Short_Selling"
                    #     return_SizePosition = SizePosition(
                    #         training_data = trainingData,
                    #         testing_data = trainingData,
                    #         Pdata_0 = SizePosition_Pdata_0,  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # trainingData["002611"]["Pdata_0"],
                    #         weight = SizePosition_weight,  # [],  # trainingData["002611"]["weight"],
                    #         Plower = SizePosition_Plower,  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
                    #         Pupper = SizePosition_Pupper,  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
                    #         MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                    #         PickStock_Parameter = PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;
                    #         PickStock_ticker_symbol = PickStock_ticker_symbol_Array,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                    #         SizePosition_fit_model = SizePosition_fit_model,
                    #         PickStock = PickStock,
                    #         PickStock_fit_model = PickStock_fit_model,
                    #         MarketTiming = MarketTiming,
                    #         MarketTiming_fit_model = MarketTiming_fit_model,
                    #         Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                    #         investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                    #     )
                    #     # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                    #     # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                    #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
                    #         for key, value in return_SizePosition["Coefficient"][0].items():
                    #             # print("Key: {key}, Value: {value}")
                    #             if isinstance(value, dict) and ("Short_Selling" in value):
                    #                 if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
                    #                     if isinstance(weight_MarketTiming_Dict[str(key)], dict):
                    #                         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                    #                 elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                    #                     weight_MarketTiming_Dict[str(key)] = {}
                    #                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                    #                 # else:
                    #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
                    #         for key, value in return_SizePosition["Coefficient"][1].items():
                    #             # print("Key: {key}, Value: {value}")
                    #             if isinstance(value, dict) and ("Short_Selling" in value):
                    #                 if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
                    #                     if isinstance(weight_PickStock_Dict[str(key)], dict):
                    #                         weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                    #                 elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                    #                     weight_PickStock_Dict[str(key)] = {}
                    #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                    #                 # else:
                    #     return_SizePosition = None  # 釋放内存;
                    SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
                    # # print(SizePosition_Parameter_Array)
                    # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", SizePosition_Parameter_Array[0])  # 最優化計算之後得到的參數;
                    # print("optimization - coefficient 2 - weight_PickStock :", "\n", SizePosition_Parameter_Array[1])  # 最優化計算之後得到的參數;

                    stepping_transaction_Dict["training_data"] = trainingData
                    stepping_transaction_Dict["training_MarketTiming_Parameter"] = MarketTiming_Parameter_Dict
                    stepping_transaction_Dict["training_PickStock_Parameter"] = PickStock_Parameter_Dict
                    stepping_transaction_Dict["training_PickStock_ticker_symbol"] = PickStock_ticker_symbol_Array
                    stepping_transaction_Dict["training_SizePosition_Parameter"] = SizePosition_Parameter_Array

                    # 求解擇時規則和選股規則優化參數中向前回溯的交易天數極值;
                    maximum_MarketTiming_and_PickStock_P1 = int(0)  # 擇時規則和選股規則優化參數中向前回溯的最長交易天數;
                    minimum_MarketTiming_and_PickStock_P1 = int(0)  # 擇時規則和選股規則優化參數中向前回溯的最短交易天數;
                    MarketTiming_and_PickStock_P1_Array = []
                    # 遍歷字典的鍵:值對;
                    for key, value in PickStock_Parameter_Dict.items():
                        # print("Key: {key}, Value: {value}")
                        if isinstance(value, list) and int(len(value)) > int(0):
                            # 記錄選股規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                            MarketTiming_and_PickStock_P1_Array.append(int(value[1]))  # 記錄選股規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                            # 篩選選股規則最長向前回溯的天數;
                            if int(value[1]) > int(maximum_MarketTiming_and_PickStock_P1):
                                maximum_MarketTiming_and_PickStock_P1_2 = int(value[1])
                                maximum_MarketTiming_and_PickStock_P1 *= int(0)
                                maximum_MarketTiming_and_PickStock_P1 += int(maximum_MarketTiming_and_PickStock_P1_2)
                    for key, value in MarketTiming_Parameter_Dict.items():
                        # print("Key: {key}, Value: {value}");
                        if isinstance(value, dict):
                            # investment_method == "Long_Position_and_Short_Selling";
                            if ("Long_Position_and_Short_Selling" in value) and isinstance(value["Long_Position_and_Short_Selling"], list) and int(len(value["Long_Position_and_Short_Selling"])) > int(0):
                                # 記錄擇時規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                MarketTiming_and_PickStock_P1_Array.append(int(value["Long_Position_and_Short_Selling"][1]))  # 記錄擇時規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選擇時規則最長向前回溯的天數;
                                if int(value["Long_Position_and_Short_Selling"][1]) > int(maximum_MarketTiming_and_PickStock_P1):
                                    maximum_MarketTiming_and_PickStock_P1_2 = int(value["Long_Position_and_Short_Selling"][1])
                                    maximum_MarketTiming_and_PickStock_P1 *= int(0)
                                    maximum_MarketTiming_and_PickStock_P1 += int(maximum_MarketTiming_and_PickStock_P1_2)
                            # investment_method == "Long_Position";
                            if ("Long_Position" in value) and isinstance(value["Long_Position"], list) and int(len(value["Long_Position"])) > int(0):
                                # 記錄擇時規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                MarketTiming_and_PickStock_P1_Array.append(int(value["Long_Position"][1]))  # 記錄擇時規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選擇時規則最長向前回溯的天數;
                                if int(value["Long_Position"][1]) > int(maximum_MarketTiming_and_PickStock_P1):
                                    maximum_MarketTiming_and_PickStock_P1_2 = int(value["Long_Position"][1])
                                    maximum_MarketTiming_and_PickStock_P1 *= int(0)
                                    maximum_MarketTiming_and_PickStock_P1 += int(maximum_MarketTiming_and_PickStock_P1_2)
                            # investment_method == "Short_Selling";
                            if ("Short_Selling" in value) and isinstance(value["Short_Selling"], list) and int(len(value["Short_Selling"])) > int(0):
                                # 記錄擇時規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                MarketTiming_and_PickStock_P1_Array.append(int(value["Short_Selling"][1]))  # 記錄擇時規則向前回溯的天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選擇時規則最長向前回溯的天數;
                                if int(value["Short_Selling"][1]) > int(maximum_MarketTiming_and_PickStock_P1):
                                    maximum_MarketTiming_and_PickStock_P1_2 = int(value["Short_Selling"][1])
                                    maximum_MarketTiming_and_PickStock_P1 *= int(0)
                                    maximum_MarketTiming_and_PickStock_P1 += int(maximum_MarketTiming_and_PickStock_P1_2)
                    # print(maximum_MarketTiming_and_PickStock_P1)
                    if int(len(MarketTiming_and_PickStock_P1_Array)) > int(0):
                        minimum_MarketTiming_and_PickStock_P1_2 = int(min(MarketTiming_and_PickStock_P1_Array))
                        minimum_MarketTiming_and_PickStock_P1 *= int(0)
                        minimum_MarketTiming_and_PickStock_P1 += int(minimum_MarketTiming_and_PickStock_P1_2)
                    # print(minimum_MarketTiming_and_PickStock_P1)
                    MarketTiming_and_PickStock_P1_Array = None  # 釋放内存;

                    # 判斷滑框步進一步之後是否仍在數據序列範圍内;
                    # k = int(int(i) + int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)))
                    k = int(int(i) + int(testing_data_sequence_length))
                    if int(int(k) + int(1)) <= int(minimum_dates_transaction):
                        if int(int(k) + int(1)) >= int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)):
                            if int(len(testing_data_ticker_symbol_Array)) > int(0):

                                # 推進分析測試集數據序列截取;
                                testingData = {}
                                for h in range(int(0), int(len(testing_data_ticker_symbol_Array)), int(1)):
                                    # 判斷當前股票代碼字符串（ticker_symbol）是否在指定數組内
                                    if (str(testing_data_ticker_symbol_Array[h]) in steppingData) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])], dict) and int(len(steppingData[str(testing_data_ticker_symbol_Array[h])])) > int(0):
                                        if (("date_transaction" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["date_transaction"], list)) and (("turnover_volume" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_volume"], list)) and (("opening_price" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price"], list)) and (("close_price" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["close_price"], list)) and (("low_price" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price"], list)) and (("high_price" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price"], list)) and (("focus" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["focus"], list)) and (("amplitude" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["amplitude"], list)) and (("amplitude_rate" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["amplitude_rate"], list)) and (("opening_price_Standardization" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price_Standardization"], list)) and (("closing_price_Standardization" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_price_Standardization"], list)) and (("low_price_Standardization" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price_Standardization"], list)) and (("high_price_Standardization" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price_Standardization"], list)) and (("turnover_volume_growth_rate" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_volume_growth_rate"], list)) and (("opening_price_growth_rate" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price_growth_rate"], list)) and (("closing_price_growth_rate" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_price_growth_rate"], list)) and (("closing_minus_opening_price_growth_rate" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_minus_opening_price_growth_rate"], list)) and (("high_price_proportion" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price_proportion"], list)) and (("low_price_proportion" in steppingData[str(testing_data_ticker_symbol_Array[h])]) and isinstance(steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price_proportion"], list)):

                                            # 判斷測試集數據滑框尾界是否在數據序列範圍内;
                                            if int(int(k) + int(1)) <= int(min([len(steppingData[str(testing_data_ticker_symbol_Array[h])]["date_transaction"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_volume"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["close_price"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["focus"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["amplitude"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["amplitude_rate"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price_Standardization"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_price_Standardization"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price_Standardization"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price_Standardization"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_volume_growth_rate"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price_growth_rate"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_price_growth_rate"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_minus_opening_price_growth_rate"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price_proportion"]), len(steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price_proportion"])])):
                                                # 判斷測試集數據滑框頭界是否在數據序列範圍内;
                                                if int(int(k) + int(1)) >= int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)):

                                                    x0 = steppingData[str(testing_data_ticker_symbol_Array[h])]["date_transaction"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 交易日期;
                                                    x1 = steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_volume"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 成交量;
                                                    # x2 = steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_amount"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 成交總金額;
                                                    x3 = steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 開盤成交價;
                                                    x4 = steppingData[str(testing_data_ticker_symbol_Array[h])]["close_price"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤成交價;
                                                    x5 = steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 最低成交價;
                                                    x6 = steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 最高成交價;
                                                    x7 = steppingData[str(testing_data_ticker_symbol_Array[h])]["focus"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 當日成交價重心;
                                                    x8 = steppingData[str(testing_data_ticker_symbol_Array[h])]["amplitude"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 當日成交價絕對振幅;
                                                    x9 = steppingData[str(testing_data_ticker_symbol_Array[h])]["amplitude_rate"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 當日成交價相對振幅（%）;
                                                    x10 = steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price_Standardization"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                                    x11 = steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_price_Standardization"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                                    x12 = steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price_Standardization"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                                    x13 = steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price_Standardization"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                                    x14 = steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_volume_growth_rate"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 成交量的成長率;
                                                    x15 = steppingData[str(testing_data_ticker_symbol_Array[h])]["opening_price_growth_rate"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 開盤價的成長率;
                                                    x16 = steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_price_growth_rate"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價的成長率;
                                                    x17 = steppingData[str(testing_data_ticker_symbol_Array[h])]["closing_minus_opening_price_growth_rate"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價減開盤價的成長率;
                                                    x18 = steppingData[str(testing_data_ticker_symbol_Array[h])]["high_price_proportion"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價和開盤價裏的最大值占最高價的比例;
                                                    x19 = steppingData[str(testing_data_ticker_symbol_Array[h])]["low_price_proportion"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 最低價占收盤價和開盤價裏的最小值的比例;
                                                    # x20 = steppingData[str(testing_data_ticker_symbol_Array[h])]["turnover_rate"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 成交量換手率;
                                                    # x21 = steppingData[str(testing_data_ticker_symbol_Array[h])]["price_earnings"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 每股收益（公司經營利潤率 ÷ 股本）;
                                                    # x22 = steppingData[str(testing_data_ticker_symbol_Array[h])]["book_value_per_share"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 每股净值（公司净資產 ÷ 股本）;
                                                    # x23 = steppingData[str(testing_data_ticker_symbol_Array[h])]["capitalization"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 總市值;
                                                    # x24 = steppingData[str(testing_data_ticker_symbol_Array[h])]["moving_average_5"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價 5 日滑動平均缐;
                                                    # x25 = steppingData[str(testing_data_ticker_symbol_Array[h])]["moving_average_10"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價 10 日滑動平均缐;
                                                    # x26 = steppingData[str(testing_data_ticker_symbol_Array[h])]["moving_average_20"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價 20 日滑動平均缐;
                                                    # x27 = steppingData[str(testing_data_ticker_symbol_Array[h])]["moving_average_30"][int(int(k) - int(int(maximum_MarketTiming_and_PickStock_P1) + int(2)) + int(1)):int(int(k) + int(1)):int(1)]  # 收盤價 30 日滑動平均缐;
                                                    Pdata_0 = steppingData[str(testing_data_ticker_symbol_Array[h])]["Pdata_0"]
                                                    Plower = steppingData[str(testing_data_ticker_symbol_Array[h])]["Plower"]
                                                    Pupper = steppingData[str(testing_data_ticker_symbol_Array[h])]["Pupper"]
                                                    weight = steppingData[str(testing_data_ticker_symbol_Array[h])]["weight"]

                                                    testingData[str(testing_data_ticker_symbol_Array[h])] = {
                                                        "date_transaction": x0,  # 交易日期;
                                                        "turnover_volume": x1,  # 成交量;
                                                        # "turnover_amount": x2,  # 成交總金額;
                                                        "opening_price": x3,  # 開盤成交價;
                                                        "close_price": x4,  # 收盤成交價;
                                                        "low_price": x5,  # 最低成交價;
                                                        "high_price": x6,  # 最高成交價;
                                                        "focus": x7,  # 當日成交價重心;
                                                        "amplitude": x8,  # 當日成交價絕對振幅;
                                                        "amplitude_rate": x9,  # 當日成交價相對振幅（%）;
                                                        "opening_price_Standardization": x10,  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                                        "closing_price_Standardization": x11,  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                                        "low_price_Standardization": x12,  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                                        "high_price_Standardization": x13,  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                                        "turnover_volume_growth_rate": x14,  # 成交量的成長率;
                                                        "opening_price_growth_rate": x15,  # 開盤價的成長率;
                                                        "closing_price_growth_rate": x16,  # 收盤價的成長率;
                                                        "closing_minus_opening_price_growth_rate": x17,  # 收盤價減開盤價的成長率;
                                                        "high_price_proportion": x18,  # 收盤價和開盤價裏的最大值占最高價的比例;
                                                        "low_price_proportion": x19,  # 最低價占收盤價和開盤價裏的最小值的比例;
                                                        # "turnover_rate": x20,  # 成交量換手率;
                                                        # "price_earnings": x21,  # 每股收益（公司經營利潤率 ÷ 股本）;
                                                        # "book_value_per_share": x22,  # 每股净值（公司净資產 ÷ 股本）;
                                                        # "capitalization": x23,  # 總市值;
                                                        # "moving_average_5": x24,  # 收盤價 5 日滑動平均缐;
                                                        # "moving_average_10": x25,  # 收盤價 10 日滑動平均缐;
                                                        # "moving_average_20": x26,  # 收盤價 20 日滑動平均缐;
                                                        # "moving_average_30": x27,  # 收盤價 30 日滑動平均缐;
                                                        "Pdata_0": Pdata_0,
                                                        "Plower": Plower,
                                                        "Pupper": Pupper,
                                                        "weight": weight
                                                    }

                                                    # 釋放内存;
                                                    x0 = None
                                                    x1 = None
                                                    # x2 = None
                                                    x3 = None
                                                    x4 = None
                                                    x5 = None
                                                    x6 = None
                                                    x7 = None
                                                    x8 = None
                                                    x9 = None
                                                    x10 = None
                                                    x11 = None
                                                    x12 = None
                                                    x13 = None
                                                    x14 = None
                                                    x15 = None
                                                    x16 = None
                                                    x17 = None
                                                    x18 = None
                                                    x19 = None
                                                    # x20 = None
                                                    # x21 = None
                                                    # x22 = None
                                                    # x23 = None
                                                    # x24 = None
                                                    # x25 = None
                                                    # x26 = None
                                                    # x27 = None
                                                    Pdata_0 = None
                                                    Plower = None
                                                    Pupper = None
                                                    weight = None

                                stepping_transaction_Dict["testing_data"] = testingData

                                if isinstance(testingData, dict) and int(len(testingData)) > int(0):

                                    # 測試數據集交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
                                    maximum_ticker_symbol_transaction_testing_data = int(len(testingData.keys()))  # 測試數據集交易過股票的總隻數;
                                    # print(maximum_ticker_symbol_transaction_testing_data)
                                    maximum_dates_transaction_testing_data = int(0)  # 測試數據集各股票裏的最長交易天數;
                                    minimum_dates_transaction_testing_data = int(0)  # 測試數據集各股票裏的最短交易天數;
                                    dates_transaction_Array_testing_data = []
                                    # 遍歷字典的鍵:值對;
                                    for key, value in testingData.items():
                                        # print("Key: {key}, Value: {value}")
                                        if isinstance(value, dict):
                                            if ("date_transaction" in value) and isinstance(value["date_transaction"], list):
                                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                dates_transaction_Array_testing_data.append(int(len(value["date_transaction"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                # 篩選最長交易天數;
                                                if int(len(value["date_transaction"])) > int(maximum_dates_transaction_testing_data):
                                                    maximum_dates_transaction_testing_data_2 = int(len(value["date_transaction"]))
                                                    maximum_dates_transaction_testing_data *= int(0)
                                                    maximum_dates_transaction_testing_data += int(maximum_dates_transaction_testing_data_2)
                                            if ("turnover_volume" in value) and isinstance(value["turnover_volume"], list):
                                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                dates_transaction_Array_testing_data.append(int(len(value["turnover_volume"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                # 篩選最長交易天數;
                                                if int(len(value["turnover_volume"])) > int(maximum_dates_transaction_testing_data):
                                                    maximum_dates_transaction_testing_data_2 = int(len(value["turnover_volume"]))
                                                    maximum_dates_transaction_testing_data *= int(0)
                                                    maximum_dates_transaction_testing_data += int(maximum_dates_transaction_testing_data_2)
                                            if ("opening_price" in value) and isinstance(value["opening_price"], list):
                                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                dates_transaction_Array_testing_data.append(int(len(value["opening_price"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                # 篩選最長交易天數;
                                                if int(len(value["opening_price"])) > int(maximum_dates_transaction_testing_data):
                                                    maximum_dates_transaction_testing_data_2 = int(len(value["opening_price"]))
                                                    maximum_dates_transaction_testing_data *= int(0)
                                                    maximum_dates_transaction_testing_data += int(maximum_dates_transaction_testing_data_2)
                                            if ("close_price" in value) and isinstance(value["close_price"], list):
                                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                dates_transaction_Array_testing_data.append(int(len(value["close_price"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                # 篩選最長交易天數;
                                                if int(len(value["close_price"])) > int(maximum_dates_transaction_testing_data):
                                                    maximum_dates_transaction_testing_data_2 = int(len(value["close_price"]))
                                                    maximum_dates_transaction_testing_data *= int(0)
                                                    maximum_dates_transaction_testing_data += int(maximum_dates_transaction_testing_data_2)
                                            if ("low_price" in value) and isinstance(value["low_price"], list):
                                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                dates_transaction_Array_testing_data.append(int(len(value["low_price"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                # 篩選最長交易天數;
                                                if int(len(value["low_price"])) > int(maximum_dates_transaction_testing_data):
                                                    maximum_dates_transaction_testing_data_2 = int(len(value["low_price"]))
                                                    maximum_dates_transaction_testing_data *= int(0)
                                                    maximum_dates_transaction_testing_data += int(maximum_dates_transaction_testing_data_2)
                                            if ("high_price" in value) and isinstance(value["high_price"], list):
                                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                dates_transaction_Array_testing_data.append(int(len(value["high_price"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                # 篩選最長交易天數;
                                                if int(len(value["high_price"])) > int(maximum_dates_transaction_testing_data):
                                                    maximum_dates_transaction_testing_data_2 = int(len(value["high_price"]))
                                                    maximum_dates_transaction_testing_data *= int(0)
                                                    maximum_dates_transaction_testing_data += int(maximum_dates_transaction_testing_data_2)
                                    # print(maximum_dates_transaction_testing_data)
                                    if int(len(dates_transaction_Array_testing_data)) > int(0):
                                        minimum_dates_transaction_testing_data_2 = int(min(dates_transaction_Array_testing_data))
                                        minimum_dates_transaction_testing_data *= int(0)
                                        minimum_dates_transaction_testing_data += int(minimum_dates_transaction_testing_data_2)
                                    # print(minimum_dates_transaction_testing_data)
                                    dates_transaction_Array_testing_data = None  # 釋放内存;

                                    # # 依照選股規則篩選出股票，並將股票代碼字符串存儲數組;
                                    # return_PickStock_fit_model = PickStock_fit_model(
                                    #     testingData,
                                    #     PickStock_Parameter_Dict["Long_Position"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
                                    #     PickStock_Parameter_Dict["Long_Position"][1],  # int(5),  # P2  # 依據市值高低分組選股的分類數目;
                                    #     MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                                    #     MarketTiming,
                                    #     MarketTiming_fit_model,
                                    #     Quantitative_Indicators_Function,
                                    #     "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                    # )
                                    # PickStock_ticker_symbol_Array_testing_data_Long_Position = return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"]
                                    # return_PickStock_fit_model = None  # 釋放内存;
                                    # return_PickStock_fit_model = PickStock_fit_model(
                                    #     testingData,
                                    #     PickStock_Parameter_Dict["Short_Selling"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
                                    #     PickStock_Parameter_Dict["Short_Selling"][1],  # int(5),  # P2  # 依據市值高低分組選股的分類數目;
                                    #     MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                                    #     MarketTiming,
                                    #     MarketTiming_fit_model,
                                    #     Quantitative_Indicators_Function,
                                    #     "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                    # )
                                    # PickStock_ticker_symbol_Array_testing_data_Short_Selling = return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"]
                                    # return_PickStock_fit_model = None  # 釋放内存;
                                    # # print("optimization - y_profit = ", return_PickStock_fit_model["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("Long Position optimization - y_profit = ", return_PickStock_fit_model["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("Short Selling optimization - y_profit = ", return_PickStock_fit_model["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("optimization - y_loss = ", return_PickStock_fit_model["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("Long Position optimization - y_loss = ", return_PickStock_fit_model["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("Short Selling optimization - y_loss = ", return_PickStock_fit_model["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("maximum_drawdown = ", return_PickStock_fit_model["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("maximum_drawdown_Long_Position = ", return_PickStock_fit_model["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("maximum_drawdown_Short_Selling = ", return_PickStock_fit_model["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("profit_total = ", return_PickStock_fit_model["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("Long_Position_profit_total = ", return_PickStock_fit_model["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("Short_Selling_profit_total = ", return_PickStock_fit_model["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("profit_Positive = ", return_PickStock_fit_model["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("Long_Position_profit_Positive = ", return_PickStock_fit_model["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("Short_Selling_profit_Positive = ", return_PickStock_fit_model["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("profit_Positive_probability = ", return_PickStock_fit_model["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("Long_Position_profit_Positive_probability = ", return_PickStock_fit_model["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("Short_Selling_profit_Positive_probability = ", return_PickStock_fit_model["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("profit_Negative = ", return_PickStock_fit_model["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("Long_Position_profit_Negative = ", return_PickStock_fit_model["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("Short_Selling_profit_Negative = ", return_PickStock_fit_model["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("profit_Negative_probability = ", return_PickStock_fit_model["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("Long_Position_profit_Negative_probability = ", return_PickStock_fit_model["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("Short_Selling_profit_Negative_probability = ", return_PickStock_fit_model["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("average_price_amplitude_date_transaction = ", return_PickStock_fit_model["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("Long_Position_average_price_amplitude_date_transaction = ", return_PickStock_fit_model["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("Short_Selling_average_price_amplitude_date_transaction = ", return_PickStock_fit_model["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("average_volume_turnover_date_transaction = ", return_PickStock_fit_model["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("Long_Position_average_volume_turnover_date_transaction = ", return_PickStock_fit_model["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("Short_Selling_average_volume_turnover_date_transaction = ", return_PickStock_fit_model["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("average_date_transaction_between = ", return_PickStock_fit_model["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                    # # print("Long_Position_average_date_transaction_between = ", return_PickStock_fit_model["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("Short_Selling_average_date_transaction_between = ", return_PickStock_fit_model["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("number_PickStock_transaction = ", return_PickStock_fit_model["number_PickStock_transaction"])  # 交易過股票的總隻數;
                                    # # print("weight_PickStock = ", return_PickStock_fit_model["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
                                    # # print(return_PickStock_fit_model["PickStock_sort"])  # 依照選股規則排序篩選出的股票代碼字符串和得分存儲字典（Dict）;
                                    # # print(return_PickStock_fit_model["PickStock_sort"]["ticker_symbol"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                                    # # print(return_PickStock_fit_model["PickStock_sort"]["score"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"])
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"])
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                    # # print(return_PickStock_fit_model["PickStock_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;

                                    if int(minimum_dates_transaction_testing_data) > int(0):
                                        PickStock_ticker_symbol_Array_testing_data_Long_Position = [PickStock_ticker_symbol_Array_testing_data_Long_Position for i in range(int(0), int(minimum_dates_transaction_testing_data), int(1))]
                                        PickStock_ticker_symbol_Array_testing_data_Short_Selling = [PickStock_ticker_symbol_Array_testing_data_Short_Selling for i in range(int(0), int(minimum_dates_transaction_testing_data), int(1))]

                                    # # 倉位優化;
                                    # # SizePosition_Parameter_Array = []  # 依照倉位規則優化之後得到的倉位數據存儲字典;
                                    # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                                    # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                                    # # investment_method == "Long_Position"
                                    # return_SizePosition = SizePosition(
                                    #     training_data = testingData,
                                    #     testing_data = testingData,
                                    #     Pdata_0 = SizePosition_Pdata_0,  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # testingData["002611"]["Pdata_0"],
                                    #     weight = SizePosition_weight,  # [],  # testingData["002611"]["weight"],
                                    #     Plower = SizePosition_Plower,  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
                                    #     Pupper = SizePosition_Pupper,  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
                                    #     MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                                    #     PickStock_Parameter = PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;
                                    #     PickStock_ticker_symbol = PickStock_ticker_symbol_Array_testing_data_Long_Position,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;  # PickStock_ticker_symbol_Array,
                                    #     SizePosition_fit_model = SizePosition_fit_model,
                                    #     PickStock = PickStock,
                                    #     PickStock_fit_model = PickStock_fit_model,
                                    #     MarketTiming = MarketTiming,
                                    #     MarketTiming_fit_model = MarketTiming_fit_model,
                                    #     Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                                    #     investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                    # )
                                    # # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", return_SizePosition["Coefficient"][0], "optimization - coefficient 2 - weight_PickStock :", "\n", return_SizePosition["Coefficient"][1])  # 最優化計算之後得到的參數;
                                    # # # print("optimization - coefficient StandardDeviation : ", return_SizePosition["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
                                    # # # print("optimization - coefficient Confidence Lower 95% : ", return_SizePosition["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
                                    # # # print("optimization - coefficient Confidence Upper 95% : ", return_SizePosition["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
                                    # # # print("y - fit : ", return_SizePosition["Yfit"])  # 擬合 y 值;
                                    # # # print("y - fit Uncertainty Lower : ", return_SizePosition["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
                                    # # # print("y - fit Uncertainty Upper : ", return_SizePosition["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
                                    # # # print("residual : ", return_SizePosition["Residual"])  # 擬合殘差;
                                    # # print("y_profit : ", return_SizePosition["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("y_Long_Position_profit : ", return_SizePosition["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("y_Short_Selling_profit : ", return_SizePosition["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("y_loss : ", return_SizePosition["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("y_Long_Position_loss : ", return_SizePosition["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("y_Short_Selling_loss : ", return_SizePosition["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("maximum_drawdown : ", return_SizePosition["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("maximum_drawdown_Long_Position : ", return_SizePosition["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("maximum_drawdown_Short_Selling : ", return_SizePosition["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("profit total per share : ", return_SizePosition["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("Long Position profit total per share : ", return_SizePosition["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("Short Selling profit total per share : ", return_SizePosition["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("profit Positive : ", return_SizePosition["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("Long Position profit Positive : ", return_SizePosition["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("Short Selling_profit Positive : ", return_SizePosition["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("profit Positive probability : ", return_SizePosition["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("Long Position profit Positive probability : ", return_SizePosition["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("Short Selling profit Positive probability : ", return_SizePosition["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("profit Negative : ", return_SizePosition["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("Long Position profit Negative : ", return_SizePosition["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("Short Selling profit Negative : ", return_SizePosition["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("profit Negative probability : ", return_SizePosition["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("Long Position profit Negative probability : ", return_SizePosition["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("Short Selling profit Negative probability : ", return_SizePosition["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("average price amplitude date transaction : ", return_SizePosition["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("Long Position average price amplitude date transaction : ", return_SizePosition["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("Short Selling average price amplitude date transaction : ", return_SizePosition["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("average volume turnover date transaction : ", return_SizePosition["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("Long Position average volume turnover date transaction : ", return_SizePosition["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("Short Selling average volume turnover date transaction : ", return_SizePosition["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("average date transaction between : ", return_SizePosition["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("Long Position average date transaction between : ", return_SizePosition["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("Short Selling average date transaction between : ", return_SizePosition["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("number SizePosition transaction : ", return_SizePosition["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                    # # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                    # # print("test profit estimate : ", return_SizePosition["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # # print("test odds ratio estimate : ", return_SizePosition["test_odds_ratio"])
                                    # # print("test date transaction between : ", return_SizePosition["test_date_transaction_between"])
                                    # # # print(return_SizePosition["testData"]);  # 傳入測試數據集的計算結果;
                                    # # print("test profit total per share : ", return_SizePosition["testData"]["profit_total"])
                                    # # print("test Long Position profit total per share : ", return_SizePosition["testData"]["Long_Position_profit_total"])
                                    # # print("test Short Selling profit total per share : ", return_SizePosition["testData"]["Short_Selling_profit_total"])
                                    # # print("test profit positive per share : ", return_SizePosition["testData"]["profit_Positive"])
                                    # # print("test Long Position profit positive per share : ", return_SizePosition["testData"]["Long_Position_profit_Positive"])
                                    # # print("test Short Selling profit positive per share : ", return_SizePosition["testData"]["Short_Selling_profit_Positive"])
                                    # # print("test profit positive probability : ", return_SizePosition["testData"]["profit_Positive_probability"])
                                    # # print("test Long Position profit positive probability : ", return_SizePosition["testData"]["Long_Position_profit_Positive_probability"])
                                    # # print("test Short Selling profit positive probability : ", return_SizePosition["testData"]["Short_Selling_profit_Positive_probability"])
                                    # # print("test profit negative per share : ", return_SizePosition["testData"]["profit_Negative"])
                                    # # print("test Long Position profit negative per share : ", return_SizePosition["testData"]["Long_Position_profit_Negative"])
                                    # # print("test Short Selling profit negative per share : ", return_SizePosition["testData"]["Short_Selling_profit_Negative"])
                                    # # print("test profit negative probability : ", return_SizePosition["testData"]["profit_Negative_probability"])
                                    # # print("test Long Position profit negative probability : ", return_SizePosition["testData"]["Long_Position_profit_Negative_probability"])
                                    # # print("test Short Selling profit negative probability : ", return_SizePosition["testData"]["Short_Selling_profit_Negative_probability"])
                                    # # print("test average date transaction between : ", return_SizePosition["testData"]["average_date_transaction_between"])
                                    # # print("test Long Position average date transaction between : ", return_SizePosition["testData"]["Long_Position_average_date_transaction_between"])
                                    # # print("test Short Selling average date transaction between : ", return_SizePosition["testData"]["Short_Selling_average_date_transaction_between"])
                                    # # print("test number SizePosition transaction : ", return_SizePosition["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
                                    # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["P1_Array"])
                                    # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
                                    # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
                                    # # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"])
                                    # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                                    # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                                    # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
                                    #     for key, value in return_SizePosition["Coefficient"][0].items():
                                    #         # print("Key: {key}, Value: {value}")
                                    #         if isinstance(value, dict) and ("Long_Position" in value):
                                    #             if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
                                    #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
                                    #                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                                    #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                                    #                 weight_MarketTiming_Dict[str(key)] = {}
                                    #                 weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                                    #             # else:
                                    # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
                                    #     for key, value in return_SizePosition["Coefficient"][1].items():
                                    #         # print("Key: {key}, Value: {value}")
                                    #         if isinstance(value, dict) and ("Long_Position" in value):
                                    #             if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
                                    #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
                                    #                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                                    #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                                    #                 weight_PickStock_Dict[str(key)] = {}
                                    #                 weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
                                    #             # else:
                                    # return_SizePosition = None  # 釋放内存;
                                    # # investment_method == "Short_Selling"
                                    # return_SizePosition = SizePosition(
                                    #     training_data = testingData,
                                    #     testing_data = testingData,
                                    #     Pdata_0 = SizePosition_Pdata_0,  # [weight_MarketTiming_Dict, weight_PickStock_Dict],  # testingData["002611"]["Pdata_0"],
                                    #     weight = SizePosition_weight,  # [],  # testingData["002611"]["weight"],
                                    #     Plower = SizePosition_Plower,  # [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
                                    #     Pupper = SizePosition_Pupper,  # [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
                                    #     MarketTiming_Parameter = MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                                    #     PickStock_Parameter = PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;
                                    #     PickStock_ticker_symbol = PickStock_ticker_symbol_Array_testing_data_Short_Selling,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;  # PickStock_ticker_symbol_Array,
                                    #     SizePosition_fit_model = SizePosition_fit_model,
                                    #     PickStock = PickStock,
                                    #     PickStock_fit_model = PickStock_fit_model,
                                    #     MarketTiming = MarketTiming,
                                    #     MarketTiming_fit_model = MarketTiming_fit_model,
                                    #     Quantitative_Indicators_Function = Quantitative_Indicators_Function,
                                    #     investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                    # );
                                    # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
                                    # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
                                    # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
                                    #     for key, value in return_SizePosition["Coefficient"][0].items():
                                    #         # print("Key: {key}, Value: {value}")
                                    #         if isinstance(value, dict) and ("Short_Selling" in value):
                                    #             if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
                                    #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
                                    #                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                                    #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
                                    #                 weight_MarketTiming_Dict[str(key)] = {}
                                    #                 weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                                    #             # else:
                                    # if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
                                    #     for key, value in return_SizePosition["Coefficient"][1].items():
                                    #         # print("Key: {key}, Value: {value}")
                                    #         if isinstance(value, dict) and ("Short_Selling" in value):
                                    #             if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
                                    #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
                                    #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                                    #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
                                    #                 weight_PickStock_Dict[str(key)] = {}
                                    #                 weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
                                    #             # else:
                                    # return_SizePosition = None  # 釋放内存;
                                    # SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
                                    # # # print(SizePosition_Parameter_Array)
                                    # # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", SizePosition_Parameter_Array[0])  # 最優化計算之後得到的參數;
                                    # # print("optimization - coefficient 2 - weight_PickStock :", "\n", SizePosition_Parameter_Array[1])  # 最優化計算之後得到的參數;
                                    # # return_SizePosition_fit_model = SizePosition_fit_model(
                                    # #     testingData,
                                    # #     SizePosition_Parameter_Array[1],  # weight_MarketTiming_Dict,  # 股票擇時交易倉位占比;
                                    # #     SizePosition_Parameter_Array[2],  # weight_PickStock_Dict,  # 選股組合占比;
                                    # #     MarketTiming_Parameter_Dict,  # 按照擇時規則優化之後的參數字典;
                                    # #     PickStock_Parameter_Dict,  # 按照選股規則優化之後的參數字典;
                                    # #     PickStock_ticker_symbol_Array_testing_data_Long_Position,  # PickStock_ticker_symbol_Array,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                                    # #     PickStock,
                                    # #     PickStock_fit_model,
                                    # #     MarketTiming,
                                    # #     MarketTiming_fit_model,
                                    # #     Quantitative_Indicators_Function,
                                    # #     "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                    # # )
                                    # # print("y_profit = ", return_SizePosition_fit_model["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("y_Long_Position_profit = ", return_SizePosition_fit_model["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("y_Short_Selling_profit = ", return_SizePosition_fit_model["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # # print("y_loss = ", return_SizePosition_fit_model["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("y_Long_Position_loss = ", return_SizePosition_fit_model["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("y_Short_Selling_loss = ", return_SizePosition_fit_model["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    # # print("maximum_drawdown = ", return_SizePosition_fit_model["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("maximum_drawdown_Long_Position = ", return_SizePosition_fit_model["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("maximum_drawdown_Short_Selling = ", return_SizePosition_fit_model["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # # print("profit_total = ", return_SizePosition_fit_model["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                    # # print("Long_Position_profit_total = ", return_SizePosition_fit_model["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                    # # print("Short_Selling_profit_total = ", return_SizePosition_fit_model["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                    # # print("profit_Positive = ", return_SizePosition_fit_model["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("profit_Negative = ", return_SizePosition_fit_model["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("Long_Position_profit_Positive = ", return_SizePosition_fit_model["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("Long_Position_profit_Negative = ", return_SizePosition_fit_model["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("Short_Selling_profit_Positive = ", return_SizePosition_fit_model["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                    # # print("Short_Selling_profit_Negative = ", return_SizePosition_fit_model["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                    # # print("profit_Positive_probability = ", return_SizePosition_fit_model["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("profit_Negative_probability = ", return_SizePosition_fit_model["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("Long_Position_profit_Positive_probability = ", return_SizePosition_fit_model["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("Long_Position_profit_Negative_probability = ", return_SizePosition_fit_model["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("Short_Selling_profit_Positive_probability = ", return_SizePosition_fit_model["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                    # # print("Short_Selling_profit_Negative_probability = ", return_SizePosition_fit_model["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                    # # print("average_price_amplitude_date_transaction = ", return_SizePosition_fit_model["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("Long_Position_average_price_amplitude_date_transaction = ", return_SizePosition_fit_model["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("Short_Selling_average_price_amplitude_date_transaction = ", return_SizePosition_fit_model["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                    # # print("average_volume_turnover_date_transaction = ", return_SizePosition_fit_model["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("Long_Position_average_volume_turnover_date_transaction = ", return_SizePosition_fit_model["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("Short_Selling_average_volume_turnover_date_transaction = ", return_SizePosition_fit_model["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                    # # print("average_date_transaction_between = ", return_SizePosition_fit_model["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                    # # print("Long_Position_average_date_transaction_between = ", return_SizePosition_fit_model["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("Short_Selling_average_date_transaction_between = ", return_SizePosition_fit_model["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                    # # print("number_SizePosition_transaction = ", return_SizePosition_fit_model["number_PickStock_transaction"])  # 交易過股票的總隻數;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"])
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                    # # # print(return_SizePosition_fit_model["SizePosition_transaction_sequence"]["002611"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                    # # return_SizePosition_fit_model = None  # 釋放内存;

                                    # 記錄推進分析交易信息的序列;
                                    Long_Position_testing_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
                                    # if isinstance(testingData, dict) and int(len(testingData)) > int(0):
                                    #     for t in range(int(0), int(len(testing_data_ticker_symbol_Array)), int(1)):
                                    #         if not ((testing_data_ticker_symbol_Array[t] is None) or numpy.isnan(testing_data_ticker_symbol_Array[t])):
                                    #             if not (str(testing_data_ticker_symbol_Array[t]) in testingData):
                                    #                 if not (str(testing_data_ticker_symbol_Array[t]) in Long_Position_testing_data_transaction_sequence_Dict):
                                    #                     Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])] = {}
                                    #                     # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                    #                     Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["revenue_and_expenditure_records_date_transaction"] = []  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                    #                     # 做多（Long Position）記錄;
                                    #                     Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Long_Position_profit_date_transaction"] = []  # 每兩次對衝交易價格差值利潤，向量;
                                    #                     # Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Long_Position_price_amplitude_date_transaction"] = []  # 兩次對衝交易日成交價振幅平方和，向量;
                                    #                     # Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Long_Position_volume_turnover_date_transaction"] = []  # 兩次對衝交易日成交量（換手率）向量;
                                    #                     # Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Long_Position_date_transaction_between"] = []  # 兩次對衝交易間隔日長，向量;
                                    #                     Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Long_Position_date_transaction"] = []  # 按規則執行交易的日期，向量;
                                    #                     Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Index_date_transaction_Long_Position"] = int(0)  # 每兩次對衝交易序號標識;
                                    #                     Long_Position_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Long_Position_drawdown_date_transaction"] = []  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                    Short_Selling_testing_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
                                    # if isinstance(testingData, dict) and int(len(testingData)) > int(0):
                                    #     for t in range(int(0), int(len(testing_data_ticker_symbol_Array)), int(1)):
                                    #         if not ((testing_data_ticker_symbol_Array[t] is None) or numpy.isnan(testing_data_ticker_symbol_Array[t])):
                                    #             if not (str(testing_data_ticker_symbol_Array[t]) in testingData):
                                    #                 if not (str(testing_data_ticker_symbol_Array[t]) in Short_Selling_testing_data_transaction_sequence_Dict):
                                    #                     Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])] = {}
                                    #                     # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                    #                     Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["revenue_and_expenditure_records_date_transaction"] = []  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                    #                     # 做空（Short Selling）記錄;
                                    #                     Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Short_Selling_profit_date_transaction"] = []  # 每兩次對衝交易價格差值利潤，向量;
                                    #                     # Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Short_Selling_price_amplitude_date_transaction"] = []  # 兩次對衝交易日成交價振幅平方和，向量;
                                    #                     # Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Short_Selling_volume_turnover_date_transaction"] = []  # 兩次對衝交易日成交量（換手率）向量;
                                    #                     # Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Short_Selling_date_transaction_between"] = []  # 兩次對衝交易間隔日長，向量;
                                    #                     Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Short_Selling_date_transaction"] = []  # 按規則執行交易的日期，向量;
                                    #                     Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Index_date_transaction_Short_Selling"] = int(0)  # 每兩次對衝交易序號標識;
                                    #                     Short_Selling_testing_data_transaction_sequence_Dict[str(testing_data_ticker_symbol_Array[t])]["Short_Selling_drawdown_date_transaction"] = []  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                    # 祇取測試數據集的最後一個交易日數據，代入交易規則，判斷交易狀態;
                                    # 依照選股規則挑選出的股票，計算（融資做多 buying long）交易利潤;
                                    t = int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))  # int(int(minimum_dates_transaction_testing_data) - int(1))  # int(int(maximum_dates_transaction_testing_data) - int(1))  # int(0)
                                    if investment_method == "Long_Position_and_Short_Selling" or investment_method == "Long_Position":

                                        if int(int(t) + int(1)) > int(0) and int(int(t) + int(1)) <= int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)):
                                            if isinstance(PickStock_ticker_symbol_Array_testing_data_Long_Position[t], list) and int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[t])) > int(0):
                                                # 依照選股規則挑選出的股票，計算（融資做多 buying long）交易利潤;
                                                if ("Long_Position" in PickStock_Parameter_Dict):
                                                    g_min = int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[t]))]))
                                                else:
                                                    g_min = int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[t]))
                                                for g in range(int(0), int(g_min), int(1)):
                                                    if int(int(g) + int(1)) >= int(1) and int(int(g) + int(1)) <= int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[t])):
                                                        if isinstance(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g], str) and int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])) > int(0):
                                                            if isinstance(testingData, dict) and (PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g] in testingData) and isinstance(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]], dict) and int(len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]])) > int(0):

                                                                # 判斷循環遍歷「t」小於序列數據（1 維數組）的最大長度，並跳過超出的部分;
                                                                if int(int(t) + int(1)) <= int(min([len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["date_transaction"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["turnover_volume"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["opening_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["close_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["low_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["high_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["focus"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["amplitude"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["amplitude_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["opening_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["closing_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["low_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["high_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["turnover_volume_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["opening_price_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["closing_price_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["closing_minus_opening_price_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["high_price_proportion"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["low_price_proportion"])])):
                                                                    if (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in MarketTiming_Parameter_Dict) and ("Long_Position" in MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]) and int(int(t) + int(1)) >= int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)):

                                                                        x0 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["date_transaction"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 交易日期;
                                                                        x1 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["turnover_volume"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量;
                                                                        # x2 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["turnover_amount"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交總金額;
                                                                        x3 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["opening_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤成交價;
                                                                        x4 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["close_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤成交價;
                                                                        x5 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["low_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低成交價;
                                                                        x6 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["high_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最高成交價;
                                                                        x7 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["focus"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價重心;
                                                                        x8 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["amplitude"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價絕對振幅;
                                                                        x9 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["amplitude_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價相對振幅（%）;
                                                                        x10 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["opening_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                                                        x11 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["closing_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                                                        x12 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["low_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                                                        x13 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["high_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                                                        x14 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["turnover_volume_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量的成長率;
                                                                        x15 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤價的成長率;
                                                                        x16 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["closing_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價的成長率;
                                                                        x17 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["closing_minus_opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價減開盤價的成長率;
                                                                        x18 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["high_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價和開盤價裏的最大值占最高價的比例;
                                                                        x19 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["low_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低價占收盤價和開盤價裏的最小值的比例;
                                                                        # x20 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["turnover_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量換手率;
                                                                        # x21 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["price_earnings"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股收益（公司經營利潤率 ÷ 股本）;
                                                                        # x22 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["book_value_per_share"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股净值（公司净資產 ÷ 股本）;
                                                                        # x23 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["capitalization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 總市值;
                                                                        # x24 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["moving_average_5"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 5 日滑動平均缐;
                                                                        # x25 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["moving_average_10"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 10 日滑動平均缐;
                                                                        # x26 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["moving_average_20"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 20 日滑動平均缐;
                                                                        # x27 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["moving_average_30"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 30 日滑動平均缐;
                                                                        # x_Pdata_0 = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Pdata_0"]
                                                                        # x_Plower = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Plower"]
                                                                        # x_Pupper = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["Pupper"]
                                                                        # x_weight = testingData[PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]]["weight"]

                                                                        # 記錄每個交易日的回撤值序列;
                                                                        risk_threshold_drawdown_loss = float(MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][3])  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                        # risk_threshold_drawdown_loss = float(0.0)
                                                                        risk_drawdown_loss_Long_Position = float(float(risk_threshold_drawdown_loss) + float(0.1))  # 回撤比例初值，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                                                        # 標示融資做多 buying long 兩次對衝交易滑框的左邊（首，第一次，買入交易 buy）或右邊（尾，第二次，賣出交易 sell），取值爲 1 時表示滑框的左邊（首，第一次，買入交易 buy），取值爲 0 時表示滑框的右邊（尾，第二次，賣出交易 sell），預設值爲 1 ，即取滑框的左邊（首，第一次，買入交易 buy）;
                                                                        Long_Position_sliding_frame = int(1)  # 標示融資做多 buying long 兩次對衝交易滑框的左邊（首，第一次，買入交易 buy）或右邊（尾，第二次，賣出交易 sell），取值爲 1 時表示滑框的左邊（首，第一次，買入交易 buy），取值爲 0 時表示滑框的右邊（尾，第二次，賣出交易 sell），預設值爲 1 ，即取滑框的左邊（首，第一次，買入交易 buy）;

                                                                        # 判斷、執行做多 buying long 兩次對衝交易滑框的右邊（尾，第二次，賣出交易 sell）;
                                                                        if isinstance(stepping_sequence_Array, list) and int(len(stepping_sequence_Array)) > int(0):
                                                                            if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))], dict) and ("testing_transaction" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]):
                                                                                # 依照選股規則挑選出的股票，計算（融資做多 buying long）交易利潤;
                                                                                if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"], dict) and ("Long_Position" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]):
                                                                                    if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"], dict) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"]):
                                                                                        if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict) and ("Long_Position_date_transaction" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                            if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list) and int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) >= int(0):
                                                                                                if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))], list) and int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))])) >= int(3):
                                                                                                    if str(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][1]) == "buy":

                                                                                                        # 標示融資做多 buying long 兩次對衝交易滑框的左邊（首，第一次，買入交易 buy）或右邊（尾，第二次，賣出交易 sell），取值爲 1 時表示滑框的左邊（首，第一次，買入交易 buy），取值爲 0 時表示滑框的右邊（尾，第二次，賣出交易 sell），預設值爲 1 ，即取滑框的左邊（首，第一次，買入交易 buy）;
                                                                                                        # 融資做多 buying long 兩次對衝交易類型，從滑框的左邊（首，第一次，買入交易 buy）修改爲滑框的右邊（尾，第二次，賣出交易 sell）;
                                                                                                        if int(Long_Position_sliding_frame) >= int(1):
                                                                                                            Long_Position_sliding_frame *= int(0)
                                                                                                            Long_Position_sliding_frame += int(0)

                                                                                                        risk_drawdown_loss_Long_Position *= float(0.0)
                                                                                                        risk_drawdown_loss_Long_Position += float(float(x3[int(int(len(x3)) - int(1))]) / float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][2]))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                        # risk_drawdown_loss_Long_Position += float(float(abs(float(x3[int(int(len(x3)) - int(1))]))) / float(abs(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][2]))))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                                                                                        # 記錄做多模式每個交易日的回撤值序列;
                                                                                                        drawdown_Array_Long_Position.append(risk_drawdown_loss_Long_Position)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                                                                                        # if float(risk_drawdown_loss_Long_Position) <= float(risk_threshold_drawdown_loss) or int(k) == int(minimum_dates_transaction):
                                                                                                        if float(risk_drawdown_loss_Long_Position) <= float(risk_threshold_drawdown_loss):

                                                                                                            # 做多（Long Position）記錄;
                                                                                                            if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (not ((str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict))):
                                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])] = {}
                                                                                                            if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict):
                                                                                                                # 每兩次對衝交易序號標識;
                                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Index_date_transaction_Long_Position"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                                                # 按規則執行第二次對衝賣出（融資做多 buying long）交易的日期;
                                                                                                                if not (("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list)):
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"] = []
                                                                                                                if ("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list):
                                                                                                                    y_F_Long_Position_I = [None] * int(16)
                                                                                                                    y_F_Long_Position_I[0] = x0[int(int(len(x0)) - int(1))]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                                    y_F_Long_Position_I[1] = str("sell")  # 買入或賣出;
                                                                                                                    y_F_Long_Position_I[2] = x3[int(int(len(x3)) - int(1))]  # 成交價;
                                                                                                                    if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in SizePosition_Parameter_Array[0]) and ("Long_Position" in SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in SizePosition_Parameter_Array[1]) and ("Long_Position" in SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                                                        y_F_Long_Position_I[3] = [SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"], SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"]]  # 倉位;
                                                                                                                    else:
                                                                                                                        y_F_Long_Position_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                                    if ("Index_date_transaction_Long_Position" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                                                        y_F_Long_Position_I[4] = int(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Index_date_transaction_Long_Position"])  # 每兩次對衝成交序號標識;
                                                                                                                    else:
                                                                                                                        y_F_Long_Position_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                                    y_F_Long_Position_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                                    y_F_Long_Position_I[6] = x0[int(int(len(x0)) - int(1))]  # 交易日（datetime.date 類型）;
                                                                                                                    y_F_Long_Position_I[7] = x1[int(int(len(x1)) - int(1))]  # 當日總成交量（turnover volume）;
                                                                                                                    y_F_Long_Position_I[8] = x3[int(int(len(x3)) - int(1))]  # 當日開盤（opening）成交價;
                                                                                                                    y_F_Long_Position_I[9] = x4[int(int(len(x4)) - int(1))]  # 當日收盤（closing）成交價;
                                                                                                                    y_F_Long_Position_I[10] = x5[int(int(len(x5)) - int(1))]  # 當日最低（low）成交價;
                                                                                                                    y_F_Long_Position_I[11] = x6[int(int(len(x6)) - int(1))]  # 當日最高（high）成交價;
                                                                                                                    # y_F_Long_Position_I[12] = x2[int(int(len(x2)) - int(1))]  # 當日總成交金額（turnover amount）;
                                                                                                                    # y_F_Long_Position_I[13] = x20[int(int(len(x20)) - int(1))]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                                    # y_F_Long_Position_I[14] = x21[int(int(len(x21)) - int(1))]  # 當日每股收益（price earnings）;
                                                                                                                    # y_F_Long_Position_I[15] = x22[int(int(len(x22)) - int(1))]  # 當日每股净值（book value per share）;
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"].append(y_F_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                    y_F_Long_Position_I = None  # 釋放内存;
                                                                                                                # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                                                if not (("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                                                if ("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                    y_G_Long_Position_I = float(float(+1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                    y_G_Long_Position_I = None  # 釋放内存;
                                                                                                                # 每兩次對衝交易差價利潤初值;
                                                                                                                if not (("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"], list)):
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"] = []
                                                                                                                if ("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"], list):
                                                                                                                    y_A_Long_Position_I_2 = float(float(+1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                                    y_A_Long_Position_I = float(y_A_Long_Position_I_2)
                                                                                                                    # y_A_Long_Position_I *= float(0.0)
                                                                                                                    # y_A_Long_Position_I += float(y_A_Long_Position_I_2)
                                                                                                                    # y_A_Long_Position_I += float(x3[t + 1] - x3[k + 1])
                                                                                                                    # y_A_Long_Position_I = float(x3[t + 1] - x3[k + 1])
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"].append(y_A_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                    y_A_Long_Position_I = None  # 釋放内存;

                                                                                                                # 記錄做多模式本輪對衝交易的回撤值序列;
                                                                                                                if isinstance(drawdown_Array_Long_Position, list) and int(len(drawdown_Array_Long_Position)) >= int(0):
                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["drawdown"] = drawdown_Array_Long_Position

                                                                                                        # if float(risk_drawdown_loss_Long_Position) > float(risk_threshold_drawdown_loss) and int(int(k) + int(1)) < int(minimum_dates_transaction):
                                                                                                        if float(risk_drawdown_loss_Long_Position) > float(risk_threshold_drawdown_loss):

                                                                                                            # 計算該時間日期切面的交易信息;
                                                                                                            return_MarketTiming_fit_model = MarketTiming_fit_model(
                                                                                                                {
                                                                                                                    str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) : {
                                                                                                                        "date_transaction": x0,
                                                                                                                        "turnover_volume": x1,
                                                                                                                        "opening_price": x3,
                                                                                                                        "close_price": x4,
                                                                                                                        "low_price": x5,
                                                                                                                        "high_price": x6,
                                                                                                                        "focus": x7,
                                                                                                                        "amplitude": x8,
                                                                                                                        "amplitude_rate": x9,
                                                                                                                        "opening_price_Standardization": x10,
                                                                                                                        "closing_price_Standardization": x11,
                                                                                                                        "low_price_Standardization": x12,
                                                                                                                        "high_price_Standardization": x13,
                                                                                                                        "turnover_volume_growth_rate": x14,
                                                                                                                        "opening_price_growth_rate": x15,
                                                                                                                        "closing_price_growth_rate": x16,
                                                                                                                        "closing_minus_opening_price_growth_rate": x17,
                                                                                                                        "high_price_proportion": x18,
                                                                                                                        "low_price_proportion": x19
                                                                                                                        # "turnover_rate": x20
                                                                                                                    }
                                                                                                                },
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][1],  # float(+1.0),  # P2,  # 買入閾值;
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][2],  # float(-1.0),  # P3,  # 賣出閾值;
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][3],  # float(0.0),  # P4,  # risk threshold drawdown loss; # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                                Quantitative_Indicators_Function,
                                                                                                                "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                                                                                            )
                                                                                                            # return_MarketTiming_fit_model == {
                                                                                                            #     "ticker_symbol" : {
                                                                                                            #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
                                                                                                            #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
                                                                                                            #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
                                                                                                            #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
                                                                                                            #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
                                                                                                            #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
                                                                                                            #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                                                                                            #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                                                                                            #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                                                                                            #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                                                                                            #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                                                                                            #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                                                                                            #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                                                                                            #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                                                                                            #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                                                                                            #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                                                                                            #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                                                                                            #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                                                                                            #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
                                                                                                            #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
                                                                                                            #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                                                                                            #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                                                                                            #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                                                                                            #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
                                                                                                            #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
                                                                                                            #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
                                                                                                            #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
                                                                                                            #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                                                            #         "revenue_and_expenditure_records_date_transaction": y_G  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                                                            #     }
                                                                                                            # }
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                                                            if isinstance(return_MarketTiming_fit_model, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in return_MarketTiming_fit_model):
                                                                                                                if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict):
                                                                                                                    if ("Long_Position_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and ("Short_Selling_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):

                                                                                                                        # 判斷是否進行（融券做空 short selling）對衝交易的第一次賣出交易;
                                                                                                                        if int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) == int(0) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_date_transaction"])) == int(1):
                                                                                                                            if return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(0)][0] == return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][0] and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(0)][1]) == str("sell") and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][1]) == str("buy") and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]) > float(0.0) and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))]) < float(0.0) and float(abs(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_date_transaction"])) - int(1))])) == float(0.0):

                                                                                                                                # 做多（Long Position）記錄;
                                                                                                                                if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (not ((str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict))):
                                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])] = {}
                                                                                                                                if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict):
                                                                                                                                    # 每兩次對衝交易序號標識;
                                                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Index_date_transaction_Long_Position"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                                                                    # 按規則執行第二次對衝賣出（融資做多 buying long）交易的日期;
                                                                                                                                    if not (("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list)):
                                                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"] = []
                                                                                                                                    if ("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list):
                                                                                                                                        if ("Short_Selling_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"], list):
                                                                                                                                            if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))], list):
                                                                                                                                                y_F_Long_Position_I = [None] * int(16)
                                                                                                                                                y_F_Long_Position_I[0] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][0]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                                                                y_F_Long_Position_I[1] = str("sell")  # str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][1])  # 買入或賣出;
                                                                                                                                                y_F_Long_Position_I[2] = return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(0)][2]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][2]  # 成交價;
                                                                                                                                                if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in SizePosition_Parameter_Array[0]) and ("Long_Position" in SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in SizePosition_Parameter_Array[1]) and ("Long_Position" in SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                                                                                    y_F_Long_Position_I[3] = [SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"], SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"]]  # 倉位;
                                                                                                                                                else:
                                                                                                                                                    y_F_Long_Position_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                                                                if ("Index_date_transaction_Long_Position" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                                                                                    y_F_Long_Position_I[4] = int(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Index_date_transaction_Long_Position"])  # 每兩次對衝成交序號標識;
                                                                                                                                                else:
                                                                                                                                                    y_F_Long_Position_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                                                                y_F_Long_Position_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                                                                y_F_Long_Position_I[6] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][6]  # 交易日（datetime.date 類型）;
                                                                                                                                                y_F_Long_Position_I[7] = x1[int(int(len(x1)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][7]  # 當日總成交量（turnover volume）;
                                                                                                                                                y_F_Long_Position_I[8] = x3[int(int(len(x3)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][8]  # 當日開盤（opening）成交價;
                                                                                                                                                y_F_Long_Position_I[9] = x4[int(int(len(x4)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][9]  # 當日收盤（closing）成交價;
                                                                                                                                                y_F_Long_Position_I[10] = x5[int(int(len(x5)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][10]  # 當日最低（low）成交價;
                                                                                                                                                y_F_Long_Position_I[11] = x6[int(int(len(x6)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][11]  # 當日最高（high）成交價;
                                                                                                                                                # y_F_Long_Position_I[12] = x2[int(int(len(x2)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][1]  # 當日總成交金額（turnover amount）;
                                                                                                                                                # y_F_Long_Position_I[13] = x20[int(int(len(x20)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][19]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                                                                # y_F_Long_Position_I[14] = x21[int(int(len(x21)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][20]  # 當日每股收益（price earnings）;
                                                                                                                                                # y_F_Long_Position_I[15] = x22[int(int(len(x22)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) - int(1))][21]  # 當日每股净值（book value per share）;
                                                                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"].append(y_F_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                                y_F_Long_Position_I = None  # 釋放内存;
                                                                                                                                    # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                                                                    if not (("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                                                                    if ("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                                        # y_G_Long_Position_I = float(float(+1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                                                        # Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                                            y_G_Long_Position_I = float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])  # float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))])
                                                                                                                                            Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                            y_G_Long_Position_I = None  # 釋放内存;
                                                                                                                                    # 每兩次對衝交易差價利潤初值;
                                                                                                                                    if not (("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"], list)):
                                                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"] = []
                                                                                                                                    if ("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"], list):
                                                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                                            y_A_Long_Position_I_2 = float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])
                                                                                                                                            # y_A_Long_Position_I_2 = float(float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]) + float(y_A_Long_Position_I))
                                                                                                                                            y_A_Long_Position_I = float(y_A_Long_Position_I_2)
                                                                                                                                            # y_A_Long_Position_I *= float(0.0)
                                                                                                                                            # y_A_Long_Position_I += float(y_A_Long_Position_I_2)
                                                                                                                                            # y_A_Long_Position_I += float(x3[t + 1] - x3[k + 1])
                                                                                                                                            # y_A_Long_Position_I = float(x3[t + 1] - x3[k + 1])
                                                                                                                                            Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"].append(y_A_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                            y_A_Long_Position_I = None  # 釋放内存;

                                                                                                                                    # 記錄做多模式本輪對衝交易的回撤值序列;
                                                                                                                                    if isinstance(drawdown_Array_Long_Position, list) and int(len(drawdown_Array_Long_Position)) >= int(0):
                                                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["drawdown"] = drawdown_Array_Long_Position

                                                                                                            return_MarketTiming_fit_model = None  # 釋放内存;

                                                                        # 判斷、執行做多 buying long 兩次對衝交易滑框的左邊（首，第一次，買入交易 buy）;
                                                                        if int(Long_Position_sliding_frame) >= int(1):

                                                                            # 計算該時間日期切面的交易信息;
                                                                            return_MarketTiming_fit_model = MarketTiming_fit_model(
                                                                                {
                                                                                    str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) : {
                                                                                        "date_transaction": x0,
                                                                                        "turnover_volume": x1,
                                                                                        "opening_price": x3,
                                                                                        "close_price": x4,
                                                                                        "low_price": x5,
                                                                                        "high_price": x6,
                                                                                        "focus": x7,
                                                                                        "amplitude": x8,
                                                                                        "amplitude_rate": x9,
                                                                                        "opening_price_Standardization": x10,
                                                                                        "closing_price_Standardization": x11,
                                                                                        "low_price_Standardization": x12,
                                                                                        "high_price_Standardization": x13,
                                                                                        "turnover_volume_growth_rate": x14,
                                                                                        "opening_price_growth_rate": x15,
                                                                                        "closing_price_growth_rate": x16,
                                                                                        "closing_minus_opening_price_growth_rate": x17,
                                                                                        "high_price_proportion": x18,
                                                                                        "low_price_proportion": x19
                                                                                        # "turnover_rate": x20
                                                                                    }
                                                                                },
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][1],  # float(+1.0),  # P2,  # 買入閾值;
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][2],  # float(-1.0),  # P3,  # 賣出閾值;
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"][3],  # float(0.0),  # P4,  # risk threshold drawdown loss; # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                Quantitative_Indicators_Function,
                                                                                "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                                                            )
                                                                            # return_MarketTiming_fit_model == {
                                                                            #     "ticker_symbol" : {
                                                                            #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
                                                                            #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
                                                                            #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
                                                                            #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
                                                                            #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
                                                                            #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
                                                                            #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                                                            #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                                                            #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                                                            #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                                                            #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                                                            #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                                                            #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                                                            #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                                                            #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                                                            #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                                                            #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                                                            #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                                                            #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
                                                                            #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
                                                                            #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                                                            #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                                                            #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                                                            #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
                                                                            #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
                                                                            #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                                                            #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                                                            #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                                                            #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
                                                                            #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
                                                                            #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
                                                                            #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
                                                                            #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                            #         "revenue_and_expenditure_records_date_transaction": y_G  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                            #     }
                                                                            # }
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                            if isinstance(return_MarketTiming_fit_model, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in return_MarketTiming_fit_model):
                                                                                if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict):
                                                                                    if ("Long_Position_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and ("Short_Selling_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):

                                                                                        # 判斷是否進行（融資做多 buying long）第一次對衝交易的買入交易;
                                                                                        if int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Short_Selling_date_transaction"])) == int(0) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"])) == int(1):
                                                                                            if return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(0)][0] == return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][0] and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(0)][1]) == str("buy") and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][1]) == str("sell") and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]) < float(0.0) and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))]) > float(0.0) and float(abs(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"])) - int(1))])) == float(0.0):

                                                                                                # 清空重置做多模式每個交易日的回撤值的記錄序列：drawdown_Array_Long_Position ;
                                                                                                drawdown_Array_Long_Position.clear()  # 函數 list.clear() 表示移除列表（list）中的所有元素，從而使列表（list）變爲空;

                                                                                                # 做多（Long Position）記錄;
                                                                                                if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (not ((str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict))):
                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])] = {}
                                                                                                if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])], dict):
                                                                                                    # 每兩次對衝交易序號標識;
                                                                                                    Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Index_date_transaction_Long_Position"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                                    # 按規則執行第一次對衝買入（融資做多 buying long）交易的日期;
                                                                                                    if not (("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list)):
                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"] = []
                                                                                                    if ("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list):
                                                                                                        if ("Long_Position_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"], list):
                                                                                                            if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))], list):
                                                                                                                y_F_Long_Position_I = [None] * int(16)
                                                                                                                y_F_Long_Position_I[0] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][0]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                                y_F_Long_Position_I[1] = str("buy")  # str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][1])  # 買入或賣出;
                                                                                                                y_F_Long_Position_I[2] = return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(0)][2]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][2]  # 成交價;
                                                                                                                if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in SizePosition_Parameter_Array[0]) and ("Long_Position" in SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and (str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g]) in SizePosition_Parameter_Array[1]) and ("Long_Position" in SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                                                    y_F_Long_Position_I[3] = [SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"], SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position"]]  # 倉位;
                                                                                                                else:
                                                                                                                    y_F_Long_Position_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                                if ("Index_date_transaction_Long_Position" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]):
                                                                                                                    y_F_Long_Position_I[4] = int(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Index_date_transaction_Long_Position"])  # 每兩次對衝成交序號標識;
                                                                                                                else:
                                                                                                                    y_F_Long_Position_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                                y_F_Long_Position_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                                y_F_Long_Position_I[6] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][6]  # 交易日（datetime.date 類型）;
                                                                                                                y_F_Long_Position_I[7] = x1[int(int(len(x1)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][7]  # 當日總成交量（turnover volume）;
                                                                                                                y_F_Long_Position_I[8] = x3[int(int(len(x3)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][8]  # 當日開盤（opening）成交價;
                                                                                                                y_F_Long_Position_I[9] = x4[int(int(len(x4)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][9]  # 當日收盤（closing）成交價;
                                                                                                                y_F_Long_Position_I[10] = x5[int(int(len(x5)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][10]  # 當日最低（low）成交價;
                                                                                                                y_F_Long_Position_I[11] = x6[int(int(len(x6)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][11]  # 當日最高（high）成交價;
                                                                                                                # y_F_Long_Position_I[12] = x2[int(int(len(x2)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][1]  # 當日總成交金額（turnover amount）;
                                                                                                                # y_F_Long_Position_I[13] = x20[int(int(len(x20)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][19]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                                # y_F_Long_Position_I[14] = x21[int(int(len(x21)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][20]  # 當日每股收益（price earnings）;
                                                                                                                # y_F_Long_Position_I[15] = x22[int(int(len(x22)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"])) - int(1))][21]  # 當日每股净值（book value per share）;
                                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_date_transaction"].append(y_F_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                y_F_Long_Position_I = None  # 釋放内存;

                                                                                                    # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                                    if not (("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                                    if ("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                        # y_G_Long_Position_I = float(float(-1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                        # Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                            y_G_Long_Position_I = float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])  # float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))])
                                                                                                            Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                            y_G_Long_Position_I = None  # 釋放内存;

                                                                                                    # 每兩次對衝交易差價利潤初值;
                                                                                                    if not (("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"], list)):
                                                                                                        Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"] = []
                                                                                                    if ("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"], list):
                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                            y_A_Long_Position_I = float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])
                                                                                                            # y_A_Long_Position_I *= float(0.0)
                                                                                                            # y_A_Long_Position_I += float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"])) - int(1))])
                                                                                                            # y_A_Long_Position_I += float(float(0.0) - float(x3[int(len(x3))]))
                                                                                                            # y_A_Long_Position_I = float(float(0.0) - float(x3[int(len(x3))]))
                                                                                                            Long_Position_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Long_Position[t][g])]["Long_Position_profit_date_transaction"].append(y_A_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                            y_A_Long_Position_I = None  # 釋放内存;

                                                                            return_MarketTiming_fit_model = None  # 釋放内存;

                                                                        Long_Position_sliding_frame = None  # 釋放内存;
                                                                        risk_drawdown_loss_Long_Position = None  # 釋放内存;

                                                                        # 釋放内存;
                                                                        x0 = None
                                                                        x1 = None
                                                                        x3 = None
                                                                        x4 = None
                                                                        x5 = None
                                                                        x6 = None
                                                                        x7 = None
                                                                        x8 = None
                                                                        x9 = None
                                                                        x10 = None
                                                                        x11 = None
                                                                        x12 = None
                                                                        x13 = None
                                                                        x14 = None
                                                                        x15 = None
                                                                        x16 = None
                                                                        x17 = None
                                                                        x18 = None
                                                                        x19 = None
                                                                        # x20 = None
                                                                        # x21 = None
                                                                        # x22 = None
                                                                        # x23 = None
                                                                        # x24 = None
                                                                        # x25 = None
                                                                        # x26 = None
                                                                        # x27 = None
                                                                        # x_Pdata_0 = None
                                                                        # x_Plower = None
                                                                        # x_Pupper = None
                                                                        # x_weight = None

                                    t = None  # 釋放内存;

                                    # 依照選股規則挑選出的股票，計算（融券做空 short selling）交易利潤;
                                    t = int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))  # int(int(minimum_dates_transaction_testing_data) - int(1))  # int(int(maximum_dates_transaction_testing_data) - int(1))  # int(0)
                                    if investment_method == "Long_Position_and_Short_Selling" or investment_method == "Short_Selling":

                                        if int(int(t) + int(1)) > int(0) and int(int(t) + int(1)) <= int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)):
                                            if isinstance(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t], list) and int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t])) > int(0):
                                                # 依照選股規則挑選出的股票，計算（融券做空 short selling）交易利潤;
                                                if ("Short_Selling" in PickStock_Parameter_Dict):
                                                    g_max = int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))]))
                                                else:
                                                    g_max = int(1)
                                                for g in range(int(int(g_max) - int(1)), int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t])), int(1)):
                                                    if int(int(g) + int(1)) >= int(1) and int(int(g) + int(1)) <= int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t])):
                                                        if isinstance(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g], str) and int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])) > int(0):
                                                            if isinstance(testingData, dict) and (PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g] in testingData) and isinstance(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]], dict) and int(len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]])) > int(0):

                                                                # 判斷循環遍歷「t」小於序列數據（1 維數組）的最大長度，並跳過超出的部分;
                                                                if int(int(t) + int(1)) <= int(min([len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["date_transaction"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["turnover_volume"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["opening_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["close_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["low_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["high_price"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["focus"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["amplitude"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["amplitude_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["opening_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["closing_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["low_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["high_price_Standardization"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["turnover_volume_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["opening_price_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["closing_price_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["closing_minus_opening_price_growth_rate"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["high_price_proportion"]), len(testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["low_price_proportion"])])):
                                                                    if (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in MarketTiming_Parameter_Dict) and ("Short_Selling" in MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]) and int(int(t) + int(1)) >= int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)):

                                                                        x0 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["date_transaction"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 交易日期;
                                                                        x1 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["turnover_volume"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量;
                                                                        # x2 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["turnover_amount"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交總金額;
                                                                        x3 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["opening_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤成交價;
                                                                        x4 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["close_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤成交價;
                                                                        x5 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["low_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低成交價;
                                                                        x6 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["high_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最高成交價;
                                                                        x7 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["focus"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價重心;
                                                                        x8 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["amplitude"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價絕對振幅;
                                                                        x9 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["amplitude_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價相對振幅（%）;
                                                                        x10 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["opening_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                                                        x11 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["closing_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                                                        x12 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["low_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                                                        x13 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["high_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                                                        x14 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["turnover_volume_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量的成長率;
                                                                        x15 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤價的成長率;
                                                                        x16 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["closing_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價的成長率;
                                                                        x17 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["closing_minus_opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價減開盤價的成長率;
                                                                        x18 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["high_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價和開盤價裏的最大值占最高價的比例;
                                                                        x19 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["low_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低價占收盤價和開盤價裏的最小值的比例;
                                                                        # x20 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["turnover_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量換手率;
                                                                        # x21 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["price_earnings"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股收益（公司經營利潤率 ÷ 股本）;
                                                                        # x22 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["book_value_per_share"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股净值（公司净資產 ÷ 股本）;
                                                                        # x23 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["capitalization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 總市值;
                                                                        # x24 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["moving_average_5"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 5 日滑動平均缐;
                                                                        # x25 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["moving_average_10"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 10 日滑動平均缐;
                                                                        # x26 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["moving_average_20"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 20 日滑動平均缐;
                                                                        # x27 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["moving_average_30"][int(int(t) - int(int(MarketTiming_Parameter_Dict[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 30 日滑動平均缐;
                                                                        # x_Pdata_0 = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Pdata_0"]
                                                                        # x_Plower = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Plower"]
                                                                        # x_Pupper = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["Pupper"]
                                                                        # x_weight = testingData[PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]]["weight"]

                                                                        # 記錄每個交易日的回撤值序列;
                                                                        risk_threshold_drawdown_loss = float(MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][3])  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                        # risk_threshold_drawdown_loss = float(0.0)
                                                                        risk_drawdown_loss_Short_Selling = float(float(risk_threshold_drawdown_loss) + float(0.1))  # 回撤比例初值，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                                                        # 標示融券做空 short selling 兩次對衝交易滑框的左邊（首，第一次，賣出交易 sell）或右邊（尾，第二次，買入交易 buy），取值爲 1 時表示滑框的左邊（首，第一次，賣出交易 sell），取值爲 0 時表示滑框的右邊（尾，第二次，買入交易 buy），預設值爲 1 ，即取滑框的左邊（首，第一次，賣出交易 sell）;
                                                                        Short_Selling_sliding_frame = int(1)  # 標示融券做空 short selling 兩次對衝交易滑框的左邊（首，第一次，賣出交易 sell）或右邊（尾，第二次，買入交易 buy），取值爲 1 時表示滑框的左邊（首，第一次，賣出交易 sell），取值爲 0 時表示滑框的右邊（尾，第二次，買入交易 buy），預設值爲 1 ，即取滑框的左邊（首，第一次，賣出交易 sell）;

                                                                        # 判斷、執行融券做空 short selling 兩次對衝交易滑框的右邊（尾，第二次，買入交易 buy）;
                                                                        if isinstance(stepping_sequence_Array, list) and int(len(stepping_sequence_Array)) > int(0):
                                                                            if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))], dict) and ("testing_transaction" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]):
                                                                                # 依照選股規則挑選出的股票，計算（融券做空 short selling）交易利潤;
                                                                                if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"], dict) and ("Short_Selling" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]):
                                                                                    if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"], dict) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"]):
                                                                                        if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict) and ("Short_Selling_date_transaction" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                            if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list) and int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) >= int(0):
                                                                                                if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))], list) and int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))])) >= int(3):
                                                                                                    if str(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][1]) == "sell":

                                                                                                        # 標示融券做空 short selling 兩次對衝交易滑框的左邊（首，第一次，賣出交易 sell）或右邊（尾，第二次，買入交易 buy），取值爲 1 時表示滑框的左邊（首，第一次，賣出交易 sell），取值爲 0 時表示滑框的右邊（尾，第二次，買入交易 buy），預設值爲 1 ，即取滑框的左邊（首，第一次，賣出交易 sell）;
                                                                                                        # 融券做空 short selling 兩次對衝交易類型，從滑框的左邊（首，第一次，賣出交易 sell）修改爲滑框的右邊（尾，第二次，買入交易 buy）;
                                                                                                        if int(Short_Selling_sliding_frame) >= int(1):
                                                                                                            Short_Selling_sliding_frame *= int(0)
                                                                                                            Short_Selling_sliding_frame += int(0)

                                                                                                        risk_drawdown_loss_Short_Selling *= float(0.0)
                                                                                                        risk_drawdown_loss_Short_Selling += float(float(1.0) + float(float(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][2]) - float(x3[int(int(len(x3)) - int(1))])) / float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][2])))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                        # risk_drawdown_loss_Short_Selling += float(float(1.0) + float(float(float(abs(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][2]))) - float(abs(float(x3[int(int(len(x3)) - int(1))])))) / float(abs(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][2])))))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                                                                                        # 記錄做空模式每個交易日的回撤值序列;
                                                                                                        drawdown_Array_Short_Selling.append(risk_drawdown_loss_Short_Selling)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                                                                                        # if float(risk_drawdown_loss_Short_Selling) <= float(risk_threshold_drawdown_loss) or int(int(k) + int(1)) == int(minimum_dates_transaction):
                                                                                                        if float(risk_drawdown_loss_Short_Selling) <= float(risk_threshold_drawdown_loss):

                                                                                                            # 做空（Short Selling）記錄;
                                                                                                            if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (not ((str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict))):
                                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])] = {}
                                                                                                            if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict):
                                                                                                                # 每兩次對衝交易序號標識;
                                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Index_date_transaction_Short_Selling"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                                                # 按規則執行第一次對衝賣出（融券做空 short selling）交易的日期;
                                                                                                                if not (("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list)):
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"] = []
                                                                                                                if ("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list):
                                                                                                                    y_F_Short_Selling_I = [None] * int(16)
                                                                                                                    y_F_Short_Selling_I[1] = x0[int(int(len(x0)) - int(1))]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                                    y_F_Short_Selling_I[2] = str("buy")  # 買入或賣出;
                                                                                                                    y_F_Short_Selling_I[3] = x3[int(int(len(x3)) - int(1))]  # 成交價;
                                                                                                                    if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in SizePosition_Parameter_Array[0]) and ("Short_Selling" in SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in SizePosition_Parameter_Array[1]) and ("Short_Selling" in SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                                                        y_F_Short_Selling_I[4] = [SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"], SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"]]  # 倉位;
                                                                                                                    else:
                                                                                                                        y_F_Short_Selling_I[4] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                                    if ("Index_date_transaction_Short_Selling" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                                                        y_F_Short_Selling_I[5] = int(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Index_date_transaction_Short_Selling"])  # 每兩次對衝成交序號標識;
                                                                                                                    else:
                                                                                                                        y_F_Short_Selling_I[5] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                                    y_F_Short_Selling_I[6] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                                    y_F_Short_Selling_I[7] = x0[int(int(len(x0)) - int(1))]  # 交易日（datetime.date 類型）;
                                                                                                                    y_F_Short_Selling_I[8] = x1[int(int(len(x1)) - int(1))]  # 當日總成交量（turnover volume）;
                                                                                                                    y_F_Short_Selling_I[9] = x3[int(int(len(x3)) - int(1))]  # 當日開盤（opening）成交價;
                                                                                                                    y_F_Short_Selling_I[10] = x4[int(int(len(x4)) - int(1))]  # 當日收盤（closing）成交價;
                                                                                                                    y_F_Short_Selling_I[11] = x5[int(int(len(x5)) - int(1))]  # 當日最低（low）成交價;
                                                                                                                    y_F_Short_Selling_I[12] = x6[int(int(len(x6)) - int(1))]  # 當日最高（high）成交價;
                                                                                                                    # y_F_Short_Selling_I[13] = x2[int(int(len(x2)) - int(1))]  # 當日總成交金額（turnover amount）;
                                                                                                                    # y_F_Short_Selling_I[14] = x20[int(int(len(x20)) - int(1))]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                                    # y_F_Short_Selling_I[15] = x21[int(int(len(x21)) - int(1))]  # 當日每股收益（price earnings）;
                                                                                                                    # y_F_Short_Selling_I[16] = x22[int(int(len(x22)) - int(1))]  # 當日每股净值（book value per share）;
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"].append(y_F_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                    y_F_Short_Selling_I = None  # 釋放内存;

                                                                                                                # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                                                if not (("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                                                if ("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                    y_G_Short_Selling_I = float(int(-1) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                    y_G_Short_Selling_I = None  # 釋放内存;

                                                                                                                # 每兩次對衝交易差價利潤初值;
                                                                                                                if not (("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"], list)):
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"] = []
                                                                                                                if ("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"], list):
                                                                                                                    y_A_Short_Selling_I_2 = float(x3[int(int(len(x3)) - int(1))])
                                                                                                                    # y_A_Short_Selling_I_2 = float(int(-1) * float(float(x3[int(int(len(x3)) - int(1))]) + float(y_A_Short_Selling_I)))
                                                                                                                    y_A_Short_Selling_I = float(y_A_Short_Selling_I_2)
                                                                                                                    # y_A_Short_Selling_I *= float(0.0)
                                                                                                                    # y_A_Short_Selling_I += float(y_A_Short_Selling_I_2)
                                                                                                                    # y_A_Short_Selling_I += float(-(x3[t + 1] - x3[k + 1]))
                                                                                                                    # y_A_Short_Selling_I = float(-(x3[t + 1] - x3[k + 1]))
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"].append(y_A_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                    y_A_Short_Selling_I = None  # 釋放内存;

                                                                                                                # 記錄做空模式本輪對衝交易的回撤值序列;
                                                                                                                if isinstance(drawdown_Array_Short_Selling, list) and int(len(drawdown_Array_Short_Selling)) >= int(0):
                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["drawdown"] = drawdown_Array_Short_Selling

                                                                                                        # if float(risk_drawdown_loss_Short_Selling) > float(risk_threshold_drawdown_loss) and int(int(k) + int(1)) < int(minimum_dates_transaction):
                                                                                                        if float(risk_drawdown_loss_Short_Selling) > float(risk_threshold_drawdown_loss):

                                                                                                            # 計算該時間日期切面的交易信息;
                                                                                                            return_MarketTiming_fit_model = MarketTiming_fit_model(
                                                                                                                {
                                                                                                                    str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) : {
                                                                                                                        "date_transaction": x0,
                                                                                                                        "turnover_volume": x1,
                                                                                                                        "opening_price": x3,
                                                                                                                        "close_price": x4,
                                                                                                                        "low_price": x5,
                                                                                                                        "high_price": x6,
                                                                                                                        "focus": x7,
                                                                                                                        "amplitude": x8,
                                                                                                                        "amplitude_rate": x9,
                                                                                                                        "opening_price_Standardization": x10,
                                                                                                                        "closing_price_Standardization": x11,
                                                                                                                        "low_price_Standardization": x12,
                                                                                                                        "high_price_Standardization": x13,
                                                                                                                        "turnover_volume_growth_rate": x14,
                                                                                                                        "opening_price_growth_rate": x15,
                                                                                                                        "closing_price_growth_rate": x16,
                                                                                                                        "closing_minus_opening_price_growth_rate": x17,
                                                                                                                        "high_price_proportion": x18,
                                                                                                                        "low_price_proportion": x19
                                                                                                                        # "turnover_rate": x20
                                                                                                                    }
                                                                                                                },
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][1],  # float(+1.0),  # P2,  # 買入閾值;
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][2],  # float(-1.0),  # P3,  # 賣出閾值;
                                                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][3],  # float(0.0),  # P4,  # risk threshold drawdown loss; # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                                Quantitative_Indicators_Function,
                                                                                                                "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                                                                                            )
                                                                                                            # return_MarketTiming_fit_model == {
                                                                                                            #     "ticker_symbol" : {
                                                                                                            #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
                                                                                                            #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
                                                                                                            #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
                                                                                                            #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
                                                                                                            #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
                                                                                                            #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
                                                                                                            #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                                                                                            #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                                                                                            #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                                                                                            #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                                                                                            #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                                                                                            #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                                                                                            #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                                                                                            #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                                                                                            #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                                                                                            #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                                                                                            #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                                                                                            #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                                                                                            #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
                                                                                                            #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
                                                                                                            #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                                                                                            #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                                                                                            #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                                                                                            #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
                                                                                                            #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
                                                                                                            #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
                                                                                                            #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
                                                                                                            #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                                                            #         "revenue_and_expenditure_records_date_transaction": y_G  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                                                            #     }
                                                                                                            # }
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                                                            if isinstance(return_MarketTiming_fit_model, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in return_MarketTiming_fit_model):
                                                                                                                if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict):
                                                                                                                    if ("Long_Position_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and ("Short_Selling_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):

                                                                                                                        # 判斷是否進行（融券做空 short selling）對衝交易的第一次賣出交易;
                                                                                                                        if int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) == int(0) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_date_transaction"])) == int(1):
                                                                                                                            if return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(0)][0] == return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][0] and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(0)][1]) == str("buy") and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][1]) == str("sell") and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]) < float(0.0) and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))]) > float(0.0) and float(abs(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_date_transaction"])) - int(1))])) == float(0.0):

                                                                                                                                # 做空（Short Selling）記錄;
                                                                                                                                if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (not ((str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict))):
                                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])] = {}
                                                                                                                                if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict):
                                                                                                                                    # 每兩次對衝交易序號標識;
                                                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Index_date_transaction_Short_Selling"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                                                                    # 按規則執行第一次對衝賣出（融券做空 short selling）交易的日期;
                                                                                                                                    if not (("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list)):
                                                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"] = []
                                                                                                                                    if ("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list):
                                                                                                                                        if ("Long_Position_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"], list):
                                                                                                                                            if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))], list):
                                                                                                                                                y_F_Short_Selling_I = [None] * int(16)
                                                                                                                                                y_F_Short_Selling_I[0] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][0]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                                                                y_F_Short_Selling_I[1] = str("buy")  # str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][1])  # 買入或賣出;
                                                                                                                                                y_F_Short_Selling_I[2] = return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(0)][2]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][2]  # 成交價;
                                                                                                                                                if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in SizePosition_Parameter_Array[0]) and ("Short_Selling" in SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in SizePosition_Parameter_Array[1]) and ("Short_Selling" in SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                                                                                    y_F_Short_Selling_I[3] = [SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"], SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"]]  # 倉位;
                                                                                                                                                else:
                                                                                                                                                    y_F_Short_Selling_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                                                                if ("Index_date_transaction_Short_Selling" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                                                                                    y_F_Short_Selling_I[4] = int(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Index_date_transaction_Short_Selling"])  # 每兩次對衝成交序號標識;
                                                                                                                                                else:
                                                                                                                                                    y_F_Short_Selling_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                                                                y_F_Short_Selling_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                                                                y_F_Short_Selling_I[6] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][6]  # 交易日（datetime.date 類型）;
                                                                                                                                                y_F_Short_Selling_I[7] = x1[int(int(len(x1)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][7]  # 當日總成交量（turnover volume）;
                                                                                                                                                y_F_Short_Selling_I[8] = x3[int(int(len(x3)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][8]  # 當日開盤（opening）成交價;
                                                                                                                                                y_F_Short_Selling_I[9] = x4[int(int(len(x4)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][9]  # 當日收盤（closing）成交價;
                                                                                                                                                y_F_Short_Selling_I[10] = x5[int(int(len(x5)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][10]  # 當日最低（low）成交價;
                                                                                                                                                y_F_Short_Selling_I[11] = x6[int(int(len(x6)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][11]  # 當日最高（high）成交價;
                                                                                                                                                # y_F_Short_Selling_I[12] = x2[int(int(len(x2)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][1]  # 當日總成交金額（turnover amount）;
                                                                                                                                                # y_F_Short_Selling_I[13] = x20[int(int(len(x20)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][19]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                                                                # y_F_Short_Selling_I[14] = x21[int(int(len(x21)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][20]  # 當日每股收益（price earnings）;
                                                                                                                                                # y_F_Short_Selling_I[15] = x22[int(int(len(x22)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) - int(1))][21]  # 當日每股净值（book value per share）;
                                                                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"].append(y_F_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                                y_F_Short_Selling_I = None  # 釋放内存;

                                                                                                                                    # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                                                                    if not (("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                                                                    if ("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                                        # y_G_Short_Selling_I = float(float(+1.0) * float(x3[int(len(x3))]))
                                                                                                                                        # Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                                            y_G_Short_Selling_I = float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])  # float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))])
                                                                                                                                            Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                            y_G_Short_Selling_I = None  # 釋放内存;

                                                                                                                                    # 每兩次對衝交易差價利潤初值;
                                                                                                                                    if not (("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"], list)):
                                                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"] = []
                                                                                                                                    if ("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"], list):
                                                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                                                            y_A_Short_Selling_I_2 = float(int(-1) * float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]))
                                                                                                                                            # y_A_Short_Selling_I_2 = float(int(-1) * float(float(int(-1) * float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])) + float(y_A_Short_Selling_I)))
                                                                                                                                            y_A_Short_Selling_I = float(y_A_Short_Selling_I_2)
                                                                                                                                            # y_A_Short_Selling_I *= float(0.0)
                                                                                                                                            # y_A_Short_Selling_I += float(y_A_Short_Selling_I_2)
                                                                                                                                            # y_A_Short_Selling_I += float(-(x3[t + 1] - x3[k + 1]))
                                                                                                                                            # y_A_Short_Selling_I = float(-(x3[t + 1] - x3[k + 1]))
                                                                                                                                            Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"].append(y_A_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                                            y_A_Short_Selling_I = None  # 釋放内存;

                                                                                                                                    # 記錄做空模式本輪對衝交易的回撤值序列;
                                                                                                                                    if isinstance(drawdown_Array_Short_Selling, list) and int(len(drawdown_Array_Short_Selling)) >= int(0):
                                                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["drawdown"] = drawdown_Array_Short_Selling

                                                                                                            return_MarketTiming_fit_model = None

                                                                        # 判斷、執行融券做空 short selling 兩次對衝交易滑框的左邊（首，第一次，賣出交易 sell）;
                                                                        if int(Short_Selling_sliding_frame) >= int(1):

                                                                            # 計算該時間日期切面的交易信息;
                                                                            return_MarketTiming_fit_model = MarketTiming_fit_model(
                                                                                {
                                                                                    str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) : {
                                                                                        "date_transaction": x0,
                                                                                        "turnover_volume": x1,
                                                                                        "opening_price": x3,
                                                                                        "close_price": x4,
                                                                                        "low_price": x5,
                                                                                        "high_price": x6,
                                                                                        "focus": x7,
                                                                                        "amplitude": x8,
                                                                                        "amplitude_rate": x9,
                                                                                        "opening_price_Standardization": x10,
                                                                                        "closing_price_Standardization": x11,
                                                                                        "low_price_Standardization": x12,
                                                                                        "high_price_Standardization": x13,
                                                                                        "turnover_volume_growth_rate": x14,
                                                                                        "opening_price_growth_rate": x15,
                                                                                        "closing_price_growth_rate": x16,
                                                                                        "closing_minus_opening_price_growth_rate": x17,
                                                                                        "high_price_proportion": x18,
                                                                                        "low_price_proportion": x19
                                                                                        # "turnover_rate": x20
                                                                                    }
                                                                                },
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][0],  # int(3),  # P1,  # 觀察收益率歷史向前推的交易日長度;
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][1],  # float(+1.0),  # P2,  # 買入閾值;
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][2],  # float(-1.0),  # P3,  # 賣出閾值;
                                                                                MarketTiming_Parameter_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"][3],  # float(0.0),  # P4,  # risk threshold drawdown loss; # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                Quantitative_Indicators_Function,
                                                                                "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                                                            )
                                                                            # return_MarketTiming_fit_model == {
                                                                            #     "ticker_symbol" : {
                                                                            #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
                                                                            #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
                                                                            #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
                                                                            #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
                                                                            #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
                                                                            #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
                                                                            #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                                                            #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                                                            #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                                                            #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                                                            #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                                                            #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                                                            #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                                                            #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                                                            #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                                                            #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                                                            #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                                                            #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                                                            #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
                                                                            #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
                                                                            #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                                                            #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                                                            #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                                                            #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
                                                                            #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
                                                                            #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                                                            #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                                                            #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                                                            #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
                                                                            #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
                                                                            #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
                                                                            #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
                                                                            #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                            #         "revenue_and_expenditure_records_date_transaction": y_G  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                            #     }
                                                                            # }
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][1])  # 交易規則自動選取的交易日期;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][2])  # 交易規則自動選取的買入或賣出;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][5])  # 交易規則自動選取的成交次數記錄;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][6])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][7])  # 交易日（datetime.date 類型）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][8])  # 當日總成交量（turnover volume）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][9])  # 當日開盤（opening）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][10])  # 當日收盤（closing）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][11])  # 當日最低（low）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][12])  # 當日最高（high）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][13])  # 當日總成交金額（turnover amount）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][14])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][15])  # 當日每股收益（price earnings）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"][16])  # 當日每股净值（book value per share）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的交易日期;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的買入或賣出;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的成交次數記錄;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][6])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][7])  # 交易日（datetime.date 類型）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][8])  # 當日總成交量（turnover volume）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][9])  # 當日開盤（opening）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][10])  # 當日收盤（closing）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][11])  # 當日最低（low）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][12])  # 當日最高（high）成交價;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][13])  # 當日總成交金額（turnover amount）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][14])  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][15])  # 當日每股收益（price earnings）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][16])  # 當日每股净值（book value per share）;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                                                            # print(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                                                            if isinstance(return_MarketTiming_fit_model, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in return_MarketTiming_fit_model):
                                                                                if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict):
                                                                                    if ("Long_Position_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and ("Short_Selling_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):

                                                                                        # 判斷是否進行（融券做空 short selling）第一次對衝交易的賣出交易;
                                                                                        if int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Long_Position_date_transaction"])) == int(0) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])) == int(2) and int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"])) == int(1):
                                                                                            if return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(0)][0] == return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][0] and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(0)][1]) == str("sell") and str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][1]) == str("buy") and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]) > float(0.0) and float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))]) < float(0.0) and float(abs(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"])) - int(1))])) == float(0.0):

                                                                                                # 清空重置做多模式每個交易日的回撤值的記錄序列：drawdown_Array_Short_Selling ;
                                                                                                drawdown_Array_Short_Selling.clear()  # 函數 list.clear() 表示移除列表（list）中的所有元素，從而使列表（list）變爲空;

                                                                                                # 做空（Short Selling）記錄;
                                                                                                if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (not ((str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict))):
                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])] = {}
                                                                                                if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])], dict):
                                                                                                    # 每兩次對衝交易序號標識;
                                                                                                    Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Index_date_transaction_Short_Selling"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                                    # 按規則執行第一次對衝賣出（融券做空 short selling）交易的日期;
                                                                                                    if not (("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list)):
                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"] = []
                                                                                                    if ("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list):
                                                                                                        if ("Short_Selling_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"], list):
                                                                                                            if isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))], list):
                                                                                                                y_F_Short_Selling_I = [None] * int(16)
                                                                                                                y_F_Short_Selling_I[0] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][0]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                                y_F_Short_Selling_I[1] = str("sell")  # str(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][1])  # 買入或賣出;
                                                                                                                y_F_Short_Selling_I[2] = return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(0)][2]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][2]  # 成交價;
                                                                                                                if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in SizePosition_Parameter_Array[0]) and ("Short_Selling" in SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and (str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g]) in SizePosition_Parameter_Array[1]) and ("Short_Selling" in SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                                                    y_F_Short_Selling_I[3] = [SizePosition_Parameter_Array[0][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"], SizePosition_Parameter_Array[1][str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling"]]  # 倉位;
                                                                                                                else:
                                                                                                                    y_F_Short_Selling_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                                if ("Index_date_transaction_Short_Selling" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]):
                                                                                                                    y_F_Short_Selling_I[4] = int(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Index_date_transaction_Short_Selling"])  # 每兩次對衝成交序號標識;
                                                                                                                else:
                                                                                                                    y_F_Short_Selling_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                                y_F_Short_Selling_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                                y_F_Short_Selling_I[6] = x0[int(int(len(x0)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][6]  # 交易日（datetime.date 類型）;
                                                                                                                y_F_Short_Selling_I[7] = x1[int(int(len(x1)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][7]  # 當日總成交量（turnover volume）;
                                                                                                                y_F_Short_Selling_I[8] = x3[int(int(len(x3)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][8]  # 當日開盤（opening）成交價;
                                                                                                                y_F_Short_Selling_I[9] = x4[int(int(len(x4)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][9]  # 當日收盤（closing）成交價;
                                                                                                                y_F_Short_Selling_I[10] = x5[int(int(len(x5)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][10]  # 當日最低（low）成交價;
                                                                                                                y_F_Short_Selling_I[11] = x6[int(int(len(x6)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][11]  # 當日最高（high）成交價;
                                                                                                                # y_F_Short_Selling_I[12] = x2[int(int(len(x2)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][1]  # 當日總成交金額（turnover amount）;
                                                                                                                # y_F_Short_Selling_I[13] = x20[int(int(len(x20)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][19]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                                # y_F_Short_Selling_I[14] = x21[int(int(len(x21)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][20]  # 當日每股收益（price earnings）;
                                                                                                                # y_F_Short_Selling_I[15] = x22[int(int(len(x22)) - int(1))]  # return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"])) - int(1))][21]  # 當日每股净值（book value per share）;
                                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_date_transaction"].append(y_F_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                                y_F_Short_Selling_I = None  # 釋放内存;

                                                                                                    # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                                    if not (("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                                    if ("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                        # y_G_Short_Selling_I = float(float(-1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                        # Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                            y_G_Short_Selling_I = float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)])  # float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"])) - int(1))])
                                                                                                            Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"].append(y_G_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                            y_G_Short_Selling_I = None  # 釋放内存;

                                                                                                    # 每兩次對衝交易差價利潤初值;
                                                                                                    if not (("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"], list)):
                                                                                                        Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"] = []
                                                                                                    if ("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"], list):
                                                                                                        if ("revenue_and_expenditure_records_date_transaction" in return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]) and isinstance(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                            y_A_Short_Selling_I = float(float(-1.0) * float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["revenue_and_expenditure_records_date_transaction"][int(0)]))
                                                                                                            # y_A_Short_Selling_I *= float(0.0)
                                                                                                            # y_A_Short_Selling_I += float(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"][int(int(len(return_MarketTiming_fit_model[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"])) - int(1))])
                                                                                                            # y_A_Short_Selling_I += float(float(0.0) - float(x3[int(int(len(x3)) - int(1))]))
                                                                                                            # y_A_Short_Selling_I = float(float(0.0) - float(x3[int(int(len(x3)) - int(1))]))
                                                                                                            Short_Selling_testing_data_transaction_sequence_Dict[str(PickStock_ticker_symbol_Array_testing_data_Short_Selling[t][g])]["Short_Selling_profit_date_transaction"].append(y_A_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                            y_A_Short_Selling_I = None  # 釋放内存;

                                                                            return_MarketTiming_fit_model = None

                                                                        Short_Selling_sliding_frame = None  # 釋放内存;
                                                                        risk_drawdown_loss_Short_Selling = None  # 釋放内存;

                                                                        # 釋放内存;
                                                                        x0 = None
                                                                        x1 = None
                                                                        x3 = None
                                                                        x4 = None
                                                                        x5 = None
                                                                        x6 = None
                                                                        x7 = None
                                                                        x8 = None
                                                                        x9 = None
                                                                        x10 = None
                                                                        x11 = None
                                                                        x12 = None
                                                                        x13 = None
                                                                        x14 = None
                                                                        x15 = None
                                                                        x16 = None
                                                                        x17 = None
                                                                        x18 = None
                                                                        x19 = None
                                                                        # x20 = None
                                                                        # x21 = None
                                                                        # x22 = None
                                                                        # x23 = None
                                                                        # x24 = None
                                                                        # x25 = None
                                                                        # x26 = None
                                                                        # x27 = None
                                                                        # x_Pdata_0 = None
                                                                        # x_Plower = None
                                                                        # x_Pupper = None
                                                                        # x_weight = None

                                    t = None  # 釋放内存;

                                    if int(len(Long_Position_testing_data_transaction_sequence_Dict)) > int(0) or int(len(Short_Selling_testing_data_transaction_sequence_Dict)) > int(0):
                                        stepping_transaction_Dict["testing_transaction"] = {}
                                        if int(len(Long_Position_testing_data_transaction_sequence_Dict)) > int(0):
                                            stepping_transaction_Dict["testing_transaction"]["Long_Position"] = Long_Position_testing_data_transaction_sequence_Dict
                                        if int(len(Short_Selling_testing_data_transaction_sequence_Dict)) > int(0):
                                            stepping_transaction_Dict["testing_transaction"]["Short_Selling"] = Short_Selling_testing_data_transaction_sequence_Dict
                                    Long_Position_testing_data_transaction_sequence_Dict = None  # 釋放内存;
                                    Short_Selling_testing_data_transaction_sequence_Dict = None  # 釋放内存;

                                    if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) > int(0) and isinstance(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))], list):
                                        if ("Long_Position" in PickStock_Parameter_Dict):
                                            g_min = int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))]))
                                        else:
                                            g_min = int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))
                                        if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(g_min):int(1)])) > int(0):
                                            if not ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict):
                                                stepping_transaction_Dict["testing_PickStock_ticker_symbol"] = {}
                                            if ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict) and isinstance(stepping_transaction_Dict["testing_PickStock_ticker_symbol"], dict):
                                                stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Long_Position"] = PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(g_min):int(1)]
                                    if int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) > int(0) and isinstance(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))], list):
                                        if ("Short_Selling" in PickStock_Parameter_Dict):
                                            g_max = int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))]))
                                        else:
                                            g_max = int(1)
                                        if int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(g_max) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)])) > int(0):
                                            if not ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict):
                                                stepping_transaction_Dict["testing_PickStock_ticker_symbol"] = {}
                                            if ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict) and isinstance(stepping_transaction_Dict["testing_PickStock_ticker_symbol"], dict):
                                                stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Short_Selling"] = PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(g_max) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)]
                                    # PickStock_ticker_symbol_Array_testing_data_Long_Position = None  # 釋放内存;
                                    # PickStock_ticker_symbol_Array_testing_data_Short_Selling = None  # 釋放内存;

                                    # stepping_sequence_Array.append(stepping_transaction_Dict)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    # # stepping_transaction_Dict = None  # 釋放内存;
                                    # # testingData = None  # 釋放内存;

                                    if ("testing_transaction" in stepping_transaction_Dict):

                                        # stepping_transaction_Dict["training_data"] = trainingData
                                        # stepping_transaction_Dict["training_MarketTiming_Parameter"] = MarketTiming_Parameter_Dict
                                        # stepping_transaction_Dict["training_PickStock_Parameter"] = PickStock_Parameter_Dict
                                        # stepping_transaction_Dict["training_PickStock_ticker_symbol"] = PickStock_ticker_symbol_Array
                                        # stepping_transaction_Dict["training_SizePosition_Parameter"] = SizePosition_Parameter_Array

                                        # stepping_transaction_Dict["testing_data"] = testingData

                                        # if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))])):int(1)])) > int(0) or int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))])) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)])) > int(0):
                                        #     stepping_transaction_Dict["testing_PickStock_ticker_symbol"] = {}
                                        #     if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))])):int(1)])) > int(0):
                                        #         stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Long_Position"] = PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))])):int(1)]
                                        #     if int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))])) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)])) > int(0):
                                        #         stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Short_Selling"] = PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))])) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)]
                                        # PickStock_ticker_symbol_Array_testing_data_Long_Position = None  # 釋放内存;
                                        # PickStock_ticker_symbol_Array_testing_data_Short_Selling = None  # 釋放内存;

                                        stepping_sequence_Array.append(stepping_transaction_Dict)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                        # stepping_transaction_Dict = None  # 釋放内存;
                                        # testingData = None  # 釋放内存;

                                    # 數據序列的最後一個交易日，强制平倉;
                                    # k = int(int(i) + int(testing_data_sequence_length))
                                    if int(int(k) + int(1)) == int(minimum_dates_transaction):
                                        if isinstance(stepping_sequence_Array, list) and int(len(stepping_sequence_Array)) > int(0):
                                            if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))], dict) and ("testing_transaction" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]):

                                                # 依照選股規則挑選出的股票，計算（融資做多 buying long）交易利潤;
                                                Long_Position_testing_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
                                                # 依照選股規則挑選出的股票，計算（融券做空 short selling）交易利潤;
                                                Short_Selling_testing_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;

                                                # 依照選股規則挑選出的股票，計算（融資做多 buying long）交易利潤;
                                                if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"], dict) and ("Long_Position" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]):
                                                    if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"], dict) and int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"])) > int(0):
                                                        for key, value in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"].items():
                                                            if isinstance(value, dict) and ("Long_Position_date_transaction" in value):
                                                                if isinstance(value["Long_Position_date_transaction"], list) and int(len(value["Long_Position_date_transaction"])) >= int(0):
                                                                    if isinstance(value["Long_Position_date_transaction"][int(int(len(value["Long_Position_date_transaction"])) - int(1))], list) and int(len(value["Long_Position_date_transaction"][int(int(len(value["Long_Position_date_transaction"])) - int(1))])) >= int(3):
                                                                        if str(value["Long_Position_date_transaction"][int(int(len(value["Long_Position_date_transaction"])) - int(1))][1]) == "buy":
                                                                            # 祇取測試數據集的最後一個交易日數據，代入交易規則，判斷交易狀態;
                                                                            # 依照選股規則挑選出的股票，計算（融資做多 buying long）交易利潤;
                                                                            # Long_Position_testing_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
                                                                            t = int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))  # int(int(minimum_dates_transaction_testing_data) - int(1))  # int(int(maximum_dates_transaction_testing_data) - int(1))  # int(0)
                                                                            if isinstance(testingData, dict) and (str(key) in testingData) and isinstance(testingData[str(key)], dict) and int(len(testingData[str(key)])) > int(0):
                                                                                # 判斷循環遍歷「t」小於序列數據（1 維數組）的最大長度，並跳過超出的部分;
                                                                                if int(int(t) + int(1)) > int(0) and int(int(t) + int(1)) <= int(min([len(testingData[str(key)]["date_transaction"]), len(testingData[str(key)]["turnover_volume"]), len(testingData[str(key)]["opening_price"]), len(testingData[str(key)]["close_price"]), len(testingData[str(key)]["low_price"]), len(testingData[str(key)]["high_price"]), len(testingData[str(key)]["focus"]), len(testingData[str(key)]["amplitude"]), len(testingData[str(key)]["amplitude_rate"]), len(testingData[str(key)]["opening_price_Standardization"]), len(testingData[str(key)]["closing_price_Standardization"]), len(testingData[str(key)]["low_price_Standardization"]), len(testingData[str(key)]["high_price_Standardization"]), len(testingData[str(key)]["turnover_volume_growth_rate"]), len(testingData[str(key)]["opening_price_growth_rate"]), len(testingData[str(key)]["closing_price_growth_rate"]), len(testingData[str(key)]["closing_minus_opening_price_growth_rate"]), len(testingData[str(key)]["high_price_proportion"]), len(testingData[str(key)]["low_price_proportion"])])):
                                                                                    if (str(key) in MarketTiming_Parameter_Dict) and ("Long_Position" in MarketTiming_Parameter_Dict[str(key)]) and int(int(t) + int(1)) >= int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)):

                                                                                        x0 = testingData[str(key)]["date_transaction"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 交易日期;
                                                                                        x1 = testingData[str(key)]["turnover_volume"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量;
                                                                                        # x2 = testingData[str(key)]["turnover_amount"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交總金額;
                                                                                        x3 = testingData[str(key)]["opening_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤成交價;
                                                                                        x4 = testingData[str(key)]["close_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤成交價;
                                                                                        x5 = testingData[str(key)]["low_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低成交價;
                                                                                        x6 = testingData[str(key)]["high_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最高成交價;
                                                                                        x7 = testingData[str(key)]["focus"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價重心;
                                                                                        x8 = testingData[str(key)]["amplitude"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價絕對振幅;
                                                                                        x9 = testingData[str(key)]["amplitude_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價相對振幅（%）;
                                                                                        x10 = testingData[str(key)]["opening_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                                                                        x11 = testingData[str(key)]["closing_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                                                                        x12 = testingData[str(key)]["low_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                                                                        x13 = testingData[str(key)]["high_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                                                                        x14 = testingData[str(key)]["turnover_volume_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量的成長率;
                                                                                        x15 = testingData[str(key)]["opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤價的成長率;
                                                                                        x16 = testingData[str(key)]["closing_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價的成長率;
                                                                                        x17 = testingData[str(key)]["closing_minus_opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價減開盤價的成長率;
                                                                                        x18 = testingData[str(key)]["high_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價和開盤價裏的最大值占最高價的比例;
                                                                                        x19 = testingData[str(key)]["low_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低價占收盤價和開盤價裏的最小值的比例;
                                                                                        # x20 = testingData[str(key)]["turnover_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量換手率;
                                                                                        # x21 = testingData[str(key)]["price_earnings"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股收益（公司經營利潤率 ÷ 股本）;
                                                                                        # x22 = testingData[str(key)]["book_value_per_share"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股净值（公司净資產 ÷ 股本）;
                                                                                        # x23 = testingData[str(key)]["capitalization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 總市值;
                                                                                        # x24 = testingData[str(key)]["moving_average_5"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 5 日滑動平均缐;
                                                                                        # x25 = testingData[str(key)]["moving_average_10"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 10 日滑動平均缐;
                                                                                        # x26 = testingData[str(key)]["moving_average_20"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 20 日滑動平均缐;
                                                                                        # x27 = testingData[str(key)]["moving_average_30"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Long_Position"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 30 日滑動平均缐;
                                                                                        # x_Pdata_0 = testingData[str(key)]["Pdata_0"]
                                                                                        # x_Plower = testingData[str(key)]["Plower"]
                                                                                        # x_Pupper = testingData[str(key)]["Pupper"]
                                                                                        # x_weight = testingData[str(key)]["weight"]

                                                                                        risk_drawdown_loss_Long_Position = float(float(x3[int(int(len(x3)) - int(1))]) / float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(key)]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(key)]["Long_Position_date_transaction"])) - int(1))][2]))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # risk_threshold_drawdown_loss = float(MarketTiming_Parameter_Dict[str(key)]["Long_Position"][3])  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # risk_drawdown_loss_Long_Position = float(float(risk_threshold_drawdown_loss) + float(0.1))  # 回撤比例初值，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # risk_drawdown_loss_Long_Position *= float(0.0)
                                                                                        # risk_drawdown_loss_Long_Position += float(float(x3[int(int(len(x3)) - int(1))]) / float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(key)]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(key)]["Long_Position_date_transaction"])) - int(1))][2]))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # # risk_drawdown_loss_Long_Position += float(float(abs(float(x3[int(int(len(x3)) - int(1))]))) / float(abs(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(key)]["Long_Position_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Long_Position"][str(key)]["Long_Position_date_transaction"])) - int(1))][2]))))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                                                                        # # 記錄做多模式每個交易日的回撤值序列;
                                                                                        # drawdown_Array_Long_Position.append(risk_drawdown_loss_Long_Position)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                                                                        # 做多（Long Position）記錄;
                                                                                        if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (not ((str(key) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)], dict))):
                                                                                            Long_Position_testing_data_transaction_sequence_Dict[str(key)] = {}
                                                                                        if isinstance(Long_Position_testing_data_transaction_sequence_Dict, dict) and (str(key) in Long_Position_testing_data_transaction_sequence_Dict) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)], dict):
                                                                                            # 每兩次對衝交易序號標識;
                                                                                            Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Index_date_transaction_Long_Position"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                            # 按規則執行第二次對衝賣出（融資做多 buying long）交易的日期;
                                                                                            if not (("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_date_transaction"], list)):
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_date_transaction"] = []
                                                                                            if ("Long_Position_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_date_transaction"], list):
                                                                                                y_F_Long_Position_I = [None] * int(16)
                                                                                                y_F_Long_Position_I[0] = x0[int(int(len(x0)) - int(1))]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                y_F_Long_Position_I[1] = str("sell")  # 買入或賣出;
                                                                                                y_F_Long_Position_I[2] = x3[int(int(len(x3)) - int(1))]  # 成交價;
                                                                                                if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(key) in SizePosition_Parameter_Array[0]) and ("Long_Position" in SizePosition_Parameter_Array[0][str(key)]) and (str(key) in SizePosition_Parameter_Array[1]) and ("Long_Position" in SizePosition_Parameter_Array[1][str(key)]):
                                                                                                    y_F_Long_Position_I[3] = [SizePosition_Parameter_Array[0][str(key)]["Long_Position"], SizePosition_Parameter_Array[1][str(key)]["Long_Position"]]  # 倉位;
                                                                                                else:
                                                                                                    y_F_Long_Position_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                if ("Index_date_transaction_Long_Position" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]):
                                                                                                    y_F_Long_Position_I[4] = int(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Index_date_transaction_Long_Position"])  # 每兩次對衝成交序號標識;
                                                                                                else:
                                                                                                    y_F_Long_Position_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                y_F_Long_Position_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                y_F_Long_Position_I[6] = x0[int(int(len(x0)) - int(1))]  # 交易日（datetime.date 類型）;
                                                                                                y_F_Long_Position_I[7] = x1[int(int(len(x1)) - int(1))]  # 當日總成交量（turnover volume）;
                                                                                                y_F_Long_Position_I[8] = x3[int(int(len(x3)) - int(1))]  # 當日開盤（opening）成交價;
                                                                                                y_F_Long_Position_I[9] = x4[int(int(len(x4)) - int(1))]  # 當日收盤（closing）成交價;
                                                                                                y_F_Long_Position_I[10] = x5[int(int(len(x5)) - int(1))]  # 當日最低（low）成交價;
                                                                                                y_F_Long_Position_I[11] = x6[int(int(len(x6)) - int(1))]  # 當日最高（high）成交價;
                                                                                                # y_F_Long_Position_I[12] = x2[int(int(len(x2)) - int(1))]  # 當日總成交金額（turnover amount）;
                                                                                                # y_F_Long_Position_I[13] = x20[int(int(len(x20)) - int(1))]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                # y_F_Long_Position_I[14] = x21[int(int(len(x21)) - int(1))]  # 當日每股收益（price earnings）;
                                                                                                # y_F_Long_Position_I[15] = x22[int(int(len(x22)) - int(1))]  # 當日每股净值（book value per share）;
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_date_transaction"].append(y_F_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                y_F_Long_Position_I = None  # 釋放内存;

                                                                                            # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                            if not (("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                            if ("revenue_and_expenditure_records_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                y_G_Long_Position_I = float(float(+1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"].append(y_G_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                y_G_Long_Position_I = None  # 釋放内存;

                                                                                            # 每兩次對衝交易差價利潤初值;
                                                                                            if not (("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_profit_date_transaction"], list)):
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_profit_date_transaction"] = []
                                                                                            if ("Long_Position_profit_date_transaction" in Long_Position_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_profit_date_transaction"], list):
                                                                                                y_A_Long_Position_I_2 = float(float(+1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                # y_A_Long_Position_I_2 = float(float(x3[int(int(len(x3)) - int(1))]) + float(y_A_Long_Position_I))
                                                                                                y_A_Long_Position_I = float(y_A_Long_Position_I_2)
                                                                                                # y_A_Long_Position_I *= float(0.0)
                                                                                                # y_A_Long_Position_I += float(y_A_Long_Position_I_2)
                                                                                                # y_A_Long_Position_I += float(x3[t + 1] - x3[k + 1])
                                                                                                # y_A_Long_Position_I = float(x3[t + 1] - x3[k + 1])
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["Long_Position_profit_date_transaction"].append(y_A_Long_Position_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                y_A_Long_Position_I = None  # 釋放内存;

                                                                                            # 記錄做多模式本輪對衝交易的回撤值序列;
                                                                                            if isinstance(drawdown_Array_Long_Position, list) and int(len(drawdown_Array_Long_Position)) >= int(0):
                                                                                                Long_Position_testing_data_transaction_sequence_Dict[str(key)]["drawdown"] = drawdown_Array_Long_Position

                                                                                        # 釋放内存;
                                                                                        x0 = None
                                                                                        x1 = None
                                                                                        x3 = None
                                                                                        x4 = None
                                                                                        x5 = None
                                                                                        x6 = None
                                                                                        x7 = None
                                                                                        x8 = None
                                                                                        x9 = None
                                                                                        x10 = None
                                                                                        x11 = None
                                                                                        x12 = None
                                                                                        x13 = None
                                                                                        x14 = None
                                                                                        x15 = None
                                                                                        x16 = None
                                                                                        x17 = None
                                                                                        x18 = None
                                                                                        x19 = None
                                                                                        # x20 = None
                                                                                        # x21 = None
                                                                                        # x22 = None
                                                                                        # x23 = None
                                                                                        # x24 = None
                                                                                        # x25 = None
                                                                                        # x26 = None
                                                                                        # x27 = None
                                                                                        # x_Pdata_0 = None
                                                                                        # x_Plower = None
                                                                                        # x_Pupper = None
                                                                                        # x_weight = None

                                                                            t = None  # 釋放内存;

                                                # 依照選股規則挑選出的股票，計算（融券做空 short selling）交易利潤;
                                                if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"], dict) and ("Short_Selling" in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]):
                                                    if isinstance(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"], dict) and int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"])) > int(0):
                                                        for key, value in stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"].items():
                                                            if isinstance(value, dict) and ("Short_Selling_date_transaction" in value):
                                                                if isinstance(value["Short_Selling_date_transaction"], list) and int(len(value["Short_Selling_date_transaction"])) >= int(0):
                                                                    if isinstance(value["Short_Selling_date_transaction"][int(int(len(value["Short_Selling_date_transaction"])) - int(1))], list) and int(len(value["Short_Selling_date_transaction"][int(int(len(value["Short_Selling_date_transaction"])) - int(1))])) >= int(3):
                                                                        if str(value["Short_Selling_date_transaction"][int(int(len(value["Short_Selling_date_transaction"])) - int(1))][1]) == "sell":
                                                                            # 祇取測試數據集的最後一個交易日數據，代入交易規則，判斷交易狀態;
                                                                            # 依照選股規則挑選出的股票，計算（融券做空 short selling）交易利潤;
                                                                            # Short_Selling_testing_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
                                                                            t = int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))  # int(int(minimum_dates_transaction_testing_data) - int(1))  # int(int(maximum_dates_transaction_testing_data) - int(1))  # int(0)
                                                                            if isinstance(testingData, dict) and (str(key) in testingData) and isinstance(testingData[str(key)], dict) and int(len(testingData[str(key)])) > int(0):
                                                                                # 判斷循環遍歷「t」小於序列數據（1 維數組）的最大長度，並跳過超出的部分;
                                                                                if int(int(t) + int(1)) > int(0) and int(int(t) + int(1)) <= int(min([len(testingData[str(key)]["date_transaction"]), len(testingData[str(key)]["turnover_volume"]), len(testingData[str(key)]["opening_price"]), len(testingData[str(key)]["close_price"]), len(testingData[str(key)]["low_price"]), len(testingData[str(key)]["high_price"]), len(testingData[str(key)]["focus"]), len(testingData[str(key)]["amplitude"]), len(testingData[str(key)]["amplitude_rate"]), len(testingData[str(key)]["opening_price_Standardization"]), len(testingData[str(key)]["closing_price_Standardization"]), len(testingData[str(key)]["low_price_Standardization"]), len(testingData[str(key)]["high_price_Standardization"]), len(testingData[str(key)]["turnover_volume_growth_rate"]), len(testingData[str(key)]["opening_price_growth_rate"]), len(testingData[str(key)]["closing_price_growth_rate"]), len(testingData[str(key)]["closing_minus_opening_price_growth_rate"]), len(testingData[str(key)]["high_price_proportion"]), len(testingData[str(key)]["low_price_proportion"])])):
                                                                                    if (str(key) in MarketTiming_Parameter_Dict) and ("Short_Selling" in MarketTiming_Parameter_Dict[str(key)]) and int(int(t) + int(1)) >= int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)):

                                                                                        x0 = testingData[str(key)]["date_transaction"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 交易日期;
                                                                                        x1 = testingData[str(key)]["turnover_volume"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量;
                                                                                        # x2 = testingData[str(key)]["turnover_amount"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交總金額;
                                                                                        x3 = testingData[str(key)]["opening_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤成交價;
                                                                                        x4 = testingData[str(key)]["close_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤成交價;
                                                                                        x5 = testingData[str(key)]["low_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低成交價;
                                                                                        x6 = testingData[str(key)]["high_price"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最高成交價;
                                                                                        x7 = testingData[str(key)]["focus"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價重心;
                                                                                        x8 = testingData[str(key)]["amplitude"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價絕對振幅;
                                                                                        x9 = testingData[str(key)]["amplitude_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 當日成交價相對振幅（%）;
                                                                                        x10 = testingData[str(key)]["opening_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
                                                                                        x11 = testingData[str(key)]["closing_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
                                                                                        x12 = testingData[str(key)]["low_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
                                                                                        x13 = testingData[str(key)]["high_price_Standardization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
                                                                                        x14 = testingData[str(key)]["turnover_volume_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量的成長率;
                                                                                        x15 = testingData[str(key)]["opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 開盤價的成長率;
                                                                                        x16 = testingData[str(key)]["closing_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價的成長率;
                                                                                        x17 = testingData[str(key)]["closing_minus_opening_price_growth_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價減開盤價的成長率;
                                                                                        x18 = testingData[str(key)]["high_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價和開盤價裏的最大值占最高價的比例;
                                                                                        x19 = testingData[str(key)]["low_price_proportion"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 最低價占收盤價和開盤價裏的最小值的比例;
                                                                                        # x20 = testingData[str(key)]["turnover_rate"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 成交量換手率;
                                                                                        # x21 = testingData[str(key)]["price_earnings"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股收益（公司經營利潤率 ÷ 股本）;
                                                                                        # x22 = testingData[str(key)]["book_value_per_share"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 每股净值（公司净資產 ÷ 股本）;
                                                                                        # x23 = testingData[str(key)]["capitalization"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 總市值;
                                                                                        # x24 = testingData[str(key)]["moving_average_5"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 5 日滑動平均缐;
                                                                                        # x25 = testingData[str(key)]["moving_average_10"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 10 日滑動平均缐;
                                                                                        # x26 = testingData[str(key)]["moving_average_20"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 20 日滑動平均缐;
                                                                                        # x27 = testingData[str(key)]["moving_average_30"][int(int(t) - int(int(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # [int(int(t) - int(int(PickStock_Parameter_Dict["Short_Selling"][0]) + int(2)) + int(1)):int(int(t) + int(1)):int(1)]  # 收盤價 30 日滑動平均缐;
                                                                                        # x_Pdata_0 = testingData[str(key)]["Pdata_0"]
                                                                                        # x_Plower = testingData[str(key)]["Plower"]
                                                                                        # x_Pupper = testingData[str(key)]["Pupper"]
                                                                                        # x_weight = testingData[str(key)]["weight"]

                                                                                        risk_drawdown_loss_Short_Selling = float(float(1.0) + float(float(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"])) - int(1))][2]) - float(x3[int(int(len(x3)) - int(1))])) / float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"])) - int(1))][2])))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # risk_threshold_drawdown_loss = float(MarketTiming_Parameter_Dict[str(key)]["Short_Selling"][3])  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # risk_drawdown_loss_Short_Selling = float(float(risk_threshold_drawdown_loss) + float(0.1))  # 回撤比例初值，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # risk_drawdown_loss_Short_Selling *= float(0.0)
                                                                                        # risk_drawdown_loss_Short_Selling += float(float(1.0) + float(float(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"])) - int(1))][2]) - float(x3[int(int(len(x3)) - int(1))])) / float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"])) - int(1))][2])))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
                                                                                        # # risk_drawdown_loss_Short_Selling += float(float(1.0) + float(float(float(abs(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"])) - int(1))][2]))) - float(abs(float(x3[int(int(len(x3)) - int(1))])))) / float(abs(float(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"][int(int(len(stepping_sequence_Array[int(int(len(stepping_sequence_Array)) - int(1))]["testing_transaction"]["Short_Selling"][str(key)]["Short_Selling_date_transaction"])) - int(1))][2])))))  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;

                                                                                        # # 記錄做空模式每個交易日的回撤值序列;
                                                                                        drawdown_Array_Short_Selling.append(risk_drawdown_loss_Short_Selling)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                                                                        # 做空（Short Selling）記錄;
                                                                                        if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (not ((str(key) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)], dict))):
                                                                                            Short_Selling_testing_data_transaction_sequence_Dict[str(key)] = {}
                                                                                        if isinstance(Short_Selling_testing_data_transaction_sequence_Dict, dict) and (str(key) in Short_Selling_testing_data_transaction_sequence_Dict) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)], dict):
                                                                                            # 每兩次對衝交易序號標識;
                                                                                            Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Index_date_transaction_Short_Selling"] = int(int(k) + int(1))  # 每兩次對衝交易序號標識;
                                                                                            # 按規則執行第一次對衝賣出（融券做空 short selling）交易的日期;
                                                                                            if not (("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_date_transaction"], list)):
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_date_transaction"] = []
                                                                                            if ("Short_Selling_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_date_transaction"], list):
                                                                                                y_F_Short_Selling_I = [None] * int(16)
                                                                                                y_F_Short_Selling_I[0] = x0[int(int(len(x0)) - int(1))]  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
                                                                                                y_F_Short_Selling_I[1] = str("buy")  # 買入或賣出;
                                                                                                y_F_Short_Selling_I[2] = x3[int(int(len(x3)) - int(1))]  # 成交價;
                                                                                                if int(len(SizePosition_Parameter_Array)) >= int(2) and (str(key) in SizePosition_Parameter_Array[0]) and ("Short_Selling" in SizePosition_Parameter_Array[0][str(key)]) and (str(key) in SizePosition_Parameter_Array[1]) and ("Short_Selling" in SizePosition_Parameter_Array[1][str(key)]):
                                                                                                    y_F_Short_Selling_I[3] = [SizePosition_Parameter_Array[0][str(key)]["Short_Selling"], SizePosition_Parameter_Array[1][str(key)]["Short_Selling"]]  # 倉位;
                                                                                                else:
                                                                                                    y_F_Short_Selling_I[3] = [float(1.0), float(1.0)]  # 倉位;
                                                                                                if ("Index_date_transaction_Short_Selling" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]):
                                                                                                    y_F_Short_Selling_I[4] = int(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Index_date_transaction_Short_Selling"])  # 每兩次對衝成交序號標識;
                                                                                                else:
                                                                                                    y_F_Short_Selling_I[4] = int(0)  # 每兩次對衝成交序號標識;
                                                                                                y_F_Short_Selling_I[5] = int(int(k) + int(1))  # 交易日期的序列號，用於繪圖可視化;
                                                                                                y_F_Short_Selling_I[6] = x0[int(int(len(x0)) - int(1))]  # 交易日（datetime.date 類型）;
                                                                                                y_F_Short_Selling_I[7] = x1[int(int(len(x1)) - int(1))]  # 當日總成交量（turnover volume）;
                                                                                                y_F_Short_Selling_I[8] = x3[int(int(len(x3)) - int(1))]  # 當日開盤（opening）成交價;
                                                                                                y_F_Short_Selling_I[9] = x4[int(int(len(x4)) - int(1))]  # 當日收盤（closing）成交價;
                                                                                                y_F_Short_Selling_I[10] = x5[int(int(len(x5)) - int(1))]  # 當日最低（low）成交價;
                                                                                                y_F_Short_Selling_I[11] = x6[int(int(len(x6)) - int(1))]  # 當日最高（high）成交價;
                                                                                                # y_F_Short_Selling_I[12] = x2[int(int(len(x2)) - int(1))]  # 當日總成交金額（turnover amount）;
                                                                                                # y_F_Short_Selling_I[13] = x20[int(int(len(x20)) - int(1))]  # 當日成交量（turnover volume）換手率（turnover rate）;
                                                                                                # y_F_Short_Selling_I[14] = x21[int(int(len(x21)) - int(1))]  # 當日每股收益（price earnings）;
                                                                                                # y_F_Short_Selling_I[15] = x22[int(int(len(x22)) - int(1))]  # 當日每股净值（book value per share）;
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_date_transaction"].append(y_F_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                y_F_Short_Selling_I = None  # 釋放内存;

                                                                                            # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling）;
                                                                                            if not (("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"], list)):
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"] = []
                                                                                            if ("revenue_and_expenditure_records_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"], list):
                                                                                                y_G_Short_Selling_I = float(float(-1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["revenue_and_expenditure_records_date_transaction"].append(y_G_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                y_G_Short_Selling_I = None  # 釋放内存;

                                                                                            # 每兩次對衝交易差價利潤初值;
                                                                                            if not (("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_profit_date_transaction"], list)):
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_profit_date_transaction"] = []
                                                                                            if ("Short_Selling_profit_date_transaction" in Short_Selling_testing_data_transaction_sequence_Dict[str(key)]) and isinstance(Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_profit_date_transaction"], list):
                                                                                                y_A_Short_Selling_I_2 = float(float(+1.0) * float(x3[int(int(len(x3)) - int(1))]))
                                                                                                # y_A_Short_Selling_I_2 = float(int(-1) * float(float(x3[int(int(len(x3)) - int(1))]) + float(y_A_Short_Selling_I)))
                                                                                                y_A_Short_Selling_I = float(y_A_Short_Selling_I_2)
                                                                                                # y_A_Short_Selling_I *= float(0.0)
                                                                                                # y_A_Short_Selling_I += float(y_A_Short_Selling_I_2)
                                                                                                # y_A_Short_Selling_I += float(-(x3[t + 1] - x3[k + 1]))
                                                                                                # y_A_Short_Selling_I = float(-(x3[t + 1] - x3[k + 1]))
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["Short_Selling_profit_date_transaction"].append(y_A_Short_Selling_I)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                                                                y_A_Short_Selling_I = None  # 釋放内存;

                                                                                            # 記錄做空模式本輪對衝交易的回撤值序列;
                                                                                            if isinstance(drawdown_Array_Short_Selling, list) and int(len(drawdown_Array_Short_Selling)) >= int(0):
                                                                                                Short_Selling_testing_data_transaction_sequence_Dict[str(key)]["drawdown"] = drawdown_Array_Short_Selling

                                                                                        # 釋放内存;
                                                                                        x0 = None
                                                                                        x1 = None
                                                                                        x3 = None
                                                                                        x4 = None
                                                                                        x5 = None
                                                                                        x6 = None
                                                                                        x7 = None
                                                                                        x8 = None
                                                                                        x9 = None
                                                                                        x10 = None
                                                                                        x11 = None
                                                                                        x12 = None
                                                                                        x13 = None
                                                                                        x14 = None
                                                                                        x15 = None
                                                                                        x16 = None
                                                                                        x17 = None
                                                                                        x18 = None
                                                                                        x19 = None
                                                                                        # x20 = None
                                                                                        # x21 = None
                                                                                        # x22 = None
                                                                                        # x23 = None
                                                                                        # x24 = None
                                                                                        # x25 = None
                                                                                        # x26 = None
                                                                                        # x27 = None
                                                                                        # x_Pdata_0 = None
                                                                                        # x_Plower = None
                                                                                        # x_Pupper = None
                                                                                        # x_weight = None

                                                                            t = None  # 釋放内存;

                                                if int(len(Long_Position_testing_data_transaction_sequence_Dict)) > int(0) or int(len(Short_Selling_testing_data_transaction_sequence_Dict)) > int(0):
                                                    stepping_transaction_Dict["testing_transaction"] = {}
                                                    if int(len(Long_Position_testing_data_transaction_sequence_Dict)) > int(0):
                                                        stepping_transaction_Dict["testing_transaction"]["Long_Position"] = Long_Position_testing_data_transaction_sequence_Dict
                                                    if int(len(Short_Selling_testing_data_transaction_sequence_Dict)) > int(0):
                                                        stepping_transaction_Dict["testing_transaction"]["Short_Selling"] = Short_Selling_testing_data_transaction_sequence_Dict
                                                Long_Position_testing_data_transaction_sequence_Dict = None  # 釋放内存;
                                                Short_Selling_testing_data_transaction_sequence_Dict = None  # 釋放内存;

                                                if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) > int(0) and isinstance(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))], list):
                                                    if ("Long_Position" in PickStock_Parameter_Dict):
                                                        g_min = int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))]))
                                                    else:
                                                        g_min = int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))
                                                    if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(g_min):int(1)])) > int(0):
                                                        if not ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict):
                                                            stepping_transaction_Dict["testing_PickStock_ticker_symbol"] = {}
                                                        if ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict) and isinstance(stepping_transaction_Dict["testing_PickStock_ticker_symbol"], dict):
                                                            stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Long_Position"] = PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(g_min):int(1)]
                                                if int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) > int(0) and isinstance(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))], list):
                                                    if ("Short_Selling" in PickStock_Parameter_Dict):
                                                        g_max = int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))]))
                                                    else:
                                                        g_max = int(1)
                                                    if int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(g_max) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)])) > int(0):
                                                        if not ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict):
                                                            stepping_transaction_Dict["testing_PickStock_ticker_symbol"] = {}
                                                        if ("testing_PickStock_ticker_symbol" in stepping_transaction_Dict) and isinstance(stepping_transaction_Dict["testing_PickStock_ticker_symbol"], dict):
                                                            stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Short_Selling"] = PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(g_max) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)]
                                                # PickStock_ticker_symbol_Array_testing_data_Long_Position = None  # 釋放内存;
                                                # PickStock_ticker_symbol_Array_testing_data_Short_Selling = None  # 釋放内存;

                                                if ("testing_transaction" in stepping_transaction_Dict):

                                                    # stepping_transaction_Dict["training_data"] = trainingData
                                                    # stepping_transaction_Dict["training_MarketTiming_Parameter"] = MarketTiming_Parameter_Dict
                                                    # stepping_transaction_Dict["training_PickStock_Parameter"] = PickStock_Parameter_Dict
                                                    # stepping_transaction_Dict["training_PickStock_ticker_symbol"] = PickStock_ticker_symbol_Array
                                                    # stepping_transaction_Dict["training_SizePosition_Parameter"] = SizePosition_Parameter_Array

                                                    # stepping_transaction_Dict["testing_data"] = testingData

                                                    # if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))])):int(1)])) > int(0) or int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))])) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)])) > int(0):
                                                    #     stepping_transaction_Dict["testing_PickStock_ticker_symbol"] = {}
                                                    #     if int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))])):int(1)])) > int(0):
                                                    #         stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Long_Position"] = PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))][int(0):int(min([int(PickStock_Parameter_Dict["Long_Position"][1]), int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position[int(int(len(PickStock_ticker_symbol_Array_testing_data_Long_Position)) - int(1))]))])):int(1)]
                                                    #     if int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))])) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)])) > int(0):
                                                    #         stepping_transaction_Dict["testing_PickStock_ticker_symbol"]["Short_Selling"] = PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))][int(int(max([int(1), int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])) - int(PickStock_Parameter_Dict["Short_Selling"][1]) + int(1))])) - int(1)):int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling[int(int(len(PickStock_ticker_symbol_Array_testing_data_Short_Selling)) - int(1))])):int(1)]
                                                    # PickStock_ticker_symbol_Array_testing_data_Long_Position = None  # 釋放内存;
                                                    # PickStock_ticker_symbol_Array_testing_data_Short_Selling = None  # 釋放内存;

                                                    stepping_sequence_Array.append(stepping_transaction_Dict)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                    # stepping_transaction_Dict = None  # 釋放内存;
                                                    # testingData = None  # 釋放内存;

                                    PickStock_ticker_symbol_Array_testing_data_Long_Position = None  # 釋放内存;
                                    PickStock_ticker_symbol_Array_testing_data_Short_Selling = None  # 釋放内存;

                                    # # 交易信息序列的空值，刪除未曾交易過的股票數據;
                                    # testing_data_transaction_sequence_Dict_2 = {key : value for key, value in testing_data_transaction_sequence_Dict.items()}  # 使用 Python 字典（dict）的推導式，創建副本;
                                    # for key, value in testing_data_transaction_sequence_Dict_2.items():
                                    #     if isinstance(value, dict):
                                    #         if (("Long_Position_profit_date_transaction" in value) and isinstance(value["Long_Position_profit_date_transaction"], list) and int(len(value["Long_Position_profit_date_transaction"])) == int(0)) and (("Long_Position_price_amplitude_date_transaction" in value) and isinstance(value["Long_Position_price_amplitude_date_transaction"], list) and int(len(value["Long_Position_price_amplitude_date_transaction"])) == int(0)) and (("Long_Position_volume_turnover_date_transaction" in value) and isinstance(value["Long_Position_volume_turnover_date_transaction"], list) and int(len(value["Long_Position_volume_turnover_date_transaction"])) == int(0)) and (("Long_Position_date_transaction_between" in value) and isinstance(value["Long_Position_date_transaction_between"], list) and int(len(value["Long_Position_date_transaction_between"])) == int(0)) and (("Long_Position_date_transaction" in value) and isinstance(value["Long_Position_date_transaction"], list) and int(len(value["Long_Position_date_transaction"])) == int(0)) and (("Short_Selling_profit_date_transaction" in value) and isinstance(value["Short_Selling_profit_date_transaction"], list) and int(len(value["Short_Selling_profit_date_transaction"])) == int(0)) and (("Short_Selling_price_amplitude_date_transaction" in value) and isinstance(value["Short_Selling_price_amplitude_date_transaction"], list) and int(len(value["Short_Selling_price_amplitude_date_transaction"])) == int(0)) and (("Short_Selling_volume_turnover_date_transaction" in value) and isinstance(value["Short_Selling_volume_turnover_date_transaction"], list) and int(len(value["Short_Selling_volume_turnover_date_transaction"])) == int(0)) and (("Short_Selling_date_transaction_between" in value) and isinstance(value["Short_Selling_date_transaction_between"], list) and int(len(value["Short_Selling_date_transaction_between"])) == int(0)) and (("Short_Selling_date_transaction" in value) and isinstance(value["Short_Selling_date_transaction"], list) and int(len(value["Short_Selling_date_transaction"])) == int(0)) and (("revenue_and_expenditure_records_date_transaction" in value) and isinstance(value["revenue_and_expenditure_records_date_transaction"], list) and int(len(value["revenue_and_expenditure_records_date_transaction"])) == int(0)):
                                    #             del testing_data_transaction_sequence_Dict[key]  # 刪除：testing_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                                    # testing_data_transaction_sequence_Dict_2 = None  # 釋放内存;

                                    # # 交易信息序列匯總求和;
                                    # for key, value in testing_data_transaction_sequence_Dict.items():
                                    #     if isinstance(value, dict):

                                    #         # 交易信息序列數據（融資做多 buying long）的匯總求和;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"] = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] = None  # float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] = None  # float(0.0)  # 每兩次對衝交易收益纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] = None  # float(0.0)  # 每兩次對衝交易損失纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交價振幅平方和，均值;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交量（換手率）均值;
                                    #         testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"] = None  # float(0.0)  # 兩次對衝交易間隔日長，均值;
                                    #         testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = None  # float(0.0)  # 優化目標變量，做多（Long Position），每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = None  # float(0.0)  # 優化目標變量，做多（Long Position），每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #         if investment_method == "Long_Position_and_Short_Selling" or investment_method == "Long_Position":

                                    #             weight_Long_Position = []
                                    #             if "Long_Position_profit_date_transaction" in value and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #                 # print(value["Long_Position_profit_date_transaction"])
                                    #                 if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     if isinstance(P1, dict) and (str(key) in P1) and isinstance(P1[str(key)], dict) and ("Long_Position" in P1[str(key)]):
                                    #                         weight_Long_Position = [float(P1[str(key)]["Long_Position"]) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]  # 倉位;
                                    #                     else:
                                    #                         weight_Long_Position = [float(1.0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]  # 倉位;
                                    #             # if "Long_Position_profit_date_transaction" in value and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #             #     # print(value["Long_Position_profit_date_transaction"])
                                    #             #     if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #             #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]))):
                                    #             #             weight_Long_Position = [float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]
                                    #             #             # if float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) > float(0.0) and float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) > float(0.0):
                                    #             #             #     weight_Long_Position = [float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]
                                    #             #             # elif float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) > float(0.0) and float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) <= float(0.0):
                                    #             #             #     weight_Long_Position = [float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]
                                    #             #             # elif float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) <= float(0.0) and float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) > float(0.0):
                                    #             #             #     weight_Long_Position = [float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]
                                    #             #             # else:
                                    #             #             #     weight_Long_Position = [float(1.0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]
                                    #             #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"])) or ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"])):
                                    #             #             weight_Long_Position = [float(1.0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]
                                    #             #         # else:
                                    #             # if "Long_Position_date_transaction_between" in value and isinstance(value["Long_Position_date_transaction_between"], list):
                                    #             #     # print(value["Long_Position_date_transaction_between"])
                                    #             #     if int(len(value["Long_Position_date_transaction_between"])) > int(0):
                                    #             #         weight_Long_Position = [float(int(1) / int(value["Long_Position_date_transaction_between"][i])) for i in range(int(0), int(len(value["Long_Position_date_transaction_between"])), int(1))]  # 每兩次對衝交易間隔日長的倒數;
                                    #             # if "Long_Position_price_amplitude_date_transaction" in value and isinstance(value["Long_Position_price_amplitude_date_transaction"], list):
                                    #             #     # print(value["Long_Position_price_amplitude_date_transaction"])
                                    #             #     if int(len(value["Long_Position_price_amplitude_date_transaction"])) > int(0):
                                    #             #         weight_Long_Position = [float(int(1) / float(value["Long_Position_price_amplitude_date_transaction"][i])) for i in range(int(0), int(len(value["Long_Position_price_amplitude_date_transaction"])), int(1))]  # 兩次對衝交易日成交價振幅平方和的倒數;
                                    #             # if "Long_Position_volume_turnover_date_transaction" in value and isinstance(value["Long_Position_volume_turnover_date_transaction"], list):
                                    #             #     # print(value["Long_Position_volume_turnover_date_transaction"])
                                    #             #     if int(len(value["Long_Position_volume_turnover_date_transaction"])) > int(0):
                                    #             #         weight_Long_Position = [float(value["Long_Position_volume_turnover_date_transaction"][i]) for i in range(int(0), int(len(value["Long_Position_volume_turnover_date_transaction"])), int(1))]  # 兩次對衝交易日成交量（換手率）均值;

                                    #             if "Long_Position_profit_date_transaction" in value and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #                 # print(value["Long_Position_profit_date_transaction"])
                                    #                 if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     if int(len(weight_Long_Position)) > int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"] = float(sum([float(float(value["Long_Position_profit_date_transaction"][i]) * float(weight_Long_Position[i])) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 倉位，纍加總計;
                                    #                     elif int(len(weight_Long_Position)) <= int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"] = float(sum([float(float(value["Long_Position_profit_date_transaction"][i]) * float(1.0)) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤，纍加總計;
                                    #                     # else:

                                    #             if "Long_Position_drawdown_date_transaction" in value and isinstance(value["Long_Position_drawdown_date_transaction"], list):
                                    #                 # print(value["Long_Position_drawdown_date_transaction"])
                                    #                 testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] = float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #                 if int(len(value["Long_Position_drawdown_date_transaction"])) > int(0) and int(max([int(len(value["Long_Position_drawdown_date_transaction"][i])) if isinstance(value["Long_Position_drawdown_date_transaction"][i], list) else (-math.inf) for i in range(int(0), int(len(value["Long_Position_drawdown_date_transaction"])), int(1))])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] = float(min([float(min(value["Long_Position_drawdown_date_transaction"][i])) for i in range(int(0), int(len(value["Long_Position_drawdown_date_transaction"])), int(1)) if (isinstance(value["Long_Position_drawdown_date_transaction"][i], list) and int(len(value["Long_Position_drawdown_date_transaction"][i])) > int(0))]))  # 每兩次對衝交易最大回撤損失，取極值統計;
                                    #                     # testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] = float(min([float(min(value["Long_Position_drawdown_date_transaction"][i])) if (isinstance(value["Long_Position_drawdown_date_transaction"][i], list) and int(len(value["Long_Position_drawdown_date_transaction"][i])) > int(0)) else (+math.inf) for i in range(int(0), int(len(value["Long_Position_drawdown_date_transaction"])), int(1))]))  # 每兩次對衝交易最大回撤損失，取極值統計;

                                    #             if "Long_Position_profit_date_transaction" in value and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #                 # print(value["Long_Position_profit_date_transaction"])
                                    #                 if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     if int(len([float(value["Long_Position_profit_date_transaction"][i]) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(0.0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))])) > int(0):
                                    #                         if int(len(weight_Long_Position)) > int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] = float(sum([float(float(value["Long_Position_profit_date_transaction"][i]) * float(weight_Long_Position[i])) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(float(0.0) * float(weight_Long_Position[i])) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))
                                    #                         elif int(len(weight_Long_Position)) <= int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] = float(sum([float(float(value["Long_Position_profit_date_transaction"][i]) * float(1.0)) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(float(0.0) * float(1.0)) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))
                                    #                         # else:
                                    #                     if int(len([float(value["Long_Position_profit_date_transaction"][i]) if float(value["Long_Position_profit_date_transaction"][i]) < float(0.0) else float(0.0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))])) > int(0):
                                    #                         if int(len(weight_Long_Position)) > int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] = float(sum([float(float(value["Long_Position_profit_date_transaction"][i]) * float(weight_Long_Position[i])) if float(value["Long_Position_profit_date_transaction"][i]) < float(0.0) else float(float(0.0) * float(weight_Long_Position[i])) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))
                                    #                         elif int(len(weight_Long_Position)) <= int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] = float(sum([float(float(value["Long_Position_profit_date_transaction"][i]) * float(1.0)) if float(value["Long_Position_profit_date_transaction"][i]) < float(0.0) else float(float(0.0) * float(1.0)) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))
                                    #                         # else:

                                    #                     # testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] = float(0.0)  # 交易規則正利潤纍計;
                                    #                     # testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] = float(0.0)  # 交易規則負利潤纍計;
                                    #                     # for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1)):
                                    #                     #     if int(value["Long_Position_profit_date_transaction"][i]) > float(0):
                                    #                     #         if int(len(weight_Long_Position)) > int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"]) + float(float(value["Long_Position_profit_date_transaction"][i]) * float(weight_Long_Position[i])))
                                    #                     #         elif int(len(weight_Long_Position)) <= int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"]) + float(float(value["Long_Position_profit_date_transaction"][i]) * float(1.0)))
                                    #                     #         # else:
                                    #                     #     elif int(value["Long_Position_profit_date_transaction"][i]) < float(0):
                                    #                     #         if int(len(weight_Long_Position)) > int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"]) + float(float(value["Long_Position_profit_date_transaction"][i]) * float(weight_Long_Position[i])))
                                    #                     #         elif int(len(weight_Long_Position)) <= int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"]) + float(float(value["Long_Position_profit_date_transaction"][i]) * float(1.0)))
                                    #                     #         # else:
                                    #                     #     # else:

                                    #             if "Long_Position_profit_date_transaction" in value and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #                 # print(value["Long_Position_profit_date_transaction"])
                                    #                 if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] = float(int(sum([int(1) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))])) / int(len(value["Long_Position_profit_date_transaction"])))
                                    #                     testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] = float(int(sum([int(1) if float(value["Long_Position_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))])) / int(len(value["Long_Position_profit_date_transaction"])))

                                    #                     # testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] = int(0)  # float(0.0)  # 交易規則正利潤頻率;
                                    #                     # testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] = int(0)  # float(0.0)  # 交易規則負利潤頻率;
                                    #                     # for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1)):
                                    #                     #     if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0):
                                    #                     #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] = int(int(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) + int(1))
                                    #                     #     elif float(value["Long_Position_profit_date_transaction"][i]) < float(0.0):
                                    #                     #         testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] = int(int(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) + int(1))
                                    #                     #     # else:
                                    #                     # if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     #     testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] = float(int(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) / int(len(value["Long_Position_profit_date_transaction"])))
                                    #                     #     testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] = float(int(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]) / int(len(value["Long_Position_profit_date_transaction"])))

                                    #             # # y = float(y_Positive_Long_Position * y_P_Positive_Long_Position)  # 每兩次對衝交易正利潤 × 頻率，纍加總計;
                                    #             # # y = float(y_Negative_Long_Position * y_P_Negative_Long_Position)  # 每兩次對衝交易負利潤 × 頻率，纍加總計;
                                    #             # y = float(y_Positive_Long_Position * y_P_Positive_Long_Position) - float(y_Negative_Long_Position * y_P_Negative_Long_Position)

                                    #             if "Long_Position_price_amplitude_date_transaction" in value and isinstance(value["Long_Position_price_amplitude_date_transaction"], list):
                                    #                 # print(value["Long_Position_price_amplitude_date_transaction"])
                                    #                 if int(len(value["Long_Position_price_amplitude_date_transaction"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"] = float(numpy.mean(value["Long_Position_price_amplitude_date_transaction"]))  # amplitude_rate;

                                    #             if "Long_Position_volume_turnover_date_transaction" in value and isinstance(value["Long_Position_volume_turnover_date_transaction"], list):
                                    #                 # print(value["Long_Position_volume_turnover_date_transaction"])
                                    #                 if int(len(value["Long_Position_volume_turnover_date_transaction"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"] = float(numpy.mean(value["Long_Position_volume_turnover_date_transaction"]))  # turnover_volume; turnover_rate;

                                    #             if "Long_Position_date_transaction_between" in value and isinstance(value["Long_Position_date_transaction_between"], list):
                                    #                 # print(value["Long_Position_date_transaction_between"])
                                    #                 if int(len(value["Long_Position_date_transaction_between"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"] = float(numpy.mean(value["Long_Position_date_transaction_between"]))  # Between two date_transaction;

                                    #             # testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(0.0)
                                    #             if "Long_Position_profit_date_transaction" in value and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #                 # print(value["Long_Position_profit_date_transaction"])
                                    #                 if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     if int(len(weight_Long_Position)) > int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(sum([float(float(weight_Long_Position[i]) * float(value["Long_Position_profit_date_transaction"][i])) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #                         # testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(0.0)  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    #                         # for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1)):
                                    #                         #     testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]) + float(weight_Long_Position[i] * value["Long_Position_profit_date_transaction"][i])
                                    #                     elif int(len(weight_Long_Position)) <= int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(sum([float(value["Long_Position_profit_date_transaction"][i]) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]));  # 每兩次對衝交易利潤，加權纍加總計;
                                    #                         # testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                                    #                         # for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1)):
                                    #                         #     testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] = float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]) + float(value["Long_Position_profit_date_transaction"][i])
                                    #                     # else:

                                    #             # testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = float(0.0)
                                    #             if "maximum_drawdown_Long_Position" in testing_data_transaction_sequence_Dict[key] and (not ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]))):
                                    #                 if float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]) > float(0.0):
                                    #                     if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]))):
                                    #                         if float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) > float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]):
                                    #                             testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = float(float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]) * float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) - float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"])))  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #                         elif float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]) <= float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]):
                                    #                             testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = float(float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]) * float(0.0))  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #                         # else:
                                    #                     elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"])) or ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"])):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"])  # 每兩次對衝交易最大回撤，加權取極值總計;
                                    #                     # else:
                                    #                 elif float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]) <= float(0.0):
                                    #                     if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]))):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = float(float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]) * float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"]))  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #                     elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive_probability"])) or ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative_probability"])):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] = float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"])  # 每兩次對衝交易最大回撤，加權取極值總計;
                                    #                     # else:
                                    #                 # else:

                                    #             # 優化目標變量合入風險因素;
                                    #             # if float(y_P_Negative_Long_Position) == float(0.0):
                                    #             #     y_Long_Position_profit = float(y_Long_Position_profit * y_P_Positive_Long_Position)  # 每次交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;
                                    #             # else:
                                    #             #     y_Long_Position_profit = float(y_Long_Position_profit * float(y_P_Positive_Long_Position / y_P_Negative_Long_Position))  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;

                                    #             weight_Long_Position = None

                                    #         # 交易信息序列數據（融券做空 short selling）的匯總求和;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"] = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] = None  # float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] = None  # float(0.0)  # 每兩次對衝交易收益纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] = None  # float(0.0)  # 每兩次對衝交易損失纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交價振幅平方和，均值;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交量（換手率）均值;
                                    #         testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"] = None  # float(0.0)  # 兩次對衝交易間隔日長，均值;
                                    #         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = None  # float(0.0)  # 優化目標變量，做空（Short Selling），每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = None  # float(0.0)  # 優化目標變量，做空（Short Selling），每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #         if investment_method == "Long_Position_and_Short_Selling" or investment_method == "Short_Selling":

                                    #             weight_Short_Selling = []
                                    #             if "Short_Selling_profit_date_transaction" in value and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #                 # print(value["Short_Selling_profit_date_transaction"])
                                    #                 if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     if isinstance(P1, dict) and (str(key) in P1) and isinstance(P1[str(key)], dict) and ("Short_Selling" in P1[str(key)]):
                                    #                         weight_Short_Selling = [float(P1[str(key)]["Short_Selling"]) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]  # 倉位;
                                    #                     else:
                                    #                         weight_Short_Selling = [float(1.0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]  # 倉位;
                                    #             # if "Short_Selling_profit_date_transaction" in value and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #             #     # print(value["Short_Selling_profit_date_transaction"])
                                    #             #     if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #             #         if (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]))):
                                    #             #             weight_Short_Selling = [float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]
                                    #             #             # if float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) > float(0.0) and float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) > float(0.0):
                                    #             #             #     weight_Short_Selling = [float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]
                                    #             #             # elif float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) > float(0.0) and float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) <= float(0.0):
                                    #             #             #     weight_Short_Selling = [float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]
                                    #             #             # elif float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) <= float(0.0) and float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) > float(0.0):
                                    #             #             #     weight_Short_Selling = [float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]
                                    #             #             # else:
                                    #             #             #     weight_Short_Selling = [float(1.0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]
                                    #             #         elif ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"])) or ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"])):
                                    #             #             weight_Short_Selling = [float(1.0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]
                                    #             #         # else:
                                    #             # if "Short_Selling_date_transaction_between" in value and isinstance(value["Short_Selling_date_transaction_between"], list):
                                    #             #     # print(value["Short_Selling_date_transaction_between"])
                                    #             #     if int(len(value["Short_Selling_date_transaction_between"])) > int(0):
                                    #             #         weight_Short_Selling = [float(int(1) / int(value["Short_Selling_date_transaction_between"][i])) for i in range(int(0), int(len(value["Short_Selling_date_transaction_between"])), int(1))]  # 每兩次對衝交易間隔日長的倒數;
                                    #             # if "Short_Selling_price_amplitude_date_transaction" in value and isinstance(value["Short_Selling_price_amplitude_date_transaction"], list):
                                    #             #     # print(value["Short_Selling_price_amplitude_date_transaction"])
                                    #             #     if int(len(value["Short_Selling_price_amplitude_date_transaction"])) > int(0):
                                    #             #         weight_Short_Selling = [float(int(1) / float(value["Short_Selling_price_amplitude_date_transaction"][i])) for i in range(int(0), int(len(value["Short_Selling_price_amplitude_date_transaction"])), int(1))]  # 兩次對衝交易日成交價振幅平方和的倒數;
                                    #             # if "Short_Selling_volume_turnover_date_transaction" in value and isinstance(value["Short_Selling_volume_turnover_date_transaction"], list):
                                    #             #     # print(value["Short_Selling_volume_turnover_date_transaction"])
                                    #             #     if int(len(value["Short_Selling_volume_turnover_date_transaction"])) > int(0):
                                    #             #         weight_Short_Selling = [float(value["Short_Selling_volume_turnover_date_transaction"][i]) for i in range(int(0), int(len(value["Short_Selling_volume_turnover_date_transaction"])), int(1))]  # 兩次對衝交易日成交量（換手率）均值;

                                    #             if "Short_Selling_profit_date_transaction" in value and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #                 # print(value["Short_Selling_profit_date_transaction"])
                                    #                 if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     if int(len(weight_Short_Selling)) > int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"] = float(sum([float(float(value["Short_Selling_profit_date_transaction"][i]) * float(weight_Short_Selling[i])) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 倉位，纍加總計;
                                    #                     elif int(len(weight_Short_Selling)) <= int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"] = float(sum([float(float(value["Short_Selling_profit_date_transaction"][i]) * float(1.0)) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤，纍加總計;
                                    #                     # else:

                                    #             if "Short_Selling_drawdown_date_transaction" in value and isinstance(value["Short_Selling_drawdown_date_transaction"], list):
                                    #                 # print(value["Short_Selling_drawdown_date_transaction"])
                                    #                 testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] = float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #                 if int(len(value["Short_Selling_drawdown_date_transaction"])) > int(0) and int(max([int(len(value["Short_Selling_drawdown_date_transaction"][i])) if isinstance(value["Short_Selling_drawdown_date_transaction"][i], list) else (-math.inf) for i in range(int(0), int(len(value["Short_Selling_drawdown_date_transaction"])), int(1))])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] = float(min([float(min(value["Short_Selling_drawdown_date_transaction"][i])) for i in range(int(0), int(len(value["Short_Selling_drawdown_date_transaction"])), int(1)) if (isinstance(value["Short_Selling_drawdown_date_transaction"][i], list) and int(len(value["Short_Selling_drawdown_date_transaction"][i])) > int(0))]))  # 每兩次對衝交易最大回撤損失，取極值統計;
                                    #                     # testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] = float(min([float(min(value["Short_Selling_drawdown_date_transaction"][i])) if (isinstance(value["Short_Selling_drawdown_date_transaction"][i], list) and int(len(value["Short_Selling_drawdown_date_transaction"][i])) > int(0)) else (+math.inf) for i in range(int(0), int(len(value["Short_Selling_drawdown_date_transaction"])), int(1))]))  # 每兩次對衝交易最大回撤損失，取極值統計;

                                    #             if "Short_Selling_profit_date_transaction" in value and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #                 # print(value["Short_Selling_profit_date_transaction"])
                                    #                 if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     if int(len([float(value["Short_Selling_profit_date_transaction"][i]) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(0.0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))])) > int(0):
                                    #                         if int(len(weight_Short_Selling)) > int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] = float(sum([float(float(value["Short_Selling_profit_date_transaction"][i]) * float(weight_Short_Selling[i])) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(float(0.0) * float(weight_Short_Selling[i])) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))
                                    #                         elif int(len(weight_Short_Selling)) <= int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] = float(sum([float(float(value["Short_Selling_profit_date_transaction"][i]) * float(1.0)) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(float(0.0) * float(1.0)) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))
                                    #                         # else:
                                    #                     if int(len([float(value["Short_Selling_profit_date_transaction"][i]) if float(value["Short_Selling_profit_date_transaction"][i]) < float(0.0) else float(0.0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))])) > int(0):
                                    #                         if int(len(weight_Short_Selling)) > int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] = float(sum([float(float(value["Short_Selling_profit_date_transaction"][i]) * float(weight_Short_Selling[i])) if float(value["Short_Selling_profit_date_transaction"][i]) < float(0.0) else float(float(0.0) * float(weight_Short_Selling[i])) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))
                                    #                         elif int(len(weight_Short_Selling)) <= int(0):
                                    #                             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] = float(sum([float(float(value["Short_Selling_profit_date_transaction"][i]) * float(1.0)) if float(value["Short_Selling_profit_date_transaction"][i]) < float(0.0) else float(float(0.0) * float(1.0)) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))
                                    #                         # else:

                                    #                     # testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] = float(0.0)  # 交易規則正利潤纍計;
                                    #                     # testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] = float(0.0)  # 交易規則負利潤纍計;
                                    #                     # for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1)):
                                    #                     #     if int(value["Short_Selling_profit_date_transaction"][i]) > float(0):
                                    #                     #         if int(len(weight_Short_Selling)) > int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] = float(float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"]) + float(float(value["Short_Selling_profit_date_transaction"][i]) * float(weight_Short_Selling[i])))
                                    #                     #         elif int(len(weight_Short_Selling)) <= int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] = float(float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"]) + float(float(value["Short_Selling_profit_date_transaction"][i]) * float(1.0)))
                                    #                     #         # else:
                                    #                     #     elif int(value["Short_Selling_profit_date_transaction"][i]) < float(0):
                                    #                     #         if int(len(weight_Short_Selling)) > int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] = float(float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"]) + float(float(value["Short_Selling_profit_date_transaction"][i]) * float(weight_Short_Selling[i])))
                                    #                     #         elif int(len(weight_Short_Selling)) <= int(0):
                                    #                     #             testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] = float(float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"]) + float(float(value["Short_Selling_profit_date_transaction"][i]) * float(1.0)))
                                    #                     #         # else:
                                    #                     #     # else:

                                    #             if "Short_Selling_profit_date_transaction" in value and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #                 # print(value["Short_Selling_profit_date_transaction"])
                                    #                 if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] = float(int(sum([int(1) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))])) / int(len(value["Short_Selling_profit_date_transaction"])))
                                    #                     testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] = float(int(sum([int(1) if float(value["Short_Selling_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))])) / int(len(value["Short_Selling_profit_date_transaction"])))

                                    #                     # testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] = int(0)  # float(0.0)  # 交易規則正利潤頻率;
                                    #                     # testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] = int(0)  # float(0.0)  # 交易規則負利潤頻率;
                                    #                     # for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1)):
                                    #                     #     if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0):
                                    #                     #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] = int(int(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) + int(1))
                                    #                     #     elif float(value["Short_Selling_profit_date_transaction"][i]) < float(0.0):
                                    #                     #         testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] = int(int(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) + int(1))
                                    #                     #     # else:
                                    #                     # if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     #     testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] = float(int(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) / int(len(value["Short_Selling_profit_date_transaction"])))
                                    #                     #     testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] = float(int(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]) / int(len(value["Short_Selling_profit_date_transaction"])))

                                    #             # # y = float(y_Positive_Short_Selling * y_P_Positive_Short_Selling)  # 每兩次對衝交易正利潤 × 頻率，纍加總計;
                                    #             # # y = float(y_Negative_Short_Selling * y_P_Negative_Short_Selling)  # 每兩次對衝交易負利潤 × 頻率，纍加總計;
                                    #             # y = float(y_Positive_Short_Selling * y_P_Positive_Short_Selling) - float(y_Negative_Short_Selling * y_P_Negative_Short_Selling)

                                    #             if "Short_Selling_price_amplitude_date_transaction" in value and isinstance(value["Short_Selling_price_amplitude_date_transaction"], list):
                                    #                 # print(value["Short_Selling_price_amplitude_date_transaction"])
                                    #                 if int(len(value["Short_Selling_price_amplitude_date_transaction"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"] = float(numpy.mean(value["Short_Selling_price_amplitude_date_transaction"]))  # amplitude_rate;

                                    #             if "Short_Selling_volume_turnover_date_transaction" in value and isinstance(value["Short_Selling_volume_turnover_date_transaction"], list):
                                    #                 # print(value["Short_Selling_volume_turnover_date_transaction"])
                                    #                 if int(len(value["Short_Selling_volume_turnover_date_transaction"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"] = float(numpy.mean(value["Short_Selling_volume_turnover_date_transaction"]))  # turnover_volume; turnover_rate;

                                    #             if "Short_Selling_date_transaction_between" in value and isinstance(value["Short_Selling_date_transaction_between"], list):
                                    #                 # print(value["Short_Selling_date_transaction_between"])
                                    #                 if int(len(value["Short_Selling_date_transaction_between"])) > int(0):
                                    #                     testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"] = float(numpy.mean(value["Short_Selling_date_transaction_between"]))  # Between two date_transaction;

                                    #             # testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(0.0)
                                    #             if "Short_Selling_profit_date_transaction" in value and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #                 # print(value["Short_Selling_profit_date_transaction"])
                                    #                 if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     if int(len(weight_Short_Selling)) > int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(sum([float(float(weight_Short_Selling[i]) * float(value["Short_Selling_profit_date_transaction"][i])) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #                         # testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(0.0)  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    #                         # for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1)):
                                    #                         #     testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]) + float(weight_Short_Selling[i] * value["Short_Selling_profit_date_transaction"][i])
                                    #                     elif int(len(weight_Short_Selling)) <= int(0):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(sum([float(value["Short_Selling_profit_date_transaction"][i]) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤，加權纍加總計;
                                    #                         # testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                                    #                         # for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1)):
                                    #                         #     testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] = float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]) + float(value["Short_Selling_profit_date_transaction"][i])
                                    #                     # else:

                                    #             # testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = float(0.0)
                                    #             if "maximum_drawdown_Short_Selling" in testing_data_transaction_sequence_Dict[key] and isinstance(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"], list):
                                    #                 if float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]) > float(0.0):
                                    #                     if (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]))):
                                    #                         if float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) > float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]):
                                    #                             testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = float(float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]) * float(float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) - float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"])))  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #                         elif float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]) <= float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]):
                                    #                             testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = float(float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]) * float(0.0))  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #                         # else:
                                    #                     elif ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"])) or ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"])):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"])  # 每兩次對衝交易最大回撤，加權取極值總計;
                                    #                     # else:
                                    #                 elif float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]) <= float(0.0):
                                    #                     if (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]))):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = float(float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]) * float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"]))  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #                     elif ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive_probability"])) or ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative_probability"])):
                                    #                         testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] = float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"])  # 每兩次對衝交易最大回撤，加權取極值總計;
                                    #                     # else:
                                    #                 # else:

                                    #             # 優化目標變量合入風險因素;
                                    #             # if float(y_P_Negative_Short_Selling) == float(0.0):
                                    #             #     y_Short_Selling_profit = float(y_Short_Selling_profit * y_P_Positive_Short_Selling)  # 每次交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;
                                    #             # else:
                                    #             #     y_Short_Selling_profit = float(y_Short_Selling_profit * float(y_P_Positive_Short_Selling / y_P_Negative_Short_Selling))  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;

                                    #             weight_Short_Selling = None  # 釋放内存;

                                    #         # 交易信息序列數據（融資做多 buying long）+（融券做空 short selling）的匯總求和;
                                    #         testing_data_transaction_sequence_Dict[key]["profit_total"] = None  # float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"]))  # 每兩次對衝交易利潤，纍加總計;
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_total"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"]))  # 每兩次對衝交易利潤，纍加總計;
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"]))) and ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"])):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_total"] = float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"])
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_total"])) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_total"] = float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_total"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["profit_total"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["maximum_drawdown"] = None
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]))) and (not ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(min([testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"], testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]]))  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"]))) and ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"])):
                                    #             testing_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Long_Position"])) and (not ((testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(testing_data_transaction_sequence_Dict[key]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["maximum_drawdown"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["profit_Positive"] = None  # float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"]))  # 每兩次對衝交易收益纍加總計;
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Positive"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"]))  # 每兩次對衝交易收益纍加總計;
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"]))) and ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"])):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Positive"] = float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"])
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Positive"])) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Positive"] = float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Positive"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Positive"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["profit_Negative"] = None  # float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"]))  # 每兩次對衝交易損失纍加總計;
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Negative"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"]))  # 每兩次對衝交易損失纍加總計;
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"]))) and ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"])):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Negative"] = float(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"])
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_profit_Negative"])) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Negative"] = float(testing_data_transaction_sequence_Dict[key]["Short_Selling_profit_Negative"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Negative"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                                    #         testing_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                                    #         if (("Long_Position_profit_date_transaction" in value) and isinstance(value["Long_Position_profit_date_transaction"], list) and int(len(value["Long_Position_profit_date_transaction"])) > int(0)) or (("Short_Selling_profit_date_transaction" in value) and isinstance(value["Short_Selling_profit_date_transaction"], list) and int(len(value["Short_Selling_profit_date_transaction"])) > int(0)):
                                    #             y_Positive_count_Long_Position = int(0)
                                    #             y_Negative_count_Long_Position = int(0)
                                    #             y_Positive_count_Short_Selling = int(0)
                                    #             y_Negative_count_Short_Selling = int(0)
                                    #             if ("Long_Position_profit_date_transaction" in value) and isinstance(value["Long_Position_profit_date_transaction"], list):
                                    #                 if int(len(value["Long_Position_profit_date_transaction"])) > int(0):
                                    #                     y_Positive_count_Long_Position = int(sum([int(1) if float(value["Long_Position_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))
                                    #                     y_Negative_count_Long_Position = int(sum([int(1) if float(value["Long_Position_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position_profit_date_transaction"])), int(1))]))
                                    #             if ("Short_Selling_profit_date_transaction" in value) and isinstance(value["Short_Selling_profit_date_transaction"], list):
                                    #                 if int(len(value["Short_Selling_profit_date_transaction"])) > int(0):
                                    #                     y_Positive_count_Short_Selling = int(sum([int(1) if float(value["Short_Selling_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))
                                    #                     y_Negative_count_Short_Selling = int(sum([int(1) if float(value["Short_Selling_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling_profit_date_transaction"])), int(1))]))
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = float(int(int(y_Positive_count_Long_Position) + int(y_Positive_count_Short_Selling)) / int(int(len(value["Long_Position_profit_date_transaction"])) + int(len(value["Short_Selling_profit_date_transaction"]))))
                                    #             testing_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = float(int(int(y_Negative_count_Long_Position) + int(y_Negative_count_Short_Selling)) / int(int(len(value["Long_Position_profit_date_transaction"])) + int(len(value["Short_Selling_profit_date_transaction"]))))
                                    #         testing_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = None  # float(0.0)  # float(float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"])) / int(2))  # 兩次對衝交易日成交價振幅平方和，均值;
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"] + testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"]) / int(2))
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"]))) and ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"])):
                                    #             testing_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"])
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_price_amplitude_date_transaction"])) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_price_amplitude_date_transaction"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = None  # float(0.0)  # float(float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"])) / int(2))  # 兩次對衝交易日成交量（換手率）均值;
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"] + testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"]) / int(2))
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"]))) and ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"])):
                                    #             testing_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"])
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_volume_turnover_date_transaction"])) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_volume_turnover_date_transaction"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = None  # float(0.0)  # float(float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"]) + float(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"])) / int(2))  # 兩次對衝交易間隔日長，均值，Between two date_transaction;
                                    #         if (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"]))) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"] + testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"]) / int(2))  # Between two date_transaction;
                                    #         elif (not ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"]))) and ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"])):
                                    #             testing_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"])  # Between two date_transaction;
                                    #         elif ((testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Long_Position_average_date_transaction_between"])) and (not ((testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(testing_data_transaction_sequence_Dict[key]["Short_Selling_average_date_transaction_between"])  # Between two date_transaction;
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = None
                                    #         testing_data_transaction_sequence_Dict[key]["y_profit"] = None  # float(float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]) + float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]))  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #         if ((not ("y_Long_Position_profit" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]))) and ((not ("y_Short_Selling_profit" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["y_profit"] = None  # float(float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]) + float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]))  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #         elif (("y_Long_Position_profit" in testing_data_transaction_sequence_Dict[key]) and (not ((testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"])))) and ((not ("y_Short_Selling_profit" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["y_profit"] = float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"])
                                    #         elif ((not ("y_Long_Position_profit" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]))) and (("y_Short_Selling_profit" in testing_data_transaction_sequence_Dict[key]) and (not ((testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"])))):
                                    #             testing_data_transaction_sequence_Dict[key]["y_profit"] = float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["y_profit"] = float(float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_profit"]) + float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_profit"]))  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #         testing_data_transaction_sequence_Dict[key]["y_loss"] = None  # float(min([float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"]), float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"])]))  # 優化目標變量，每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #         if ((not ("y_Long_Position_loss" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"]))) and ((not ("y_Short_Selling_loss" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["y_loss"] = None  # float(min([float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"]), float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"])]))  # 優化目標變量，每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #         elif (("y_Long_Position_loss" in testing_data_transaction_sequence_Dict[key]) and (not ((testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"])))) and ((not ("y_Short_Selling_loss" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"]))):
                                    #             testing_data_transaction_sequence_Dict[key]["y_loss"] = float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"])
                                    #         elif ((not ("y_Long_Position_loss" in testing_data_transaction_sequence_Dict[key])) or ((testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"]))) and (("y_Short_Selling_loss" in testing_data_transaction_sequence_Dict[key]) and (not ((testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"] is None) or numpy.isnan(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"])))):
                                    #             testing_data_transaction_sequence_Dict[key]["y_loss"] = float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"])
                                    #         else:
                                    #             testing_data_transaction_sequence_Dict[key]["y_loss"] = float(min([float(testing_data_transaction_sequence_Dict[key]["y_Long_Position_loss"]), float(testing_data_transaction_sequence_Dict[key]["y_Short_Selling_loss"])]))  # 優化目標變量，每兩次對衝交易最大回撤 × 權重，加權取極值總計;

                                    # # 清洗交易信息序列數據，刪除無意義數據;
                                    # # for key, value in testing_data_transaction_sequence_Dict.items():
                                    # #     if isinstance(value, dict):
                                    # #         if "Index_date_transaction_Long_Position" in value:
                                    # #             # if isinstance(value["Index_date_transaction_Long_Position"], int) or isinstance(value["Index_date_transaction_Long_Position"], float):
                                    # #             del testing_data_transaction_sequence_Dict[key]["Index_date_transaction_Long_Position"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："Index_date_transaction_Long_Position" ;
                                    # #         if "y_B_Long_Position" in value:
                                    # #             # if isinstance(value["y_B_Long_Position"], list):
                                    # #             del testing_data_transaction_sequence_Dict[key]["y_B_Long_Position"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："y_B_Long_Position" ;
                                    # #         if "Index_date_transaction_Short_Selling" in value:
                                    # #             # if isinstance(value["Index_date_transaction_Short_Selling"], int) or isinstance(value["Index_date_transaction_Short_Selling"], float):
                                    # #             del testing_data_transaction_sequence_Dict[key]["Index_date_transaction_Short_Selling"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："Index_date_transaction_Short_Selling" ;
                                    # #         if "y_B_Short_Selling" in value:
                                    # #             # if isinstance(value["y_B_Short_Selling"], list):
                                    # #             del testing_data_transaction_sequence_Dict[key]["y_B_Short_Selling"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："y_B_Short_Selling" ;
                                    # testing_data_transaction_sequence_Dict_2 = {key : value for key, value in testing_data_transaction_sequence_Dict.items()}  # 使用 Python 字典（dict）的推導式，創建副本;
                                    # for key, value in testing_data_transaction_sequence_Dict_2.items():
                                    #     if isinstance(value, dict):
                                    #         if "Index_date_transaction_Long_Position" in value:
                                    #             # if isinstance(value["Index_date_transaction_Long_Position"], int) or isinstance(value["Index_date_transaction_Long_Position"], float):
                                    #             del testing_data_transaction_sequence_Dict[key]["Index_date_transaction_Long_Position"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："Index_date_transaction_Long_Position" ;
                                    #         if "y_B_Long_Position" in value:
                                    #             # if isinstance(value["y_B_Long_Position"], list):
                                    #             del testing_data_transaction_sequence_Dict[key]["y_B_Long_Position"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："y_B_Long_Position" ;
                                    #         if "Index_date_transaction_Short_Selling" in value:
                                    #             # if isinstance(value["Index_date_transaction_Short_Selling"], int) or isinstance(value["Index_date_transaction_Short_Selling"], float):
                                    #             del testing_data_transaction_sequence_Dict[key]["Index_date_transaction_Short_Selling"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："Index_date_transaction_Short_Selling" ;
                                    #         if "y_B_Short_Selling" in value:
                                    #             # if isinstance(value["y_B_Short_Selling"], list):
                                    #             del testing_data_transaction_sequence_Dict[key]["y_B_Short_Selling"]  # 刪除：testing_data_transaction_sequence_Dict[key] 字典（dict）中的鍵值對："y_B_Short_Selling" ;
                                    # testing_data_transaction_sequence_Dict_2 = None  # 釋放内存;
                                    # # # 每一股票（ticker symbol）函數返回值;
                                    # # testing_data_transaction_sequence_Dict == {
                                    # #     "ticker_symbol" : {
                                    # #         "y": y,  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # #         "y_Long_Position": y_Long_Position,  # 優化目標變量，做多（Long Position），每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # #         "y_Short_Selling": y_Short_Selling,  # 優化目標變量，做空（Short Selling），每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    # #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    # #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                    # #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                    # #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                    # #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                    # #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                    # #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                    # #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                    # #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                    # #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                    # #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                    # #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                    # #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                    # #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
                                    # #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
                                    # #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩次對衝交易日成交價振幅平方和，均值;
                                    # #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩次對衝交易日成交價振幅平方和，均值;
                                    # #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，均值;
                                    # #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
                                    # #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                    # #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                    # #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                    # #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
                                    # #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
                                    # #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                    # #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                    # #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                    # #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
                                    # #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
                                    # #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
                                    # #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
                                    # #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
                                    # #         "revenue_and_expenditure_records_date_transaction": y_G  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
                                    # #     }
                                    # # }

                                    # # 交易過股票的總隻數，函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
                                    # number_PickStock_transaction = int(len([key for key in testing_data_transaction_sequence_Dict.keys()]))  # 交易過股票的總隻數;

                                    # # # 盈利概率相對化（正減負）;
                                    # # total_ticker_symbol_Long_Position_profit_Positive_probability = float(0.0)
                                    # # total_ticker_symbol_Long_Position_profit_Negative_probability = float(0.0)
                                    # # Long_Position_probability_Positive_minus_Negative = []
                                    # # total_ticker_symbol_Short_Selling_profit_Positive_probability = float(0.0)
                                    # # total_ticker_symbol_Short_Selling_profit_Negative_probability = float(0.0)
                                    # # Short_Selling_probability_Positive_minus_Negative = []
                                    # # for key, value in testing_data_transaction_sequence_Dict.items():
                                    # #     # 取總和;
                                    # #     if ("Long_Position_profit_Positive_probability" in value) and (not ((value["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(value["Long_Position_profit_Positive_probability"]))):
                                    # #         total_ticker_symbol_Long_Position_profit_Positive_probability_2 = float(float(total_ticker_symbol_Long_Position_profit_Positive_probability) + float(value["Long_Position_profit_Positive_probability"]))
                                    # #         total_ticker_symbol_Long_Position_profit_Positive_probability *= float(0.0)
                                    # #         total_ticker_symbol_Long_Position_profit_Positive_probability += float(total_ticker_symbol_Long_Position_profit_Positive_probability_2)
                                    # #     if ("Long_Position_profit_Negative_probability" in value) and (not ((value["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(value["Long_Position_profit_Negative_probability"]))):
                                    # #         total_ticker_symbol_Long_Position_profit_Negative_probability_2 = float(float(total_ticker_symbol_Long_Position_profit_Negative_probability) + float(value["Long_Position_profit_Negative_probability"]))
                                    # #         total_ticker_symbol_Long_Position_profit_Negative_probability *= float(0.0)
                                    # #         total_ticker_symbol_Long_Position_profit_Negative_probability += float(total_ticker_symbol_Long_Position_profit_Negative_probability_2)
                                    # #     if (("Long_Position_profit_Positive_probability" in value) and (not ((value["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(value["Long_Position_profit_Positive_probability"])))) and (("Long_Position_profit_Negative_probability" in value) and (not ((value["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(value["Long_Position_profit_Negative_probability"])))):
                                    # #         Long_Position_probability_Positive_minus_Negative.append(float(float(value["Long_Position_profit_Positive_probability"]) - float(value["Long_Position_profit_Negative_probability"])))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    # #     if ("Short_Selling_profit_Positive_probability" in value) and (not ((value["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Positive_probability"]))):
                                    # #         total_ticker_symbol_Short_Selling_profit_Positive_probability_2 = float(float(total_ticker_symbol_Short_Selling_profit_Positive_probability) + float(value["Short_Selling_profit_Positive_probability"]))
                                    # #         total_ticker_symbol_Short_Selling_profit_Positive_probability *= float(0.0)
                                    # #         total_ticker_symbol_Short_Selling_profit_Positive_probability += float(total_ticker_symbol_Short_Selling_profit_Positive_probability_2)
                                    # #     if ("Short_Selling_profit_Negative_probability" in value) and (not ((value["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Negative_probability"]))):
                                    # #         total_ticker_symbol_Short_Selling_profit_Negative_probability_2 = float(float(total_ticker_symbol_Short_Selling_profit_Negative_probability) + float(value["Short_Selling_profit_Negative_probability"]))
                                    # #         total_ticker_symbol_Short_Selling_profit_Negative_probability *= float(0.0)
                                    # #         total_ticker_symbol_Short_Selling_profit_Negative_probability += float(total_ticker_symbol_Short_Selling_profit_Negative_probability_2)
                                    # #     if (("Short_Selling_profit_Positive_probability" in value) and (not ((value["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Positive_probability"])))) and (("Short_Selling_profit_Negative_probability" in value) and (not ((value["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Negative_probability"])))):
                                    # #         Short_Selling_probability_Positive_minus_Negative.append(float(float(value["Short_Selling_profit_Positive_probability"]) - float(value["Short_Selling_profit_Negative_probability"])))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    # # # 盈利概率歸一化（Normalized）;
                                    # # range_Long_Position_probability_Positive_minus_Negative = float(0.0)
                                    # # if int(len(Long_Position_probability_Positive_minus_Negative)) > int(0):
                                    # #     range_Long_Position_probability_Positive_minus_Negative = float(float(max(Long_Position_probability_Positive_minus_Negative)) - float(min(Long_Position_probability_Positive_minus_Negative)))
                                    # # range_Short_Selling_probability_Positive_minus_Negative = float(0.0)
                                    # # if int(len(Short_Selling_probability_Positive_minus_Negative)) > int(0):
                                    # #     range_Short_Selling_probability_Positive_minus_Negative = float(float(max(Short_Selling_probability_Positive_minus_Negative)) - float(min(Short_Selling_probability_Positive_minus_Negative)))
                                    # # Long_Position_probability_Positive_minus_Negative_Normalized = {}
                                    # # Short_Selling_probability_Positive_minus_Negative_Normalized = {}
                                    # # for key, value in testing_data_transaction_sequence_Dict.items():
                                    # #     if (("Long_Position_profit_Positive_probability" in value) and (not ((value["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(value["Long_Position_profit_Positive_probability"])))) and (("Long_Position_profit_Negative_probability" in value) and (not ((value["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(value["Long_Position_profit_Negative_probability"])))):
                                    # #         if float(range_Long_Position_probability_Positive_minus_Negative) > float(0.0):
                                    # #             Long_Position_probability_Positive_minus_Negative_Normalized[str(key)] = float(float(float(float(value["Long_Position_profit_Positive_probability"]) - float(value["Long_Position_profit_Negative_probability"])) - float(min(Long_Position_probability_Positive_minus_Negative))) / float(range_Long_Position_probability_Positive_minus_Negative))
                                    # #         else:
                                    # #             Long_Position_probability_Positive_minus_Negative_Normalized[str(key)] = float(1.0)
                                    # #     if (("Short_Selling_profit_Positive_probability" in value) and (not ((value["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Positive_probability"])))) and (("Short_Selling_profit_Negative_probability" in value) and (not ((value["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Negative_probability"])))):
                                    # #         if float(range_Short_Selling_probability_Positive_minus_Negative) > float(0.0):
                                    # #             Short_Selling_probability_Positive_minus_Negative_Normalized[str(key)] = float(float(float(float(value["Short_Selling_profit_Positive_probability"]) - float(value["Short_Selling_profit_Negative_probability"])) - float(min(Short_Selling_probability_Positive_minus_Negative))) / float(range_Short_Selling_probability_Positive_minus_Negative))
                                    # #         else:
                                    # #             Short_Selling_probability_Positive_minus_Negative_Normalized[str(key)] = float(1.0)
                                    # # # 選股權重，每隻股票的盈利概率占比;
                                    # # total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized = float(0.0);
                                    # # for key, value in Long_Position_probability_Positive_minus_Negative_Normalized.items():
                                    # #     # 取總和;
                                    # #     total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized_2 = float(float(total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized) + float(value))
                                    # #     total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized *= float(0.0)
                                    # #     total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized += float(total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized_2)
                                    # # total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized = float(0.0)
                                    # # for key, value in Short_Selling_probability_Positive_minus_Negative_Normalized.items():
                                    # #     # 取總和;
                                    # #     total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized_2 = float(float(total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized) + float(value))
                                    # #     total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized *= float(0.0)
                                    # #     total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized += float(total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized_2)
                                    # # weight_PickStock_Dict = {}
                                    # # for key, value in testing_data_transaction_sequence_Dict.items():
                                    # #     if (str(key) in Long_Position_probability_Positive_minus_Negative_Normalized) or (str(key) in Short_Selling_probability_Positive_minus_Negative_Normalized):
                                    # #         if not (str(key) in weight_PickStock_Dict):
                                    # #             weight_PickStock_Dict[str(key)] = {}
                                    # # for key, value in Long_Position_probability_Positive_minus_Negative_Normalized.items():
                                    # #     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict):
                                    # #         if float(total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized) > float(0.0):
                                    # #             weight_PickStock_Dict[str(key)]["Long_Position"] = float(float(value) / float(total_ticker_symbol_Long_Position_probability_Positive_minus_Negative_Normalized))
                                    # #         else:
                                    # #             weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
                                    # # for key, value in Short_Selling_probability_Positive_minus_Negative_Normalized.items():
                                    # #     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict):
                                    # #         if float(total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized) > float(0.0):
                                    # #             weight_PickStock_Dict[str(key)]["Short_Selling"] = float(float(value) / float(total_ticker_symbol_Short_Selling_probability_Positive_minus_Negative_Normalized))
                                    # #         else:
                                    # #             weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
                                    # # # print(weight_PickStock_Dict)

                                    # # 讀取從參數 P2 傳入的選股配置占比;
                                    # weight_PickStock_Dict = {}
                                    # if int(len(testing_data_transaction_sequence_Dict)) > int(0):
                                    #     for key, value in testing_data_transaction_sequence_Dict.items():
                                    #         if not (str(key) in weight_PickStock_Dict):
                                    #             weight_PickStock_Dict[str(key)] = {}
                                    #         if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict):
                                    #             if isinstance(P2, dict) and (str(key) in P2) and isinstance(P2[str(key)], dict):
                                    #                 if "Long_Position" in P2[str(key)]:
                                    #                     weight_PickStock_Dict[str(key)]["Long_Position"] = float(P2[str(key)]["Long_Position"])  # 選股配置占比（倉位）;
                                    #                 else:
                                    #                     if int(number_PickStock_transaction) > int(0):
                                    #                         weight_PickStock_Dict[str(key)]["Long_Position"] = float(int(1) / int(number_PickStock_transaction))  # 選股配置占比（倉位）;
                                    #                     else:
                                    #                         weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # 選股配置占比（倉位）;
                                    #                 if "Short_Selling" in P2[str(key)]:
                                    #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = float(P2[str(key)]["Short_Selling"])  # 選股配置占比（倉位）;
                                    #                 else:
                                    #                     if int(number_PickStock_transaction) > int(0):
                                    #                         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(int(1) / int(number_PickStock_transaction))  # 選股配置占比（倉位）;
                                    #                     else:
                                    #                         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # 選股配置占比（倉位）;
                                    #             else:
                                    #                 if int(number_PickStock_transaction) > int(0):
                                    #                     weight_PickStock_Dict[str(key)]["Long_Position"] = float(int(1) / int(number_PickStock_transaction))  # 選股配置占比（倉位）;
                                    #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = float(int(1) / int(number_PickStock_transaction))  # 選股配置占比（倉位）;
                                    #                 else:
                                    #                     weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # 選股配置占比（倉位）;
                                    #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # 選股配置占比（倉位）;
                                    # # print(weight_PickStock_Dict)

                                    # # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
                                    # # 做多（Long Position）記錄;
                                    # y_total_Long_Position = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                                    # y_maximum_drawdown_Long_Position = None  # float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # y_total_Long_Position_Array = []
                                    # y_maximum_drawdown_Long_Position_Array = []
                                    # y_Long_Position_profit_Array = []
                                    # y_Long_Position_loss_Array = []
                                    # y_Positive_Long_Position = None  # float(0.0)  # 交易規則正利潤纍計;
                                    # y_Positive_Long_Position_Array = []
                                    # y_Negative_Long_Position = None  # float(0.0)  # 交易規則負利潤纍計;
                                    # y_Negative_Long_Position_Array = []
                                    # y_P_Positive_Long_Position = None  # float(0.0)  # 交易規則正利潤出現頻率;
                                    # y_P_Positive_Long_Position_Array = []
                                    # y_P_Negative_Long_Position = None  # float(0.0)  # 交易規則負利潤出現頻率;
                                    # y_P_Negative_Long_Position_Array = []
                                    # y_amplitude_Long_Position = None  # float(0.0)  # amplitude_rate;
                                    # y_amplitude_Long_Position_Array = []
                                    # y_turnover_Long_Position = None  # float(0.0)  # turnover_volume; turnover_rate;
                                    # y_turnover_Long_Position_Array = []
                                    # y_date_transaction_between_Long_Position = None  # float(0.0)  # Between two date_transaction;
                                    # y_date_transaction_between_Long_Position_Array = []
                                    # y_Long_Position_profit = None  # float(0.0)  # 優化目標變量，利潤 × 權重;
                                    # y_Long_Position_loss = None  # float(0.0)  # 優化目標變量，最大回撤 × 權重;
                                    # # 做空（Short Selling）記錄;
                                    # y_total_Short_Selling = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                                    # y_maximum_drawdown_Short_Selling = None  # float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # y_total_Short_Selling_Array = []
                                    # y_maximum_drawdown_Short_Selling_Array = []
                                    # y_Short_Selling_profit_Array = []
                                    # y_Short_Selling_loss_Array = []
                                    # y_Positive_Short_Selling = None  # float(0.0)  # 交易規則正利潤纍計;
                                    # y_Positive_Short_Selling_Array = []
                                    # y_Negative_Short_Selling = None  # float(0.0)  # 交易規則負利潤纍計;
                                    # y_Negative_Short_Selling_Array = []
                                    # y_P_Positive_Short_Selling = None  # float(0.0)  # 交易規則正利潤出現頻率;
                                    # y_P_Positive_Short_Selling_Array = []
                                    # y_P_Negative_Short_Selling = None  # float(0.0)  # 交易規則負利潤出現頻率;
                                    # y_P_Negative_Short_Selling_Array = []
                                    # y_amplitude_Short_Selling = None  # float(0.0)  # amplitude_rate;
                                    # y_amplitude_Short_Selling_Array = []
                                    # y_turnover_Short_Selling = None  # float(0.0)  # turnover_volume; turnover_rate;
                                    # y_turnover_Short_Selling_Array = []
                                    # y_date_transaction_between_Short_Selling = None  # float(0.0)  # Between two date_transaction;
                                    # y_date_transaction_between_Short_Selling_Array = []
                                    # y_Short_Selling_profit = None  # float(0.0)  # 優化目標變量，利潤 × 權重;
                                    # y_Short_Selling_loss = None  # float(0.0)  # 優化目標變量，最大回撤 × 權重;
                                    # # 做多（Long Position）記錄 + 做空（Short Selling）記錄，纍計求和;
                                    # y_total = None  # float(0.0)  # float(y_total_Long_Position + y_total_Short_Selling)  # 每兩次對衝交易利潤，纍加總計;
                                    # y_maximum_drawdown = None  # float(0.0)
                                    # y_total_Array = []
                                    # y_maximum_drawdown_Array = []
                                    # y_profit_Array = []
                                    # y_loss_Array = []
                                    # y_Positive = None  # float(0.0)  # float(y_Positive_Long_Position + y_Positive_Short_Selling)  # 交易規則正利潤纍計;
                                    # y_Positive_Array = []
                                    # y_Negative = None  # float(0.0)  # float(y_Negative_Long_Position + y_Negative_Short_Selling)  # 交易規則負利潤纍計;
                                    # y_Negative_Array = []
                                    # y_P_Positive = None  # float(0.0)  # 交易規則正利潤出現頻率;
                                    # y_P_Positive_Array = []
                                    # y_P_Negative = None  # float(0.0)  # 交易規則負利潤出現頻率;
                                    # y_P_Negative_Array = []
                                    # # if int(len(y_A_Long_Position)) > int(0) or int(len(y_A_Short_Selling)) > int(0):
                                    # #     y_Positive_count_Long_Position = int(0)
                                    # #     y_Negative_count_Long_Position = int(0)
                                    # #     y_Positive_count_Short_Selling = int(0)
                                    # #     y_Negative_count_Short_Selling = int(0)
                                    # #     if int(len(y_A_Long_Position)) > int(0):
                                    # #         y_Positive_count_Long_Position = int(sum([int(1) if float(y_A_Long_Position[i]) > float(0.0) else int(0) for i in range(int(0), int(len(y_A_Long_Position)), int(1))]))
                                    # #         y_Negative_count_Long_Position = int(sum([int(1) if float(y_A_Long_Position[i]) < float(0.0) else int(0) for i in range(int(0), int(len(y_A_Long_Position)), int(1))]))
                                    # #     if int(len(y_A_Short_Selling)) > int(0):
                                    # #         y_Positive_count_Short_Selling = int(sum([int(1) if float(y_A_Short_Selling[i]) > float(0.0) else int(0) for i in range(int(0), int(len(y_A_Short_Selling)), int(1))]))
                                    # #         y_Negative_count_Short_Selling = int(sum([int(1) if float(y_A_Short_Selling[i]) < float(0.0) else int(0) for i in range(int(0), int(len(y_A_Short_Selling)), int(1))]))
                                    # #     y_P_Positive = float(int(int(y_Positive_count_Long_Position) + int(y_Positive_count_Short_Selling)) / int(int(len(y_A_Long_Position)) + int(len(y_A_Short_Selling))))
                                    # #     y_P_Negative = float(int(int(y_Negative_count_Long_Position) + int(y_Negative_count_Short_Selling)) / int(int(len(y_A_Long_Position)) + int(len(y_A_Short_Selling))))
                                    # y_amplitude = None  # float(0.0)  # float(float(y_amplitude_Long_Position + y_amplitude_Short_Selling) / int(2))  # amplitude_rate;
                                    # y_amplitude_Array = []
                                    # y_turnover = None  # float(0.0)  # float(float(y_turnover_Long_Position + y_turnover_Short_Selling) / int(2))  # turnover_volume; turnover_rate;
                                    # y_turnover_Array = []
                                    # y_date_transaction_between = None  # float(0.0)  # float(float(y_date_transaction_between_Long_Position + y_date_transaction_between_Short_Selling) / int(2))  # Between two date_transaction;
                                    # y_date_transaction_between_Array = []
                                    # y_profit = None  # float(0.0)  # float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
                                    # y_loss = None  # float(0.0)  # float(Base.findmin([float(y_Long_Position_loss), float(y_Short_Selling_loss)])[1])  # 優化目標變量，最大回撤 × 權重;
                                    # for key, value in testing_data_transaction_sequence_Dict.items():
                                    #     if isinstance(value, dict):

                                    #         # 做多（Long Position）記錄;
                                    #         if "Long_Position_profit_total" in value:
                                    #             if not ((value["Long_Position_profit_total"] is None) or numpy.isnan(value["Long_Position_profit_total"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    #                         y_total_Long_Position_2 = float(float(value["Long_Position_profit_total"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     else:
                                    #                         y_total_Long_Position_2 = float(value["Long_Position_profit_total"])
                                    #                 else:
                                    #                     y_total_Long_Position_2 = float(value["Long_Position_profit_total"])
                                    #                 # 取總和;
                                    #                 # y_total_Long_Position_2 = float(float(y_total_Long_Position) + float(value["Long_Position_profit_total"]))
                                    #                 # y_total_Long_Position *= float(0.0)
                                    #                 # y_total_Long_Position += float(y_total_Long_Position_2)
                                    #                 y_total_Long_Position_Array.append(y_total_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "maximum_drawdown_Long_Position" in value:
                                    #             if not ((value["maximum_drawdown_Long_Position"] is None) or numpy.isnan(value["maximum_drawdown_Long_Position"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    #                         y_maximum_drawdown_Long_Position_2 = float(float(value["maximum_drawdown_Long_Position"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     else:
                                    #                         y_maximum_drawdown_Long_Position_2 = float(value["maximum_drawdown_Long_Position"])
                                    #                 else:
                                    #                     y_maximum_drawdown_Long_Position_2 = float(value["maximum_drawdown_Long_Position"])
                                    #                 # # 取均值;
                                    #                 # y_maximum_drawdown_Long_Position_2 = float(float(float(y_maximum_drawdown_Long_Position) + float(value["maximum_drawdown_Long_Position"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_maximum_drawdown_Long_Position_2 = float(max([float(y_maximum_drawdown_Long_Position), float(value["maximum_drawdown_Long_Position"])]))
                                    #                 # # 取最小值;
                                    #                 # y_maximum_drawdown_Long_Position_2 = float(min([float(y_maximum_drawdown_Long_Position), float(value["maximum_drawdown_Long_Position"])]))
                                    #                 # y_maximum_drawdown_Long_Position *= float(0.0)
                                    #                 # y_maximum_drawdown_Long_Position += float(y_maximum_drawdown_Long_Position_2)
                                    #                 y_maximum_drawdown_Long_Position_Array.append(y_maximum_drawdown_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_profit_Positive" in value:
                                    #             if not ((value["Long_Position_profit_Positive"] is None) or numpy.isnan(value["Long_Position_profit_Positive"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Positive_Long_Position_2 = float(float(value["Long_Position_profit_Positive"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     else:
                                    #                         y_Positive_Long_Position_2 = float(value["Long_Position_profit_Positive"])
                                    #                 else:
                                    #                     y_Positive_Long_Position_2 = float(value["Long_Position_profit_Positive"])
                                    #                 # 取總和;
                                    #                 # y_Positive_Long_Position_2 = float(float(y_Positive_Long_Position) + float(value["Long_Position_profit_Positive"]))
                                    #                 # y_Positive_Long_Position *= float(0.0)
                                    #                 # y_Positive_Long_Position += float(y_Positive_Long_Position_2)
                                    #                 y_Positive_Long_Position_Array.append(y_Positive_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_profit_Negative" in value:
                                    #             if not ((value["Long_Position_profit_Negative"] is None) or numpy.isnan(value["Long_Position_profit_Negative"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Negative_Long_Position_2 = float(float(value["Long_Position_profit_Negative"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     else:
                                    #                         y_Negative_Long_Position_2 = float(value["Long_Position_profit_Negative"])
                                    #                 else:
                                    #                     y_Negative_Long_Position_2 = float(value["Long_Position_profit_Negative"])
                                    #                 # 取總和;
                                    #                 # y_Negative_Long_Position_2 = float(float(y_Negative_Long_Position) + float(value["Long_Position_profit_Negative"]))
                                    #                 # y_Negative_Long_Position *= float(0.0)
                                    #                 # y_Negative_Long_Position += float(y_Negative_Long_Position_2)
                                    #                 y_Negative_Long_Position_Array.append(y_Negative_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_profit_Positive_probability" in value:
                                    #             if not ((value["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(value["Long_Position_profit_Positive_probability"])):
                                    #                 # 取均值;
                                    #                 # y_P_Positive_Long_Position_2 = float(float(float(y_P_Positive_Long_Position) + float(value["Long_Position_profit_Positive_probability"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_P_Positive_Long_Position_2 = float(max([float(y_P_Positive_Long_Position), float(value["Long_Position_profit_Positive_probability"])]))
                                    #                 # # 取最小值;
                                    #                 # y_P_Positive_Long_Position_2 = float(min([float(y_P_Positive_Long_Position), float(value["Long_Position_profit_Positive_probability"])]))
                                    #                 # y_P_Positive_Long_Position *= float(0.0)
                                    #                 # y_P_Positive_Long_Position += float(y_P_Positive_Long_Position_2)
                                    #                 y_P_Positive_Long_Position_Array.append(float(value["Long_Position_profit_Positive_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_profit_Negative_probability" in value:
                                    #             if not ((value["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(value["Long_Position_profit_Negative_probability"])):
                                    #                 # # 取均值;
                                    #                 # y_P_Negative_Long_Position_2 = float(float(float(y_P_Negative_Long_Position) + float(value["Long_Position_profit_Negative_probability"])) / int(2))
                                    #                 # 取最大值;
                                    #                 # y_P_Negative_Long_Position_2 = float(max([float(y_P_Negative_Long_Position), float(value["Long_Position_profit_Negative_probability"])]))
                                    #                 # # 取最小值;
                                    #                 # y_P_Negative_Long_Position_2 = float(min([float(y_P_Negative_Long_Position), float(value["Long_Position_profit_Negative_probability"])]))
                                    #                 # y_P_Negative_Long_Position *= float(0.0)
                                    #                 # y_P_Negative_Long_Position += float(y_P_Negative_Long_Position_2)
                                    #                 y_P_Negative_Long_Position_Array.append(float(value["Long_Position_profit_Negative_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_average_price_amplitude_date_transaction" in value:
                                    #             if not ((value["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(value["Long_Position_average_price_amplitude_date_transaction"])):
                                    #                 # # 取均值;
                                    #                 # y_amplitude_Long_Position_2 = float(float(float(y_amplitude_Long_Position) + float(value["Long_Position_average_price_amplitude_date_transaction"])) / int(2))
                                    #                 # 取最大值;
                                    #                 # y_amplitude_Long_Position_2 = float(max([float(y_amplitude_Long_Position), float(value["Long_Position_average_price_amplitude_date_transaction"])]))
                                    #                 # # 取最小值;
                                    #                 # y_amplitude_Long_Position_2 = float(min([float(y_amplitude_Long_Position), float(value["Long_Position_average_price_amplitude_date_transaction"])]))
                                    #                 # y_amplitude_Long_Position *= float(0.0)
                                    #                 # y_amplitude_Long_Position += float(y_amplitude_Long_Position_2)
                                    #                 y_amplitude_Long_Position_Array.append(float(value["Long_Position_average_price_amplitude_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_average_volume_turnover_date_transaction" in value:
                                    #             if not ((value["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(value["Long_Position_average_volume_turnover_date_transaction"])):
                                    #                 # # 取均值;
                                    #                 # y_turnover_Long_Position_2 = float(float(float(y_turnover_Long_Position) + float(value["Long_Position_average_volume_turnover_date_transaction"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_turnover_Long_Position_2 = float(max([float(y_turnover_Long_Position), float(value["Long_Position_average_volume_turnover_date_transaction"])]))
                                    #                 # 取最小值;
                                    #                 # y_turnover_Long_Position_2 = float(min([float(y_turnover_Long_Position), float(value["Long_Position_average_volume_turnover_date_transaction"])]))
                                    #                 # y_turnover_Long_Position *= float(0.0)
                                    #                 # y_turnover_Long_Position += float(y_turnover_Long_Position_2)
                                    #                 y_turnover_Long_Position_Array.append(float(value["Long_Position_average_volume_turnover_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Long_Position_average_date_transaction_between" in value:
                                    #             if not ((value["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(value["Long_Position_average_date_transaction_between"])):
                                    #                 # # 取均值;
                                    #                 # y_date_transaction_between_Long_Position_2 = float(float(float(y_date_transaction_between_Long_Position) + float(value["Long_Position_average_date_transaction_between"])) / int(2))
                                    #                 # 取最大值;
                                    #                 # y_date_transaction_between_Long_Position_2 = float(max([float(y_date_transaction_between_Long_Position), float(value["Long_Position_average_date_transaction_between"])]))
                                    #                 # # 取最小值;
                                    #                 # y_date_transaction_between_Long_Position_2 = float(min([float(y_date_transaction_between_Long_Position), float(value["Long_Position_average_date_transaction_between"])]))
                                    #                 # y_date_transaction_between_Long_Position *= float(0.0)
                                    #                 # y_date_transaction_between_Long_Position += float(y_date_transaction_between_Long_Position_2)
                                    #                 y_date_transaction_between_Long_Position_Array.append(float(value["Long_Position_average_date_transaction_between"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "y_Long_Position_profit" in value:
                                    #             if not ((value["y_Long_Position_profit"] is None) or numpy.isnan(value["y_Long_Position_profit"])):
                                    #                 # 取總和;
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Long_Position_profit_2 = float(float(value["y_Long_Position_profit"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     else:
                                    #                         y_Long_Position_profit_2 = float(value["y_Long_Position_profit"])
                                    #                 else:
                                    #                     y_Long_Position_profit_2 = float(value["y_Long_Position_profit"])
                                    #                 y_Long_Position_profit_Array.append(y_Long_Position_profit_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "y_Long_Position_loss" in value:
                                    #             if not ((value["y_Long_Position_loss"] is None) or numpy.isnan(value["y_Long_Position_loss"])):
                                    #                 # # 取均值;
                                    #                 # y_Long_Position_loss_2 = float(float(float(y_Long_Position_loss) + float(value["y_Long_Position_loss"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_Long_Position_loss_2 = float(max([float(y_Long_Position_loss), float(value["y_Long_Position_loss"])]))
                                    #                 # # 取最小值;
                                    #                 # y_Long_Position_loss_2 = float(min([float(y_Long_Position_loss), float(value["y_Long_Position_loss"])]))
                                    #                 # y_Long_Position_loss *= float(0.0)
                                    #                 # y_Long_Position_loss += float(y_Long_Position_loss_2)
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Long_Position_loss_2 = float(float(value["y_Long_Position_loss"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     else:
                                    #                         y_Long_Position_loss_2 = float(value["y_Long_Position_loss"])
                                    #                 else:
                                    #                     y_Long_Position_loss_2 = float(value["y_Long_Position_loss"])
                                    #                 y_Long_Position_loss_Array.append(y_Long_Position_loss_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         # 做空（Short Selling）記錄;
                                    #         if "Short_Selling_profit_total" in value:
                                    #             if not ((value["Short_Selling_profit_total"] is None) or numpy.isnan(value["Short_Selling_profit_total"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_total_Short_Selling_2 = float(float(value["Short_Selling_profit_total"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_total_Short_Selling_2 = float(value["Short_Selling_profit_total"])
                                    #                 else:
                                    #                     y_total_Short_Selling_2 = float(value["Short_Selling_profit_total"])
                                    #                 # 取總和;
                                    #                 # y_total_Short_Selling_2 = float(float(y_total_Short_Selling) + float(value["Short_Selling_profit_total"]))
                                    #                 # y_total_Short_Selling *= float(0.0)
                                    #                 # y_total_Short_Selling += float(y_total_Short_Selling_2)
                                    #                 y_total_Short_Selling_Array.append(y_total_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "maximum_drawdown_Short_Selling" in value:
                                    #             if not ((value["maximum_drawdown_Short_Selling"] is None) or numpy.isnan(value["maximum_drawdown_Short_Selling"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_maximum_drawdown_Short_Selling_2 = float(float(value["maximum_drawdown_Short_Selling"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_maximum_drawdown_Short_Selling_2 = float(value["maximum_drawdown_Short_Selling"])
                                    #                 else:
                                    #                     y_maximum_drawdown_Short_Selling_2 = float(value["maximum_drawdown_Short_Selling"])
                                    #                 # # 取均值;
                                    #                 # y_maximum_drawdown_Short_Selling_2 = float(float(float(y_maximum_drawdown_Short_Selling) + float(value["maximum_drawdown_Short_Selling"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_maximum_drawdown_Short_Selling_2 = float(max([float(y_maximum_drawdown_Short_Selling), float(value["maximum_drawdown_Short_Selling"])]))
                                    #                 # # 取最小值;
                                    #                 # y_maximum_drawdown_Short_Selling_2 = float(min([float(y_maximum_drawdown_Short_Selling), float(value["maximum_drawdown_Short_Selling"])]))
                                    #                 # y_maximum_drawdown_Short_Selling *= float(0.0)
                                    #                 # y_maximum_drawdown_Short_Selling += float(y_maximum_drawdown_Short_Selling_2)
                                    #                 y_maximum_drawdown_Short_Selling_Array.append(y_maximum_drawdown_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_profit_Positive" in value:
                                    #             if not ((value["Short_Selling_profit_Positive"] is None) or numpy.isnan(value["Short_Selling_profit_Positive"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Positive_Short_Selling_2 = float(float(value["Short_Selling_profit_Positive"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_Positive_Short_Selling_2 = float(value["Short_Selling_profit_Positive"])
                                    #                 else:
                                    #                     y_Positive_Short_Selling_2 = float(value["Short_Selling_profit_Positive"])
                                    #                 # 取總和;
                                    #                 # y_Positive_Short_Selling_2 = float(float(y_Positive_Short_Selling) + float(value["Short_Selling_profit_Positive"]))
                                    #                 # y_Positive_Short_Selling *= float(0.0)
                                    #                 # y_Positive_Short_Selling += float(y_Positive_Short_Selling_2)
                                    #                 y_Positive_Short_Selling_Array.append(y_Positive_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_profit_Negative" in value:
                                    #             if not ((value["Short_Selling_profit_Negative"] is None) or numpy.isnan(value["Short_Selling_profit_Negative"])):
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Negative_Short_Selling_2 = float(float(value["Short_Selling_profit_Negative"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_Negative_Short_Selling_2 = float(value["Short_Selling_profit_Negative"])
                                    #                 else:
                                    #                     y_Negative_Short_Selling_2 = float(value["Short_Selling_profit_Negative"])
                                    #                 # 取總和;
                                    #                 # y_Negative_Short_Selling_2 = float(float(y_Negative_Short_Selling) + float(value["Short_Selling_profit_Negative"]))
                                    #                 # y_Negative_Short_Selling *= float(0.0)
                                    #                 # y_Negative_Short_Selling += float(y_Negative_Short_Selling_2)
                                    #                 y_Negative_Short_Selling_Array.append(y_Negative_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_profit_Positive_probability" in value:
                                    #             if not ((value["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Positive_probability"])):
                                    #                 # 取均值;
                                    #                 # y_P_Positive_Short_Selling_2 = float(float(float(y_P_Positive_Short_Selling) + float(value["Short_Selling_profit_Positive_probability"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_P_Positive_Short_Selling_2 = float(max([float(y_P_Positive_Short_Selling), float(value["Short_Selling_profit_Positive_probability"])]))
                                    #                 # # 取最小值;
                                    #                 # y_P_Positive_Short_Selling_2 = float(min([float(y_P_Positive_Short_Selling), float(value["Short_Selling_profit_Positive_probability"])]))
                                    #                 # y_P_Positive_Short_Selling *= float(0.0)
                                    #                 # y_P_Positive_Short_Selling += float(y_P_Positive_Short_Selling_2)
                                    #                 y_P_Positive_Short_Selling_Array.append(float(value["Short_Selling_profit_Positive_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_profit_Negative_probability" in value:
                                    #             if not ((value["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(value["Short_Selling_profit_Negative_probability"])):
                                    #                 # # 取均值;
                                    #                 # y_P_Negative_Short_Selling_2 = float(float(float(y_P_Negative_Short_Selling) + float(value["Short_Selling_profit_Negative_probability"])) / int(2))
                                    #                 # 取最大值;
                                    #                 # y_P_Negative_Short_Selling_2 = float(max([float(y_P_Negative_Short_Selling), float(value["Short_Selling_profit_Negative_probability"])]))
                                    #                 # # 取最小值;
                                    #                 # y_P_Negative_Short_Selling_2 = float(min([float(y_P_Negative_Short_Selling), float(value["Short_Selling_profit_Negative_probability"])]))
                                    #                 # y_P_Negative_Short_Selling *= float(0.0)
                                    #                 # y_P_Negative_Short_Selling += float(y_P_Negative_Short_Selling_2)
                                    #                 y_P_Negative_Short_Selling_Array.append(float(value["Short_Selling_profit_Negative_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_average_price_amplitude_date_transaction" in value:
                                    #             if not ((value["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(value["Short_Selling_average_price_amplitude_date_transaction"])):
                                    #                 # # 取均值;
                                    #                 # y_amplitude_Short_Selling_2 = float(float(float(y_amplitude_Short_Selling) + float(value["Short_Selling_average_price_amplitude_date_transaction"])) / int(2))
                                    #                 # 取最大值;
                                    #                 # y_amplitude_Short_Selling_2 = float(max([float(y_amplitude_Short_Selling), float(value["Short_Selling_average_price_amplitude_date_transaction"])]))
                                    #                 # # 取最小值;
                                    #                 # y_amplitude_Short_Selling_2 = float(min([float(y_amplitude_Short_Selling), float(value["Short_Selling_average_price_amplitude_date_transaction"])]))
                                    #                 # y_amplitude_Short_Selling *= float(0.0)
                                    #                 # y_amplitude_Short_Selling += float(y_amplitude_Short_Selling_2)
                                    #                 y_amplitude_Short_Selling_Array.append(float(value["Short_Selling_average_price_amplitude_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_average_volume_turnover_date_transaction" in value:
                                    #             if not ((value["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(value["Short_Selling_average_volume_turnover_date_transaction"])):
                                    #                 # # 取均值;
                                    #                 # y_turnover_Short_Selling_2 = float(float(float(y_turnover_Short_Selling) + float(value["Short_Selling_average_volume_turnover_date_transaction"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_turnover_Short_Selling_2 = float(max([float(y_turnover_Short_Selling), float(value["Short_Selling_average_volume_turnover_date_transaction"])]))
                                    #                 # 取最小值;
                                    #                 # y_turnover_Short_Selling_2 = float(min([float(y_turnover_Short_Selling), float(value["Short_Selling_average_volume_turnover_date_transaction"])]))
                                    #                 # y_turnover_Short_Selling *= float(0.0)
                                    #                 # y_turnover_Short_Selling += float(y_turnover_Short_Selling_2)
                                    #                 y_turnover_Short_Selling_Array.append(float(value["Short_Selling_average_volume_turnover_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "Short_Selling_average_date_transaction_between" in value:
                                    #             if not ((value["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(value["Short_Selling_average_date_transaction_between"])):
                                    #                 # # 取均值;
                                    #                 # y_date_transaction_between_Short_Selling_2 = float(float(float(y_date_transaction_between_Short_Selling) + float(value["Short_Selling_average_date_transaction_between"])) / int(2))
                                    #                 # 取最大值;
                                    #                 # y_date_transaction_between_Short_Selling_2 = float(max([float(y_date_transaction_between_Short_Selling), float(value["Short_Selling_average_date_transaction_between"])]))
                                    #                 # # 取最小值;
                                    #                 # y_date_transaction_between_Short_Selling_2 = float(min([float(y_date_transaction_between_Short_Selling), float(value["Short_Selling_average_date_transaction_between"])]))
                                    #                 # y_date_transaction_between_Short_Selling *= float(0.0)
                                    #                 # y_date_transaction_between_Short_Selling += float(y_date_transaction_between_Short_Selling_2)
                                    #                 y_date_transaction_between_Short_Selling_Array.append(float(value["Short_Selling_average_date_transaction_between"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "y_Short_Selling_profit" in value:
                                    #             if not ((value["y_Short_Selling_profit"] is None) or numpy.isnan(value["y_Short_Selling_profit"])):
                                    #                 # 取總和;
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Short_Selling_profit_2 = float(float(value["y_Short_Selling_profit"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_Short_Selling_profit_2 = float(value["y_Short_Selling_profit"])
                                    #                 else:
                                    #                     y_Short_Selling_profit_2 = float(value["y_Short_Selling_profit"])
                                    #                 y_Short_Selling_profit_Array.append(y_Short_Selling_profit_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         if "y_Short_Selling_loss" in value:
                                    #             if not ((value["y_Short_Selling_loss"] is None) or numpy.isnan(value["y_Short_Selling_loss"])):
                                    #                 # # 取均值;
                                    #                 # y_Short_Selling_loss_2 = float(float(float(y_Short_Selling_loss) + float(value["y_Short_Selling_loss"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_Short_Selling_loss_2 = float(max([float(y_Short_Selling_loss), float(value["y_Short_Selling_loss"])]))
                                    #                 # # 取最小值;
                                    #                 # y_Short_Selling_loss_2 = float(min([float(y_Short_Selling_loss), float(value["y_Short_Selling_loss"])]))
                                    #                 # y_Short_Selling_loss *= float(0.0)
                                    #                 # y_Short_Selling_loss += float(y_Short_Selling_loss_2)
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_Short_Selling_loss_2 = float(float(value["y_Short_Selling_loss"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_Short_Selling_loss_2 = float(value["y_Short_Selling_loss"])
                                    #                 else:
                                    #                     y_Short_Selling_loss_2 = float(value["y_Short_Selling_loss"])
                                    #                 y_Short_Selling_loss_Array.append(y_Short_Selling_loss_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    #         # 做多（Long Position）記錄 + 做空（Short Selling）記錄，纍計求和;
                                    #         if "profit_total" in value:
                                    #             if not ((value["profit_total"] is None) or numpy.isnan(value["profit_total"])):
                                    #                 # 取總和;
                                    #                 # y_total_2 = float(float(y_total) + float(value["profit_total"]))
                                    #                 # # 取均值;
                                    #                 # y_total_2 = float(float(float(y_total) + float(value["profit_total"])) / int(2))
                                    #                 # # 取極大值;
                                    #                 # y_total_2 = float(max([float(y_total), float(value["profit_total"])]))
                                    #                 # # 取極小值;
                                    #                 # y_total_2 = float(min([float(y_total), float(value["profit_total"])]))
                                    #                 # y_total *= float(0.0)
                                    #                 # y_total += float(y_total_2)
                                    #                 y_total_Array.append(float(value["profit_total"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "maximum_drawdown" in value:
                                    #             if not ((value["maximum_drawdown"] is None) or numpy.isnan(value["maximum_drawdown"])):
                                    #                 # # 取均值;
                                    #                 # y_maximum_drawdown_2 = float(float(float(y_maximum_drawdown) + float(value["maximum_drawdown"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_maximum_drawdown_2 = float(max([float(y_maximum_drawdown), float(value["maximum_drawdown"])]))
                                    #                 # # 取最小值;
                                    #                 # y_maximum_drawdown_2 = float(min([float(y_maximum_drawdown), float(value["maximum_drawdown"])]))
                                    #                 # y_maximum_drawdown *= float(0.0)
                                    #                 # y_maximum_drawdown += float(y_maximum_drawdown_2)
                                    #                 y_maximum_drawdown_Array.append(float(value["maximum_drawdown"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "profit_Positive" in value:
                                    #             if not ((value["profit_Positive"] is None) or numpy.isnan(value["profit_Positive"])):
                                    #                 # 取總和;
                                    #                 # y_Positive_2 = float(float(y_Positive) + float(value["profit_Positive"]))
                                    #                 # # 取均值;
                                    #                 # y_Positive_2 = float(float(float(y_Positive) + float(value["profit_Positive"])) / int(2))
                                    #                 # # 取極大值;
                                    #                 # y_Positive_2 = float(max([float(y_Positive), float(value["profit_Positive"])]))
                                    #                 # # 取極小值;
                                    #                 # y_Positive_2 = float(min([float(y_Positive), float(value["profit_Positive"])]))
                                    #                 # y_Positive *= float(0.0)
                                    #                 # y_Positive += float(y_Positive_2)
                                    #                 y_Positive_Array.append(float(value["profit_Positive"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "profit_Negative" in value:
                                    #             if not ((value["profit_Negative"] is None) or numpy.isnan(value["profit_Negative"])):
                                    #                 # 取總和;
                                    #                 # y_Negative_2 = float(float(y_Negative) + float(value["profit_Negative"]))
                                    #                 # # 取均值;
                                    #                 # y_Negative_2 = float(float(float(y_Negative) + float(value["profit_Negative"])) / int(2))
                                    #                 # # 取極大值;
                                    #                 # y_Negative_2 = float(max([float(y_Negative), float(value["profit_Negative"])]))
                                    #                 # # 取極小值;
                                    #                 # y_Negative_2 = float(min([float(y_Negative), float(value["profit_Negative"])]))
                                    #                 # y_Negative *= float(0.0)
                                    #                 # y_Negative += float(y_Negative_2)
                                    #                 y_Negative_Array.append(float(value["profit_Negative"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "profit_Positive_probability" in value:
                                    #             if not ((value["profit_Positive_probability"] is None) or numpy.isnan(value["profit_Positive_probability"])):
                                    #                 # # 取總和;
                                    #                 # y_P_Positive_2 = float(float(y_P_Positive) + float(value["profit_Positive_probability"]))
                                    #                 # 取均值;
                                    #                 # y_P_Positive_2 = float(float(float(y_P_Positive) + float(value["profit_Positive_probability"])) / int(2))
                                    #                 # # 取極大值;
                                    #                 # y_P_Positive_2 = float(max([float(y_P_Positive), float(value["profit_Positive_probability"])]))
                                    #                 # # 取極小值;
                                    #                 # y_P_Positive_2 = float(min([float(y_P_Positive), float(value["profit_Positive_probability"])]))
                                    #                 # y_P_Positive *= float(0.0)
                                    #                 # y_P_Positive += float(y_P_Positive_2)
                                    #                 y_P_Positive_Array.append(float(value["profit_Positive_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "profit_Negative_probability" in value:
                                    #             if not ((value["profit_Negative_probability"] is None) or numpy.isnan(value["profit_Negative_probability"])):
                                    #                 # # 取總和;
                                    #                 # y_P_Negative_2 = float(float(y_P_Negative) + float(value["profit_Negative_probability"]))
                                    #                 # # 取均值;
                                    #                 # y_P_Negative_2 = float(float(float(y_P_Negative) + float(value["profit_Negative_probability"])) / int(2))
                                    #                 # 取極大值;
                                    #                 # y_P_Negative_2 = float(max([float(y_P_Negative), float(value["profit_Negative_probability"])]))
                                    #                 # # 取極小值;
                                    #                 # y_P_Negative_2 = float(min([float(y_P_Negative), float(value["profit_Negative_probability"])]))
                                    #                 # y_P_Negative *= float(0.0)
                                    #                 # y_P_Negative += float(y_P_Negative_2)
                                    #                 y_P_Negative_Array.append(float(value["profit_Negative_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "average_price_amplitude_date_transaction" in value:
                                    #             if not ((value["average_price_amplitude_date_transaction"] is None) or numpy.isnan(value["average_price_amplitude_date_transaction"])):
                                    #                 # # 取總和;
                                    #                 # y_amplitude_2 = float(float(y_amplitude) + float(value["average_price_amplitude_date_transaction"]))
                                    #                 # # 取均值;
                                    #                 # y_amplitude_2 = float(float(float(y_amplitude) + float(value["average_price_amplitude_date_transaction"])) / int(2))
                                    #                 # 取極大值;
                                    #                 # y_amplitude_2 = float(max([float(y_amplitude), float(value["average_price_amplitude_date_transaction"])]))
                                    #                 # # 取極小值;
                                    #                 # y_amplitude_2 = float(min([float(y_amplitude), float(value["average_price_amplitude_date_transaction"])]))
                                    #                 # y_amplitude *= float(0.0)
                                    #                 # y_amplitude += float(y_amplitude_2)
                                    #                 y_amplitude_Array.append(float(value["average_price_amplitude_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "average_volume_turnover_date_transaction" in value:
                                    #             if not ((value["average_volume_turnover_date_transaction"] is None) or numpy.isnan(value["average_volume_turnover_date_transaction"])):
                                    #                 # # 取總和;
                                    #                 # y_turnover_2 = float(float(y_turnover) + float(value["average_volume_turnover_date_transaction"]))
                                    #                 # # 取均值;
                                    #                 # y_turnover_2 = float(float(float(y_turnover) + float(value["average_volume_turnover_date_transaction"])) / int(2))
                                    #                 # # 取極大值;
                                    #                 # y_turnover_2 = float(max([float(y_turnover), float(value["average_volume_turnover_date_transaction"])]))
                                    #                 # 取極小值;
                                    #                 # y_turnover_2 = float(min([float(y_turnover), float(value["average_volume_turnover_date_transaction"])]))
                                    #                 # y_turnover *= float(0.0)
                                    #                 # y_turnover += float(y_turnover_2)
                                    #                 y_turnover_Array.append(float(value["average_volume_turnover_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "average_date_transaction_between" in value:
                                    #             if not ((value["average_date_transaction_between"] is None) or numpy.isnan(value["average_date_transaction_between"])):
                                    #                 # # 取總和;
                                    #                 # y_date_transaction_between_2 = float(float(y_date_transaction_between) + float(value["average_date_transaction_between"]))
                                    #                 # # 取均值;
                                    #                 # y_date_transaction_between_2 = float(float(float(y_date_transaction_between) + float(value["average_date_transaction_between"])) / int(2))
                                    #                 # 取極大值;
                                    #                 # y_date_transaction_between_2 = float(max([float(y_date_transaction_between), float(value["average_date_transaction_between"])]))
                                    #                 # # 取極小值;
                                    #                 # y_date_transaction_between_2 = float(min([float(y_date_transaction_between), float(value["average_date_transaction_between"])]))
                                    #                 # y_date_transaction_between *= float(0.0)
                                    #                 # y_date_transaction_between += float(y_date_transaction_between_2)
                                    #                 y_date_transaction_between_Array.append(float(value["average_date_transaction_between"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "y_profit" in value:
                                    #             if not ((value["y_profit"] is None) or numpy.isnan(value["y_profit"])):
                                    #                 # # 取總和;
                                    #                 # if int(len(weight_PickStock_Dict)) > int(0):
                                    #                 #     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                 #         y_profit_2 = float(float(y_profit) + float(float(value["y_profit"]) * float(float(weight_PickStock_Dict[str(key)]["Long_Position"]) + float(weight_PickStock_Dict[str(key)]["Short_Selling"]))))
                                    #                 #     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and (not ("Short_Selling" in weight_PickStock_Dict[str(key)])):
                                    #                 #         y_profit_2 = float(float(y_profit) + float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"])))
                                    #                 #     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and (not ("Long_Position" in weight_PickStock_Dict[str(key)])) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                 #         y_profit_2 = float(float(y_profit) + float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"])))
                                    #                 #     else:
                                    #                 #         y_profit_2 = float(float(y_profit) + float(value["y_profit"]))
                                    #                 # else:
                                    #                 #     y_profit_2 = float(float(y_profit) + float(value["y_profit"]))
                                    #                 # # 取總和;
                                    #                 # y_profit_2 = float(float(y_profit) + float(value["y_profit"]))
                                    #                 # # 取均值;
                                    #                 # y_profit_2 = float(float(float(y_profit) + float(value["y_profit"])) / int(2))
                                    #                 # # 取極大值;
                                    #                 # y_profit_2 = float(max([float(y_profit), float(value["y_profit"])]))
                                    #                 # # 取極小值;
                                    #                 # y_profit_2 = float(min([float(y_profit), float(value["y_profit"])]))
                                    #                 # y_profit *= float(0.0)
                                    #                 # y_profit += float(y_profit_2)
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_profit_2 = float(float(value["y_profit"]) * float(float(weight_PickStock_Dict[str(key)]["Long_Position"]) + float(weight_PickStock_Dict[str(key)]["Short_Selling"])))
                                    #                     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and (not ("Short_Selling" in weight_PickStock_Dict[str(key)])):
                                    #                         y_profit_2 = float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and (not ("Long_Position" in weight_PickStock_Dict[str(key)])) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_profit_2 = float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_profit_2 = float(value["y_profit"])
                                    #                 else:
                                    #                     y_profit_2 = float(value["y_profit"])
                                    #                 y_profit_Array.append(y_profit_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                    #         if "y_loss" in value:
                                    #             if not ((value["y_loss"] is None) or numpy.isnan(value["y_loss"])):
                                    #                 # # 取均值;
                                    #                 # y_loss_2 = float(float(float(y_loss) + float(value["y_loss"])) / int(2))
                                    #                 # # 取最大值;
                                    #                 # y_loss_2 = float(max([float(y_loss), float(value["y_loss"])]))
                                    #                 # # 取最小值;
                                    #                 # y_loss_2 = float(min([float(y_loss), float(value["y_loss"])]))
                                    #                 # y_loss *= float(0.0)
                                    #                 # y_loss += float(y_loss_2)
                                    #                 if int(len(weight_PickStock_Dict)) > int(0):
                                    #                     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_loss_2 = float(float(value["y_loss"]) * float(float(weight_PickStock_Dict[str(key)]["Long_Position"]) + float(weight_PickStock_Dict[str(key)]["Short_Selling"])))
                                    #                     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and (not ("Short_Selling" in weight_PickStock_Dict[str(key)])):
                                    #                         y_loss_2 = float(float(value["y_loss"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                    #                     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and (not ("Long_Position" in weight_PickStock_Dict[str(key)])) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    #                         y_loss_2 = float(float(value["y_loss"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                    #                     else:
                                    #                         y_loss_2 = float(value["y_loss"])
                                    #                 else:
                                    #                     y_loss_2 = float(value["y_loss"])
                                    #                 y_loss_Array.append(y_loss_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    # if int(len(y_total_Long_Position_Array)) > int(0):
                                    #     # y_total_Long_Position = float(min(y_total_Long_Position_Array))
                                    #     y_total_Long_Position = float(sum(y_total_Long_Position_Array))
                                    # y_total_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_total_Short_Selling_Array)) > int(0):
                                    #     # y_total_Short_Selling = float(min(y_total_Short_Selling_Array))
                                    #     y_total_Short_Selling = float(sum(y_total_Short_Selling_Array))
                                    # y_total_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_total_Array)) > int(0):
                                    #     # y_total = float(min(y_total_Array))
                                    #     y_total = float(sum(y_total_Array))
                                    # y_total_Array = None  # 釋放内存;
                                    # # y_total = None  # float(0.0)  # float(float(y_total_Long_Position) + float(y_total_Short_Selling))  # 每兩次對衝交易利潤，纍加總計;
                                    # if (not ((y_total_Long_Position is None) or numpy.isnan(y_total_Long_Position))) and (not ((y_total_Short_Selling is None) or numpy.isnan(y_total_Short_Selling))):
                                    #     y_total = float(float(y_total_Long_Position) + float(y_total_Short_Selling))  # 每兩次對衝交易利潤，纍加總計;
                                    # elif (not ((y_total_Long_Position is None) or numpy.isnan(y_total_Long_Position))) and ((y_total_Short_Selling is None) or numpy.isnan(y_total_Short_Selling)):
                                    #     y_total = float(y_total_Long_Position)
                                    # elif ((y_total_Long_Position is None) or numpy.isnan(y_total_Long_Position)) and (not ((y_total_Short_Selling is None) or numpy.isnan(y_total_Short_Selling))):
                                    #     y_total = float(y_total_Short_Selling)
                                    # else:
                                    #     y_total = None  # float(float(y_total_Long_Position) + float(y_total_Short_Selling))  # 每兩次對衝交易利潤，纍加總計;
                                    # if int(len(y_maximum_drawdown_Long_Position_Array)) > int(0):
                                    #     y_maximum_drawdown_Long_Position = float(min(y_maximum_drawdown_Long_Position_Array))
                                    # y_maximum_drawdown_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_maximum_drawdown_Short_Selling_Array)) > int(0):
                                    #     y_maximum_drawdown_Short_Selling = float(min(y_maximum_drawdown_Short_Selling_Array))
                                    # y_maximum_drawdown_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_maximum_drawdown_Array)) > int(0):
                                    #     y_maximum_drawdown = float(min(y_maximum_drawdown_Array))
                                    # y_maximum_drawdown_Array = None  # 釋放内存;
                                    # if (not ((y_maximum_drawdown_Long_Position is None) or numpy.isnan(y_maximum_drawdown_Long_Position))) and (not ((y_maximum_drawdown_Short_Selling is None) or numpy.isnan(y_maximum_drawdown_Short_Selling))):
                                    #     y_maximum_drawdown = float(min([y_maximum_drawdown_Long_Position, y_maximum_drawdown_Short_Selling]))  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # elif (not ((y_maximum_drawdown_Long_Position is None) or numpy.isnan(y_maximum_drawdown_Long_Position))) and ((y_maximum_drawdown_Short_Selling is None) or numpy.isnan(y_maximum_drawdown_Short_Selling)):
                                    #     y_maximum_drawdown = float(y_maximum_drawdown_Long_Position)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # elif ((y_maximum_drawdown_Long_Position is None) or numpy.isnan(y_maximum_drawdown_Long_Position)) and (not ((y_maximum_drawdown_Short_Selling is None) or numpy.isnan(y_maximum_drawdown_Short_Selling))):
                                    #     y_maximum_drawdown = float(y_maximum_drawdown_Short_Selling)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # else:
                                    #     y_maximum_drawdown = None
                                    # if int(len(y_Positive_Long_Position_Array)) > int(0):
                                    #     # y_Positive_Long_Position = float(min(y_Positive_Long_Position_Array))
                                    #     y_Positive_Long_Position = float(sum(y_Positive_Long_Position_Array))
                                    # y_Positive_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_Positive_Short_Selling_Array)) > int(0):
                                    #     # y_Positive_Short_Selling = float(min(y_Positive_Short_Selling_Array))
                                    #     y_Positive_Short_Selling = float(sum(y_Positive_Short_Selling_Array))
                                    # y_Positive_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_Positive_Array)) > int(0):
                                    #     # y_Positive = float(min(y_Positive_Array))
                                    #     y_Positive = float(sum(y_Positive_Array))
                                    # y_Positive_Array = None  # 釋放内存;
                                    # # y_Positive = None  # float(0.0)  # float(float(y_Positive_Long_Position) + float(y_Positive_Short_Selling))
                                    # if (not ((y_Positive_Long_Position is None) or numpy.isnan(y_Positive_Long_Position))) and (not ((y_Positive_Short_Selling is None) or numpy.isnan(y_Positive_Short_Selling))):
                                    #     y_Positive = float(float(y_Positive_Long_Position) + float(y_Positive_Short_Selling))
                                    # elif (not ((y_Positive_Long_Position is None) or numpy.isnan(y_Positive_Long_Position))) and ((y_Positive_Short_Selling is None) or numpy.isnan(y_Positive_Short_Selling)):
                                    #     y_Positive = float(y_Positive_Long_Position)
                                    # elif ((y_Positive_Long_Position is None) or numpy.isnan(y_Positive_Long_Position)) and (not ((y_Positive_Short_Selling is None) or numpy.isnan(y_Positive_Short_Selling))):
                                    #     y_Positive = float(y_Positive_Short_Selling)
                                    # else:
                                    #     y_Positive = None  # float(float(y_Positive_Long_Position) + float(y_Positive_Short_Selling))
                                    # if int(len(y_Negative_Long_Position_Array)) > int(0):
                                    #     # y_Negative_Long_Position = float(min(y_Negative_Long_Position_Array))
                                    #     y_Negative_Long_Position = float(sum(y_Negative_Long_Position_Array))
                                    # y_Negative_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_Negative_Short_Selling_Array)) > int(0):
                                    #     # y_Negative_Short_Selling = float(min(y_Negative_Short_Selling_Array))
                                    #     y_Negative_Short_Selling = float(sum(y_Negative_Short_Selling_Array))
                                    # y_Negative_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_Negative_Array)) > int(0):
                                    #     # y_Negative = float(min(y_Negative_Array))
                                    #     y_Negative = float(sum(y_Negative_Array))
                                    # y_Negative_Array = None  # 釋放内存;
                                    # # y_Negative = None  # float(0.0)  # float(float(y_Negative_Long_Position) + float(y_Negative_Short_Selling))
                                    # if (not ((y_Negative_Long_Position is None) or numpy.isnan(y_Negative_Long_Position))) and (not ((y_Negative_Short_Selling is None) or numpy.isnan(y_Negative_Short_Selling))):
                                    #     y_Negative = float(float(y_Negative_Long_Position) + float(y_Negative_Short_Selling))
                                    # elif (not ((y_Negative_Long_Position is None) or numpy.isnan(y_Negative_Long_Position))) and ((y_Negative_Short_Selling is None) or numpy.isnan(y_Negative_Short_Selling)):
                                    #     y_Negative = float(y_Negative_Long_Position)
                                    # elif ((y_Negative_Long_Position is None) or numpy.isnan(y_Negative_Long_Position)) and (not ((y_Negative_Short_Selling is None) or numpy.isnan(y_Negative_Short_Selling))):
                                    #     y_Negative = float(y_Negative_Short_Selling)
                                    # else:
                                    #     y_Negative = None  # float(float(y_Negative_Long_Position) + float(y_Negative_Short_Selling))
                                    # if int(len(y_P_Positive_Long_Position_Array)) > int(0):
                                    #     # y_P_Positive_Long_Position = float(min(y_P_Positive_Long_Position_Array))
                                    #     # y_P_Positive_Long_Position = float(sum(y_P_Positive_Long_Position_Array))
                                    #     y_P_Positive_Long_Position = float(numpy.mean(y_P_Positive_Long_Position_Array))
                                    # y_P_Positive_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_P_Positive_Short_Selling_Array)) > int(0):
                                    #     # y_P_Positive_Short_Selling = float(min(y_P_Positive_Short_Selling_Array))
                                    #     # y_P_Positive_Short_Selling = float(sum(y_P_Positive_Short_Selling_Array))
                                    #     y_P_Positive_Short_Selling = float(numpy.mean(y_P_Positive_Short_Selling_Array))
                                    # y_P_Positive_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_P_Positive_Array)) > int(0):
                                    #     # y_P_Positive = float(min(y_P_Positive_Array))
                                    #     # y_P_Positive = float(sum(y_P_Positive_Array))
                                    #     y_P_Positive = float(numpy.mean(y_P_Positive_Array))
                                    # y_P_Positive_Array = None  # 釋放内存;
                                    # # y_P_Positive = None  # float(0.0)  # float(float(y_P_Positive_Long_Position) + float(y_P_Positive_Short_Selling))
                                    # if (not ((y_P_Positive_Long_Position is None) or numpy.isnan(y_P_Positive_Long_Position))) and (not ((y_P_Positive_Short_Selling is None) or numpy.isnan(y_P_Positive_Short_Selling))):
                                    #     # y_P_Positive = float(float(y_P_Positive_Long_Position) + float(y_P_Positive_Short_Selling))
                                    #     y_P_Positive = float(numpy.mean([float(y_P_Positive_Long_Position), float(y_P_Positive_Short_Selling)]))
                                    # elif (not ((y_P_Positive_Long_Position is None) or numpy.isnan(y_P_Positive_Long_Position))) and ((y_P_Positive_Short_Selling is None) or numpy.isnan(y_P_Positive_Short_Selling)):
                                    #     y_P_Positive = float(y_P_Positive_Long_Position)
                                    # elif ((y_P_Positive_Long_Position is None) or numpy.isnan(y_P_Positive_Long_Position)) and (not ((y_P_Positive_Short_Selling is None) or numpy.isnan(y_P_Positive_Short_Selling))):
                                    #     y_P_Positive = float(y_P_Positive_Short_Selling)
                                    # else:
                                    #     y_P_Positive = None  # float(float(y_P_Positive_Long_Position) + float(y_P_Positive_Short_Selling))
                                    # if int(len(y_P_Negative_Long_Position_Array)) > int(0):
                                    #     # y_P_Negative_Long_Position = float(min(y_P_Negative_Long_Position_Array))
                                    #     # y_P_Negative_Long_Position = float(sum(y_P_Negative_Long_Position_Array))
                                    #     y_P_Negative_Long_Position = float(numpy.mean(y_P_Negative_Long_Position_Array))
                                    # y_P_Negative_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_P_Negative_Short_Selling_Array)) > int(0):
                                    #     # y_P_Negative_Short_Selling = float(min(y_P_Negative_Short_Selling_Array))
                                    #     # y_P_Negative_Short_Selling = float(sum(y_P_Negative_Short_Selling_Array))
                                    #     y_P_Negative_Short_Selling = float(numpy.mean(y_P_Negative_Short_Selling_Array))
                                    # y_P_Negative_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_P_Negative_Array)) > int(0):
                                    #     # y_P_Negative = float(min(y_P_Negative_Array))
                                    #     # y_P_Negative = float(sum(y_P_Negative_Array))
                                    #     y_P_Negative = float(numpy.mean(y_P_Negative_Array))
                                    # y_P_Negative_Array = None  # 釋放内存;
                                    # # y_P_Negative = None  # float(0.0)  # float(float(y_P_Negative_Long_Position) + float(y_P_Negative_Short_Selling))
                                    # if (not ((y_P_Negative_Long_Position is None) or numpy.isnan(y_P_Negative_Long_Position))) and (not ((y_P_Negative_Short_Selling is None) or numpy.isnan(y_P_Negative_Short_Selling))):
                                    #     # y_P_Negative = float(float(y_P_Negative_Long_Position) + float(y_P_Negative_Short_Selling))
                                    #     y_P_Negative = float(numpy.mean([float(y_P_Negative_Long_Position), float(y_P_Negative_Short_Selling)]))
                                    # elif (not ((y_P_Negative_Long_Position is None) or numpy.isnan(y_P_Negative_Long_Position))) and ((y_P_Negative_Short_Selling is None) or numpy.isnan(y_P_Negative_Short_Selling)):
                                    #     y_P_Negative = float(y_P_Negative_Long_Position)
                                    # elif ((y_P_Negative_Long_Position is None) or numpy.isnan(y_P_Negative_Long_Position)) and (not ((y_P_Negative_Short_Selling is None) or numpy.isnan(y_P_Negative_Short_Selling))):
                                    #     y_P_Negative = float(y_P_Negative_Short_Selling)
                                    # else:
                                    #     y_P_Negative = None  # float(float(y_P_Negative_Long_Position) + float(y_P_Negative_Short_Selling))
                                    # if int(len(y_amplitude_Long_Position_Array)) > int(0):
                                    #     # y_amplitude_Long_Position = float(min(y_amplitude_Long_Position_Array))  # 去極小值;
                                    #     # y_amplitude_Long_Position = float(sum(y_amplitude_Long_Position_Array))  # 取總和
                                    #     # y_amplitude_Long_Position = float(numpy.mean(y_amplitude_Long_Position_Array))  # 取均值;
                                    #     y_amplitude_Long_Position = float(numpy.median(y_amplitude_Long_Position_Array))  # 取中位數;
                                    # y_amplitude_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_amplitude_Short_Selling_Array)) > int(0):
                                    #     # y_amplitude_Short_Selling = float(min(y_amplitude_Short_Selling_Array))  # 去極小值;
                                    #     # y_amplitude_Short_Selling = float(sum(y_amplitude_Short_Selling_Array))  # 取總和
                                    #     # y_amplitude_Short_Selling = float(numpy.mean(y_amplitude_Short_Selling_Array))  # 取均值;
                                    #     y_amplitude_Short_Selling = float(numpy.median(y_amplitude_Short_Selling_Array))  # 取中位數;
                                    # y_amplitude_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_amplitude_Array)) > int(0):
                                    #     # y_amplitude = float(min(y_amplitude_Array)[1])  # 去極小值;
                                    #     # y_amplitude = float(sum(y_amplitude_Array))  # 取總和
                                    #     # y_amplitude = float(numpy.mean(y_amplitude_Array))  # 取均值;
                                    #     y_amplitude = float(numpy.median(y_amplitude_Array))  # 取中位數;
                                    # y_amplitude_Array = None  # 釋放内存;
                                    # # y_amplitude = None  # float(0.0)  # float(float(y_amplitude_Long_Position) + float(y_amplitude_Short_Selling))
                                    # if (not ((y_amplitude_Long_Position is None) or numpy.isnan(y_amplitude_Long_Position))) and (not ((y_amplitude_Short_Selling is None) or numpy.isnan(y_amplitude_Short_Selling))):
                                    #     # y_amplitude = float(float(y_amplitude_Long_Position) + float(y_amplitude_Short_Selling))  # 取總和
                                    #     # y_amplitude = float(numpy.mean([float(y_amplitude_Long_Position), float(y_amplitude_Short_Selling)]))  # 取均值;
                                    #     y_amplitude = float(numpy.median([float(y_amplitude_Long_Position), float(y_amplitude_Short_Selling)]))  # 取中位數;
                                    # elif (not ((y_amplitude_Long_Position is None) or numpy.isnan(y_amplitude_Long_Position))) and ((y_amplitude_Short_Selling is None) or numpy.isnan(y_amplitude_Short_Selling)):
                                    #     y_amplitude = float(y_amplitude_Long_Position)
                                    # elif ((y_amplitude_Long_Position is None) or numpy.isnan(y_amplitude_Long_Position)) and (not ((y_amplitude_Short_Selling is None) or numpy.isnan(y_amplitude_Short_Selling))):
                                    #     y_amplitude = float(y_amplitude_Short_Selling)
                                    # else:
                                    #     y_amplitude = None  # float(float(y_amplitude_Long_Position) + float(y_amplitude_Short_Selling))
                                    # if int(len(y_turnover_Long_Position_Array)) > int(0):
                                    #     # y_turnover_Long_Position = float(min(y_turnover_Long_Position_Array))  # 去極小值;
                                    #     # y_turnover_Long_Position = float(sum(y_turnover_Long_Position_Array))  # 取總和
                                    #     # y_turnover_Long_Position = float(numpy.mean(y_turnover_Long_Position_Array))  # 取均值;
                                    #     y_turnover_Long_Position = float(numpy.median(y_turnover_Long_Position_Array))  # 取中位數;
                                    # y_turnover_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_turnover_Short_Selling_Array)) > int(0):
                                    #     # y_turnover_Short_Selling = float(min(y_turnover_Short_Selling_Array))  # 去極小值;
                                    #     # y_turnover_Short_Selling = float(sum(y_turnover_Short_Selling_Array))  # 取總和
                                    #     # y_turnover_Short_Selling = float(numpy.mean(y_turnover_Short_Selling_Array))  # 取均值;
                                    #     y_turnover_Short_Selling = float(numpy.median(y_turnover_Short_Selling_Array))  # 取中位數;
                                    # y_turnover_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_turnover_Array)) > int(0):
                                    #     # y_turnover = float(min(y_turnover_Array))  # 去極小值;
                                    #     # y_turnover = float(sum(y_turnover_Array))  # 取總和
                                    #     # y_turnover = float(numpy.mean(y_turnover_Array))  # 取均值;
                                    #     y_turnover = float(numpy.median(y_turnover_Array))  # 取中位數;
                                    # y_turnover_Array = None  # 釋放内存;
                                    # # y_turnover = None  # float(0.0)  # float(float(y_turnover_Long_Position) + float(y_turnover_Short_Selling))
                                    # if (not ((y_turnover_Long_Position is None) or numpy.isnan(y_turnover_Long_Position))) and (not ((y_turnover_Short_Selling is None) or numpy.isnan(y_turnover_Short_Selling))):
                                    #     # y_turnover = float(float(y_turnover_Long_Position) + float(y_turnover_Short_Selling))  # 取總和
                                    #     # y_turnover = float(numpy.mean([float(y_turnover_Long_Position), float(y_turnover_Short_Selling)]))  # 取均值;
                                    #     y_turnover = float(numpy.median([float(y_turnover_Long_Position), float(y_turnover_Short_Selling)]))  # 取中位數;
                                    # elif (not ((y_turnover_Long_Position is None) or numpy.isnan(y_turnover_Long_Position))) and ((y_turnover_Short_Selling is None) or numpy.isnan(y_turnover_Short_Selling)):
                                    #     y_turnover = float(y_turnover_Long_Position)
                                    # elif ((y_turnover_Long_Position is None) or numpy.isnan(y_turnover_Long_Position)) and (not ((y_turnover_Short_Selling is None) or numpy.isnan(y_turnover_Short_Selling))):
                                    #     y_turnover = float(y_turnover_Short_Selling)
                                    # else:
                                    #     y_turnover = None  # float(float(y_turnover_Long_Position) + float(y_turnover_Short_Selling))
                                    # if int(len(y_date_transaction_between_Long_Position_Array)) > int(0):
                                    #     # y_date_transaction_between_Long_Position = float(min(y_date_transaction_between_Long_Position_Array))  # 去極小值;
                                    #     # y_date_transaction_between_Long_Position = float(sum(y_date_transaction_between_Long_Position_Array))  # 取總和
                                    #     # y_date_transaction_between_Long_Position = float(numpy.mean(y_date_transaction_between_Long_Position_Array))  # 取均值;
                                    #     y_date_transaction_between_Long_Position = float(numpy.median(y_date_transaction_between_Long_Position_Array))  # 取中位數;
                                    # y_date_transaction_between_Long_Position_Array = None  # 釋放内存;
                                    # if int(len(y_date_transaction_between_Short_Selling_Array)) > int(0):
                                    #     # y_date_transaction_between_Short_Selling = float(min(y_date_transaction_between_Short_Selling_Array))  # 去極小值;
                                    #     # y_date_transaction_between_Short_Selling = float(sum(y_date_transaction_between_Short_Selling_Array))  # 取總和
                                    #     # y_date_transaction_between_Short_Selling = float(numpy.mean(y_date_transaction_between_Short_Selling_Array))  # 取均值;
                                    #     y_date_transaction_between_Short_Selling = float(numpy.median(y_date_transaction_between_Short_Selling_Array))  # 取中位數;
                                    # y_date_transaction_between_Short_Selling_Array = None  # 釋放内存;
                                    # if int(len(y_date_transaction_between_Array)) > int(0):
                                    #     # y_date_transaction_between = float(min(y_date_transaction_between_Array))  # 去極小值;
                                    #     # y_date_transaction_between = float(sum(y_date_transaction_between_Array))  # 取總和
                                    #     # y_date_transaction_between = float(numpy.mean(y_date_transaction_between_Array))  # 取均值;
                                    #     y_date_transaction_between = float(numpy.median(y_date_transaction_between_Array))  # 取中位數;
                                    # y_date_transaction_between_Array = None  # 釋放内存;
                                    # # y_date_transaction_between = None  # float(0.0)  # float(float(y_date_transaction_between_Long_Position) + float(y_date_transaction_between_Short_Selling))
                                    # if (not ((y_date_transaction_between_Long_Position is None) or numpy.isnan(y_date_transaction_between_Long_Position))) and (not ((y_date_transaction_between_Short_Selling is None) or numpy.isnan(y_date_transaction_between_Short_Selling))):
                                    #     # y_date_transaction_between = float(float(y_date_transaction_between_Long_Position) + float(y_date_transaction_between_Short_Selling))  # 取總和
                                    #     # y_date_transaction_between = float(numpy.mean([float(y_date_transaction_between_Long_Position), float(y_date_transaction_between_Short_Selling)]))  # 取均值;
                                    #     y_date_transaction_between = float(numpy.median([float(y_date_transaction_between_Long_Position), float(y_date_transaction_between_Short_Selling)]))  # 取中位數;
                                    # elif (not ((y_date_transaction_between_Long_Position is None) or numpy.isnan(y_date_transaction_between_Long_Position))) and ((y_date_transaction_between_Short_Selling is None) or numpy.isnan(y_date_transaction_between_Short_Selling)):
                                    #     y_date_transaction_between = float(y_date_transaction_between_Long_Position)
                                    # elif ((y_date_transaction_between_Long_Position is None) or numpy.isnan(y_date_transaction_between_Long_Position)) and (not ((y_date_transaction_between_Short_Selling is None) or numpy.isnan(y_date_transaction_between_Short_Selling))):
                                    #     y_date_transaction_between = float(y_date_transaction_between_Short_Selling)
                                    # else:
                                    #     y_date_transaction_between = None  # float(float(y_date_transaction_between_Long_Position) + float(y_date_transaction_between_Short_Selling))
                                    # if int(len(y_Long_Position_profit_Array)) > int(0):
                                    #     # y_Long_Position_profit = float(min(y_Long_Position_profit_Array))
                                    #     y_Long_Position_profit = float(sum(y_Long_Position_profit_Array))
                                    # y_Long_Position_profit_Array = None  # 釋放内存;
                                    # if int(len(y_Short_Selling_profit_Array)) > int(0):
                                    #     # y_Short_Selling_profit = float(min(y_Short_Selling_profit_Array))
                                    #     y_Short_Selling_profit = float(sum(y_Short_Selling_profit_Array))
                                    # y_Short_Selling_profit_Array = None  # 釋放内存;
                                    # if int(len(y_profit_Array)) > int(0):
                                    #     # y_profit = float(min(y_profit_Array))
                                    #     y_profit = float(sum(y_profit_Array))
                                    # y_profit_Array = None  # 釋放内存;
                                    # # y_profit = None  # float(0.0)  # float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
                                    # if (not ((y_Long_Position_profit is None) or numpy.isnan(y_Long_Position_profit))) and (not ((y_Short_Selling_profit is None) or numpy.isnan(y_Short_Selling_profit))):
                                    #     y_profit = float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
                                    # elif (not ((y_Long_Position_profit is None) or numpy.isnan(y_Long_Position_profit))) and ((y_Short_Selling_profit is None) or numpy.isnan(y_Short_Selling_profit)):
                                    #     y_profit = float(y_Long_Position_profit)
                                    # elif ((y_Long_Position_profit is None) or numpy.isnan(y_Long_Position_profit)) and (not ((y_Short_Selling_profit is None) or numpy.isnan(y_Short_Selling_profit))):
                                    #     y_profit = float(y_Short_Selling_profit)
                                    # else:
                                    #     y_profit = None  # float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
                                    # if int(len(y_Long_Position_loss_Array)) > int(0):
                                    #     y_Long_Position_loss = float(min(y_Long_Position_loss_Array))
                                    # y_Long_Position_loss_Array = None  # 釋放内存;
                                    # if int(len(y_Short_Selling_loss_Array)) > int(0):
                                    #     y_Short_Selling_loss = float(min(y_Short_Selling_loss_Array))
                                    # y_Short_Selling_loss_Array = None  # 釋放内存;
                                    # if int(len(y_loss_Array)) > int(0):
                                    #     y_loss = float(min(y_loss_Array))
                                    # y_loss_Array = None  # 釋放内存;
                                    # # y_loss = None  # float(0.0)  # float(min([float(y_Long_Position_loss), float(y_Short_Selling_loss)]))  # 優化目標變量，最大回撤 × 權重;
                                    # if (not ((y_Long_Position_loss is None) or numpy.isnan(y_Long_Position_loss))) and (not ((y_Short_Selling_loss is None) or numpy.isnan(y_Short_Selling_loss))):
                                    #     y_loss = float(min([y_Long_Position_loss, y_Short_Selling_loss]))  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # elif (not ((y_Long_Position_loss is None) or numpy.isnan(y_Long_Position_loss))) and ((y_Short_Selling_loss is None) or numpy.isnan(y_Short_Selling_loss)):
                                    #     y_loss = float(y_Long_Position_loss)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # elif ((y_Long_Position_loss is None) or numpy.isnan(y_Long_Position_loss)) and (not ((y_Short_Selling_loss is None) or numpy.isnan(y_Short_Selling_loss))):
                                    #     y_loss = float(y_Short_Selling_loss)  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    # else:
                                    #     y_loss = None

                                    # # 測試數據集依據量化規則執行的交易信息;
                                    # stepping_transaction_Dict["testing_transaction"] = {
                                    #     "y_profit": y_profit,  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #     "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量，做多（Long Position），每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #     "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量，做空（Short Selling），每兩次對衝交易利潤 × 權重，加權纍加總計;
                                    #     "y_loss": y_loss,  # 優化目標變量，每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #     "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量，做多（Long Position），每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #     "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量，做空（Short Selling），每兩次對衝交易最大回撤 × 權重，加權取極值總計;
                                    #     "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #     "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #     "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
                                    #     "profit_total": y_total,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    #     "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    #     "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 權重，纍加總計;
                                    #     "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
                                    #     "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
                                    #     "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
                                    #     "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
                                    #     "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
                                    #     "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
                                    #     "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
                                    #     "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
                                    #     "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
                                    #     "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
                                    #     "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
                                    #     "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
                                    #     "average_price_amplitude_date_transaction": y_amplitude,  # 兩次對衝交易日成交價振幅平方和，均值;
                                    #     "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩次對衝交易日成交價振幅平方和，均值;
                                    #     "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，均值;
                                    #     "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
                                    #     "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
                                    #     "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
                                    #     "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
                                    #     "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
                                    #     "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
                                    #     "number_PickStock_transaction": number_PickStock_transaction,  # 交易過的股票總支數;
                                    #     "testing_transaction_sequence": testing_data_transaction_sequence_Dict,  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
                                    #     "PickStock_sort" : {
                                    #         "ticker_symbol" : PickStock_ticker_symbol_Array,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
                                    #         "score" : PickStock_score_Array  # 依照選股規則排序篩選出的股票得分值存儲數組;
                                    #     }  # 依照選股規則排序篩選出的股票代碼字符串和得分存儲字典（Dict）;
                                    # }

                                    # stepping_sequence_Array.append(stepping_transaction_Dict)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                                    # # 釋放内存;
                                    # testing_data_transaction_sequence_Dict = None
                                    # stepping_transaction_Dict = None
                                    # testingData = None  # 釋放内存;

                                # 釋放内存;
                                testingData = None

                    k = None  # 釋放内存;

                    # 釋放内存;
                    trainingData = None
                    MarketTiming_Parameter_Dict = None
                    weight_MarketTiming_Dict = None
                    Plower_weight_MarketTiming_Dict = None
                    Pupper_weight_MarketTiming_Dict = None
                    PickStock_Parameter_Dict = None
                    weight_PickStock_Dict = None
                    Plower_weight_PickStock_Dict = None
                    Pupper_weight_PickStock_Dict = None
                    PickStock_ticker_symbol_Array = None
                    PickStock_ticker_symbol_Array_testing_data_Long_Position = None
                    PickStock_ticker_symbol_Array_testing_data_Short_Selling = None
                    SizePosition_Parameter_Array = None

                # 釋放内存;
                stepping_transaction_Dict = None

        return_stepping_Dict["stepping_sequence"] = stepping_sequence_Array

        # stepping_sequence_Array == [
        #     stepping_transaction_Dict == {
        #         "training_data" : trainingData == {
        #             "ticker_symbol" : {
        #                 "date_transaction" : [],
        #                 "turnover_volume" : [],
        #                 "opening_price" : [],
        #                 "close_price" : [],
        #                 "low_price" : [],
        #                 "high_price" : []
        #             }
        #         },
        #         "training_MarketTiming_Parameter" : MarketTiming_Parameter_Dict == {
        #             "ticker_symbol" : {
        #                 "Long_Position" : float(),
        #                 "Short_Selling" : float()
        #             }
        #         },
        #         "training_PickStock_Parameter" : PickStock_Parameter_Dict == {
        #             "ticker_symbol" : {
        #                 "Long_Position" : float(),
        #                 "Short_Selling" : float()
        #             }
        #         },
        #         "training_PickStock_ticker_symbol" : PickStock_ticker_symbol_Array == [
        #             [
        #                 str()
        #             ]
        #         ],
        #         "training_SizePosition_Parameter" : SizePosition_Parameter_Array == [
        #             weight_MarketTiming_Dict == {
        #                 "ticker_symbol" : {
        #                     "Long_Position" : float(),
        #                     "Short_Selling" : float()
        #                 }
        #             },
        #             weight_PickStock_Dict == {
        #                 "ticker_symbol" : {
        #                     "Long_Position" : float(),
        #                     "Short_Selling" : float()
        #                 }
        #             }
        #         ],
        #         "testing_data" : testingData == {
        #             "ticker_symbol" : {
        #                 "date_transaction" : [],
        #                 "turnover_volume" : [],
        #                 "opening_price" : [],
        #                 "close_price" : [],
        #                 "low_price" : [],
        #                 "high_price" : []
        #             }
        #         },
        #         "testing_PickStock_ticker_symbol" : {
        #             "Long_Position" : PickStock_ticker_symbol_Array_testing_data_Long_Position == [str()],
        #             "Short_Selling" : PickStock_ticker_symbol_Array_testing_data_Short_Selling == [str()]
        #         },
        #         "testing_transaction" : {
        #             "Long_Position" : Long_Position_testing_data_transaction_sequence_Dict == {
        #                 "ticker_symbol" : {
        #                     "revenue_and_expenditure_records_date_transaction" : [float()],
        #                     "Long_Position_profit_date_transaction" : [float()],
        #                     "Index_date_transaction_Long_Position" : int(),
        #                     "Long_Position_date_transaction" : [
        #                         [
        #                             datetime.date(),  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
        #                             str(),  # str("buy"), str("sell"),  # 買入或賣出標識;
        #                             float(),  # 成交價;
        #                             float(),  # 倉位;
        #                             int(),  # 每次成交序號標識;
        #                             int(),  # 交易日期的序列號，用於繪圖可視化;
        #                             datetime.date(),  # 交易日（datetime.date 類型）;
        #                             int(),  # 當日總成交量（turnover volume）;
        #                             float(),  # 當日開盤（opening）成交價;
        #                             float(),  # 當日收盤（closing）成交價;
        #                             float(),  # 當日最低（low）成交價;
        #                             float(),  # 當日最高（high）成交價;
        #                             # float(),  # 當日總成交金額（turnover amount）;
        #                             # int(),  # 當日成交量（turnover volume）換手率（turnover rate）;
        #                             # float(),  # 當日每股收益（price earnings）;
        #                             # float(),  # 當日每股净值（book value per share）;
        #                         ]
        #                     ],
        #                     "drawdown" : drawdown_Array_Long_Position == [float()]
        #                 }
        #             },
        #             "Short_Selling" : Short_Selling_testing_data_transaction_sequence_Dict == {
        #                 "ticker_symbol" : {
        #                     "revenue_and_expenditure_records_date_transaction" : [float()],
        #                     "Short_Selling_profit_date_transaction" : [float()],
        #                     "Index_date_transaction_Short_Selling" : int(),
        #                     "Short_Selling_date_transaction" : [
        #                         [
        #                             datetime.date(),  # 交易時間日期（datetime.date 或 datetime.datetime 類型）;
        #                             ::Core.String,  # str("buy"), str("sell"),  # 買入或賣出標識;
        #                             float(),  # 成交價;
        #                             float(),  # 倉位;
        #                             int(),  # 每次成交序號標識;
        #                             int(),  # 交易日期的序列號，用於繪圖可視化;
        #                             datetime.date(),  # 交易日（datetime.date 類型）;
        #                             int(),  # 當日總成交量（turnover volume）;
        #                             float(),  # 當日開盤（opening）成交價;
        #                             float(),  # 當日收盤（closing）成交價;
        #                             float(),  # 當日最低（low）成交價;
        #                             float(),  # 當日最高（high）成交價;
        #                             # float(),  # 當日總成交金額（turnover amount）;
        #                             # int(),  # 當日成交量（turnover volume）換手率（turnover rate）;
        #                             # float(),  # 當日每股收益（price earnings）;
        #                             # float(),  # 當日每股净值（book value per share）;
        #                         ]
        #                     ],
        #                     "drawdown" : drawdown_Array_Short_Selling == [float()]
        #                 }
        #             }
        #         }
        #     }
        # ]

        data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則交易信息的序列;
        # if isinstance(stepping_sequence_Array, list) and int(len(stepping_sequence_Array)) > int(0):
        #     for i in range(int(0), int(len(stepping_sequence_Array)), int(1)):
        #         if isinstance(stepping_sequence_Array[i], dict) and ("testing_transaction" in stepping_sequence_Array[i]):
        #             if isinstance(stepping_sequence_Array[i]["testing_transaction"], dict):
        #                 # 做多（Long Position）記錄;
        #                 if ("Long_Position" in stepping_sequence_Array[i]["testing_transaction"]) and isinstance(stepping_sequence_Array[i]["testing_transaction"]["Long_Position"], dict) and int(len(stepping_sequence_Array[i]["testing_transaction"]["Long_Position"])) > int(0):
        #                     for key, value in stepping_sequence_Array[i]["testing_transaction"]["Long_Position"].items():
        #                         if not (str(key) in data_transaction_sequence_Dict):
        #                             data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
        #                         elif (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in data_transaction_sequence_Dict[str(key)])):
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
        #                         # else:
        #                         if (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in data_transaction_sequence_Dict[str(key)]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"], dict) and int(len(data_transaction_sequence_Dict[str(key)]["Long_Position"])) <= int(0):
        #                             # 做多（Long Position）記錄;
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["index"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["direction"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["SizePosition"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["focus"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["amplitude"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["date_transaction"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["turnover_volume"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["opening_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["close_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["low_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["high_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"] = []
        #                 # 做空（Short Selling）記錄;
        #                 if ("Short_Selling" in stepping_sequence_Array[i]["testing_transaction"]) and isinstance(stepping_sequence_Array[i]["testing_transaction"]["Short_Selling"], dict) and int(len(stepping_sequence_Array[i]["testing_transaction"]["Short_Selling"])) > int(0):
        #                     for key, value in stepping_sequence_Array[i]["testing_transaction"]["Short_Selling"].items():
        #                         if not (str(key) in data_transaction_sequence_Dict):
        #                             data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
        #                         elif (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in data_transaction_sequence_Dict[str(key)])):
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
        #                         # else:
        #                         if (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in data_transaction_sequence_Dict[str(key)]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict) and int(len(data_transaction_sequence_Dict[str(key)]["Short_Selling"])) <= int(0):
        #                             # 做空（Short Selling）記錄;
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["index"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["direction"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["SizePosition"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["focus"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["amplitude"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["date_transaction"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["turnover_volume"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["opening_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["close_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["low_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["high_price"] = []
        #                             data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"] = []
        if isinstance(stepping_sequence_Array, list) and int(len(stepping_sequence_Array)) > int(0):
            for i in range(int(0), int(len(stepping_sequence_Array)), int(1)):
                if isinstance(stepping_sequence_Array[i], dict) and ("testing_transaction" in stepping_sequence_Array[i]):
                    if isinstance(stepping_sequence_Array[i]["testing_transaction"], dict):
                        # 做多（Long Position）記錄;
                        if ("Long_Position" in stepping_sequence_Array[i]["testing_transaction"]) and isinstance(stepping_sequence_Array[i]["testing_transaction"]["Long_Position"], dict) and int(len(stepping_sequence_Array[i]["testing_transaction"]["Long_Position"])) > int(0):
                            for key, value in stepping_sequence_Array[i]["testing_transaction"]["Long_Position"].items():
                                if isinstance(value, dict) and ("Long_Position_date_transaction" in value) and isinstance(value["Long_Position_date_transaction"], list):
                                    for j in range(int(0), int(len(value["Long_Position_date_transaction"])), int(1)):
                                        if isinstance(value["Long_Position_date_transaction"][j], list) and int(len(value["Long_Position_date_transaction"][j])) >= int(12):
                                            if not (str(key) in data_transaction_sequence_Dict):
                                                data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
                                            elif (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in data_transaction_sequence_Dict[str(key)])):
                                                data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
                                            # else:
                                            if (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in data_transaction_sequence_Dict[str(key)]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"], dict):
                                                if not ("index" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["index"] = []
                                                if not ("direction" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["direction"] = []
                                                if not ("price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["price"] = []
                                                if not ("SizePosition" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["SizePosition"] = []
                                                if not ("focus" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["focus"] = []
                                                if not ("amplitude" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["amplitude"] = []
                                                if not ("date_transaction" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["date_transaction"] = []
                                                if not ("turnover_volume" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["turnover_volume"] = []
                                                if not ("opening_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["opening_price"] = []
                                                if not ("close_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["close_price"] = []
                                                if not ("low_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["low_price"] = []
                                                if not ("high_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["high_price"] = []

                                                # 做多（Long Position）記錄;
                                                if ("index" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["index"], list):
                                                    # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["index"].append(int(value["Long_Position_date_transaction"][j][5]))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                if ("direction" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["direction"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["direction"].append(str(value["Long_Position_date_transaction"][j][1]))
                                                if ("price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["price"].append(float(value["Long_Position_date_transaction"][j][2]))
                                                if ("SizePosition" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["SizePosition"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["SizePosition"].append(value["Long_Position_date_transaction"][j][3])
                                                if ("focus" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["focus"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["focus"].append(float(numpy.mean([float(value["Long_Position_date_transaction"][j][8]), float(value["Long_Position_date_transaction"][j][9]), float(value["Long_Position_date_transaction"][j][10]), float(value["Long_Position_date_transaction"][j][11])])))
                                                if ("amplitude" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["amplitude"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["amplitude"].append(float(numpy.std([float(value["Long_Position_date_transaction"][j][8]), float(value["Long_Position_date_transaction"][j][9]), float(value["Long_Position_date_transaction"][j][10]), float(value["Long_Position_date_transaction"][j][11])])))  # data_transaction_sequence_Dict[str(key)]["Long_Position"]["amplitude"].append(float(numpy.std([float(value["Long_Position_date_transaction"][j][8]), float(value["Long_Position_date_transaction"][j][9]), float(value["Long_Position_date_transaction"][j][10]), float(value["Long_Position_date_transaction"][j][11])], ddof = 1)))
                                                if ("date_transaction" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["date_transaction"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["date_transaction"].append(value["Long_Position_date_transaction"][j][0])
                                                if ("turnover_volume" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["turnover_volume"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["turnover_volume"].append(int(value["Long_Position_date_transaction"][j][7]))
                                                if ("opening_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["opening_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["opening_price"].append(float(value["Long_Position_date_transaction"][j][8]))
                                                if ("close_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["close_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["close_price"].append(float(value["Long_Position_date_transaction"][j][9]))
                                                if ("low_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["low_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["low_price"].append(float(value["Long_Position_date_transaction"][j][10]))
                                                if ("high_price" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["high_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["high_price"].append(float(value["Long_Position_date_transaction"][j][11]))

                                                # 記錄該輪對衝交易的回撤值序列;
                                                if not ("drawdown" in data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                    data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"] = []
                                                if ("drawdown" in data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"], list):
                                                    if str(value["Long_Position_date_transaction"][j][1]) == "buy":
                                                        data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"].append(numpy.nan)  # numpy.nan;  # None;  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                        # if ("drawdown" in value):
                                                        #     # if isinstance(value, dict) and ("drawdown" in value) and isinstance(value["drawdown"], list):
                                                        #     data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"].append(value["drawdown"])  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                        # else:
                                                        #     data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"].append(numpy.nan)  # numpy.nan;  # None;  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                    if str(value["Long_Position_date_transaction"][j][1]) == "sell":
                                                        if ("drawdown" in value):
                                                            # if isinstance(value, dict) and ("drawdown" in value) and isinstance(value["drawdown"], list):
                                                            data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"].append(value["drawdown"])  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                        else:
                                                            data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"].append(numpy.nan)  # numpy.nan;  # None;  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;

                        # 做空（Short Selling）記錄;
                        if ("Short_Selling" in stepping_sequence_Array[i]["testing_transaction"]) and isinstance(stepping_sequence_Array[i]["testing_transaction"]["Short_Selling"], dict) and int(len(stepping_sequence_Array[i]["testing_transaction"]["Short_Selling"])) > int(0):
                            for key, value in stepping_sequence_Array[i]["testing_transaction"]["Short_Selling"].items():
                                if isinstance(value, dict) and ("Short_Selling_date_transaction" in value) and isinstance(value["Short_Selling_date_transaction"], list):
                                    for j in range(int(0), int(len(value["Short_Selling_date_transaction"])), int(1)):
                                        if isinstance(value["Short_Selling_date_transaction"][j], list) and int(len(value["Short_Selling_date_transaction"][j])) >= int(12):
                                            if not (str(key) in data_transaction_sequence_Dict):
                                                data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
                                            elif (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in data_transaction_sequence_Dict[str(key)])):
                                                data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
                                            # else:
                                            if (str(key) in data_transaction_sequence_Dict) and isinstance(data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in data_transaction_sequence_Dict[str(key)]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict):
                                                if not ("index" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["index"] = []
                                                if not ("direction" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["direction"] = []
                                                if not ("price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["price"] = []
                                                if not ("SizePosition" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["SizePosition"] = []
                                                if not ("focus" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["focus"] = []
                                                if not ("amplitude" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["amplitude"] = []
                                                if not ("date_transaction" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["date_transaction"] = []
                                                if not ("turnover_volume" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["turnover_volume"] = []
                                                if not ("opening_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["opening_price"] = []
                                                if not ("close_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["close_price"] = []
                                                if not ("low_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["low_price"] = []
                                                if not ("high_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["high_price"] = []

                                                # 做空（Short Selling）記錄;
                                                if ("index" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["index"], list):
                                                    # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["index"].append(int(value["Short_Selling_date_transaction"][j][5]))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                                if ("direction" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["direction"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["direction"].append(str(value["Short_Selling_date_transaction"][j][1]))
                                                if ("price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["price"].append(float(value["Short_Selling_date_transaction"][j][2]))
                                                if ("SizePosition" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["SizePosition"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["SizePosition"].append(value["Short_Selling_date_transaction"][j][3])
                                                if ("focus" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["focus"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["focus"].append(float(numpy.mean([float(value["Short_Selling_date_transaction"][j][8]), float(value["Short_Selling_date_transaction"][j][9]), float(value["Short_Selling_date_transaction"][j][10]), float(value["Short_Selling_date_transaction"][j][11])])))
                                                if ("amplitude" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["amplitude"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["amplitude"].append(float(numpy.std([float(value["Short_Selling_date_transaction"][j][8]), float(value["Short_Selling_date_transaction"][j][9]), float(value["Short_Selling_date_transaction"][j][10]), float(value["Short_Selling_date_transaction"][j][11])])))  # data_transaction_sequence_Dict[str(key)]["Short_Selling"]["amplitude"].append(float(numpy.std([float(value["Short_Selling_date_transaction"][j][8]), float(value["Short_Selling_date_transaction"][j][9]), float(value["Short_Selling_date_transaction"][j][10]), float(value["Short_Selling_date_transaction"][j][11])], ddof = 1)));
                                                if ("date_transaction" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["date_transaction"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["date_transaction"].append(value["Short_Selling_date_transaction"][j][0])
                                                if ("turnover_volume" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["turnover_volume"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["turnover_volume"].append(int(value["Short_Selling_date_transaction"][j][7]))
                                                if ("opening_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["opening_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["opening_price"].append(float(value["Short_Selling_date_transaction"][j][8]))
                                                if ("close_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["close_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["close_price"].append(float(value["Short_Selling_date_transaction"][j][9]))
                                                if ("low_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["low_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["low_price"].append(float(value["Short_Selling_date_transaction"][j][10]))
                                                if ("high_price" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["high_price"], list):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["high_price"].append(float(value["Short_Selling_date_transaction"][j][11]))

                                                # 記錄該輪對衝交易的回撤值序列;
                                                if not ("drawdown" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                    data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"] = []
                                                if ("drawdown" in data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"], list):
                                                    if str(value["Short_Selling_date_transaction"][j][1]) == "sell":
                                                        data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"].append(numpy.nan)  # numpy.nan;  # None;  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                        # if ("drawdown" in value):
                                                        #     # if isinstance(value, dict) and ("drawdown" in value) and isinstance(value["drawdown"], list):
                                                        #     data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"].append(value["drawdown"])  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                        # else:
                                                        #     data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"].append(numpy.nan)  # numpy.nan;  # None;  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                    if str(value["Short_Selling_date_transaction"][j][1]) == "buy":
                                                        if ("drawdown" in value):
                                                            # if isinstance(value, dict) and ("drawdown" in value) and isinstance(value["drawdown"], list):
                                                            data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"].append(value["drawdown"])  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;
                                                        else:
                                                            data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"].append(numpy.nan)  # numpy.nan;  # None;  # 記錄該輪對衝交易的回撤值序列，使用 list.append() 函數在列表末尾追加推入新元素;

        # 交易信息序列的空值，刪除未曾交易過的股票數據;
        data_transaction_sequence_Dict_2 = {key : value for key, value in data_transaction_sequence_Dict.items()}  # 使用 Python 字典（dict）的推導式，創建副本;
        for key, value in data_transaction_sequence_Dict_2.items():
            if isinstance(value, dict):
                if ("Long_Position" in value) and isinstance(value["Long_Position"], dict) and int(len(value["Long_Position"])) <= int(0):
                    del data_transaction_sequence_Dict[str(key)]["Long_Position"]  # 刪除：data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                if ("Long_Position" in value) and isinstance(value["Long_Position"], dict) and int(len(value["Long_Position"])) > int(0):
                    if (("index" in value["Long_Position"]) and isinstance(value["Long_Position"]["index"], list) and int(len(value["Long_Position"]["index"])) == int(0)) and (("direction" in value["Long_Position"]) and isinstance(value["Long_Position"]["direction"], list) and int(len(value["Long_Position"]["direction"])) == int(0)) and (("price" in value["Long_Position"]) and isinstance(value["Long_Position"]["price"], list) and int(len(value["Long_Position"]["price"])) == int(0)) and (("SizePosition" in value["Long_Position"]) and isinstance(value["Long_Position"]["SizePosition"], list) and int(len(value["Long_Position"]["SizePosition"])) == int(0)) and (("focus" in value["Long_Position"]) and isinstance(value["Long_Position"]["focus"], list) and int(len(value["Long_Position"]["focus"])) == int(0)) and (("amplitude" in value["Long_Position"]) and isinstance(value["Long_Position"]["amplitude"], list) and int(len(value["Long_Position"]["amplitude"])) == int(0)) and (("date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["date_transaction"], list) and int(len(value["Long_Position"]["date_transaction"])) == int(0)) and (("turnover_volume" in value["Long_Position"]) and isinstance(value["Long_Position"]["turnover_volume"], list) and int(len(value["Long_Position"]["turnover_volume"])) == int(0)) and (("opening_price" in value["Long_Position"]) and isinstance(value["Long_Position"]["opening_price"], list) and int(len(value["Long_Position"]["opening_price"])) == int(0)) and (("close_price" in value["Long_Position"]) and isinstance(value["Long_Position"]["close_price"], list) and int(len(value["Long_Position"]["close_price"])) == int(0)) and (("low_price" in value["Long_Position"]) and isinstance(value["Long_Position"]["low_price"], list) and int(len(value["Long_Position"]["low_price"])) == int(0)) and (("high_price" in value["Long_Position"]) and isinstance(value["Long_Position"]["high_price"], list) and int(len(value["Long_Position"]["high_price"])) == int(0)):
                        del data_transaction_sequence_Dict[str(key)]["Long_Position"]  # 刪除：data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict) and int(len(value["Short_Selling"])) <= int(0):
                    del data_transaction_sequence_Dict[str(key)]["Short_Selling"]  # 刪除：data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict) and int(len(value["Short_Selling"])) > int(0):
                    if (("index" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["index"], list) and int(len(value["Short_Selling"]["index"])) == int(0)) and (("direction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["direction"], list) and int(len(value["Short_Selling"]["direction"])) == int(0)) and (("price" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["price"], list) and int(len(value["Short_Selling"]["price"])) == int(0)) and (("SizePosition" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["SizePosition"], list) and int(len(value["Short_Selling"]["SizePosition"])) == int(0)) and (("focus" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["focus"], list) and int(len(value["Short_Selling"]["focus"])) == int(0)) and (("amplitude" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["amplitude"], list) and int(len(value["Short_Selling"]["amplitude"])) == int(0)) and (("date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["date_transaction"], list) and int(len(value["Short_Selling"]["date_transaction"])) == int(0)) and (("turnover_volume" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["turnover_volume"], list) and int(len(value["Short_Selling"]["turnover_volume"])) == int(0)) and (("opening_price" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["opening_price"], list) and int(len(value["Short_Selling"]["opening_price"])) == int(0)) and (("close_price" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["close_price"], list) and int(len(value["Short_Selling"]["close_price"])) == int(0)) and (("low_price" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["low_price"], list) and int(len(value["Short_Selling"]["low_price"])) == int(0)) and (("high_price" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["high_price"], list) and int(len(value["Short_Selling"]["high_price"])) == int(0)):
                        del data_transaction_sequence_Dict[str(key)]["Short_Selling"]  # 刪除：data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                # if int(len(value)) <= int(0):
                #     del data_transaction_sequence_Dict[key]  # 刪除：data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
        data_transaction_sequence_Dict_2 = None  # 釋放内存;
        data_transaction_sequence_Dict_2 = {key : value for key, value in data_transaction_sequence_Dict.items()}  # 使用 Python 字典（dict）的推導式，創建副本;
        for key, value in data_transaction_sequence_Dict_2.items():
            if isinstance(value, dict):
                if int(len(value)) <= int(0):
                    del data_transaction_sequence_Dict[key]  # 刪除：data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
        data_transaction_sequence_Dict_2 = None  # 釋放内存;

        return_stepping_Dict["transaction_sequence"] = data_transaction_sequence_Dict

        # 兩次對衝交易求和獲利信息的序列;
        profit_paired_data_transaction_sequence_Dict = {}  # 記錄按規則篩選股票按照擇時規則兩次對衝交易獲利信息的序列;
        # if isinstance(data_transaction_sequence_Dict, dict) and int(len(data_transaction_sequence_Dict)) > int(0):
        #     for key, value in data_transaction_sequence_Dict.items():
        #         # 做多（Long Position）記錄;
        #         if isinstance(value, dict) and ("Long_Position" in value):
        #             if not (str(key) in profit_paired_data_transaction_sequence_Dict):
        #                 profit_paired_data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
        #             elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)])):
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
        #             # else:
        #             if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"], dict) and int(len(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"])) <= int(0):
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_profit_date_transaction"] = []  # 每兩次對衝交易價格差值利潤，向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_price_amplitude_date_transaction"] = []  # 兩次對衝交易日成交價振幅平方和，向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_volume_turnover_date_transaction"] = []  # 兩次對衝交易日成交量（換手率）向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_date_transaction_between"] = []  # 兩次對衝交易間隔日長，向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"] = []  # 記錄每輪對衝交易的回撤值序列;
        #         # 做空（Short Selling）記錄;
        #         if isinstance(value, dict) and ("Short_Selling" in value):
        #             if not (str(key) in profit_paired_data_transaction_sequence_Dict):
        #                 profit_paired_data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
        #             elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)])):
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
        #             # else:
        #             if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict) and int(len(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"])) <= int(0):
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_profit_date_transaction"] = []  # 每兩次對衝交易價格差值利潤，向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"] = []  # 兩次對衝交易日成交價振幅平方和，向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"] = []  # 兩次對衝交易日成交量（換手率）向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_date_transaction_between"] = []  # 兩次對衝交易間隔日長，向量;
        #                 profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"] = []  # 記錄每輪對衝交易的回撤值序列;
        if isinstance(data_transaction_sequence_Dict, dict) and int(len(data_transaction_sequence_Dict)) > int(0):
            for key, value in data_transaction_sequence_Dict.items():
                # 做多（Long Position）記錄;
                if isinstance(value, dict) and ("Long_Position" in value) and isinstance(value["Long_Position"], dict) and int(len(value["Long_Position"])) > int(0):

                    maximum_dates_transaction_sequence = int(0)  # 各股票裏的最長交易天數;
                    minimum_dates_transaction_sequence = int(0)  # 各股票裏的最短交易天數;
                    dates_transaction_sequence_Array = []
                    # 遍歷字典的鍵:值對;
                    for key_1, value_1 in value["Long_Position"].items():
                        # print("Key: {key_1}, Value: {value_1}")
                        if isinstance(value_1, dict):
                            if ("index" in value_1) and isinstance(value_1["index"], list):
                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                dates_transaction_sequence_Array.append(int(len(value_1["index"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選最長交易天數;
                                if int(len(value_1["index"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["index"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("direction" in value_1) and isinstance(value_1["direction"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["direction"])))
                                if int(len(value_1["direction"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["direction"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("price" in value_1) and isinstance(value_1["price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["price"])))
                                if int(len(value_1["price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("SizePosition" in value_1) and isinstance(value_1["SizePosition"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["SizePosition"])))
                                if int(len(value_1["SizePosition"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["SizePosition"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("focus" in value_1) and isinstance(value_1["focus"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["focus"])))
                                if int(len(value_1["focus"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["focus"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("amplitude" in value_1) and isinstance(value_1["amplitude"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["amplitude"])))
                                if int(len(value_1["amplitude"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["amplitude"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("date_transaction" in value_1) and isinstance(value_1["date_transaction"], list):
                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                dates_transaction_sequence_Array.append(int(len(value_1["date_transaction"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選最長交易天數;
                                if int(len(value_1["date_transaction"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["date_transaction"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("turnover_volume" in value_1) and isinstance(value_1["turnover_volume"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["turnover_volume"])))
                                if int(len(value_1["turnover_volume"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["turnover_volume"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("opening_price" in value_1) and isinstance(value_1["opening_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["opening_price"])))
                                if int(len(value_1["opening_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["opening_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("close_price" in value_1) and isinstance(value_1["close_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["close_price"])))
                                if int(len(value_1["close_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["close_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("low_price" in value_1) and isinstance(value_1["low_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["low_price"])))
                                if int(len(value_1["low_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["low_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("high_price" in value_1) and isinstance(value_1["high_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["high_price"])))
                                if int(len(value_1["high_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["high_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                    # print(maximum_dates_transaction_sequence)
                    if int(len(dates_transaction_sequence_Array)) > int(0):
                        minimum_dates_transaction_sequence_2 = int(min(dates_transaction_sequence_Array))
                        minimum_dates_transaction_sequence *= int(0)
                        minimum_dates_transaction_sequence += int(minimum_dates_transaction_sequence_2)
                    # print(minimum_dates_transaction_sequence)
                    dates_transaction_sequence_Array = None  # 釋放内存;

                    for i in range(int(0), int(minimum_dates_transaction_sequence), int(1)):
                        # 判斷：i 是偶數，還是奇數，符號：% 表示除法取餘數，若餘數爲 0 則表示可以被 2 整除，即爲偶數;
                        if int(int(i) + int(1)) % int(2) == int(0):
                            for key_1, value_1 in value["Long_Position"].items():
                                if ("direction" in value_1) and isinstance(value_1["direction"], list):
                                    if str(value_1["direction"][int(i)]) == "sell" and str(value_1["direction"][int(int(i) - int(1))]) == "buy":
                                        if ("price" in value_1) and isinstance(value_1["price"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["price"])):
                                                if ("SizePosition" in value_1) and isinstance(value_1["SizePosition"], list):
                                                    if int(int(i) + int(1)) <= int(len(value_1["SizePosition"])):
                                                        diff_price_profit = float(float(float(value_1["price"][int(i)]) * float(value_1["SizePosition"][int(i)][0]) * float(value_1["SizePosition"][int(i)][1])) - float(float(value_1["price"][int(int(i) - int(1))]) * float(value_1["SizePosition"][int(int(i) - int(1))][0]) * float(value_1["SizePosition"][int(int(i) - int(1))][1])))
                                                        # diff_price_profit = float(float(float(abs(float(value_1["price"][int(i)]))) * float(value_1["SizePosition"][int(i)][0]) * float(value_1["SizePosition"][int(i)][1])) - float(float(abs(float(value_1["price"][int(int(i) - int(1))]))) * float(value_1["SizePosition"][int(int(i) - int(1))][0]) * float(value_1["SizePosition"][int(int(i) - int(1))][1])))
                                                    else:
                                                        diff_price_profit = float(float(value_1["price"][int(i)]) - float(value_1["price"][int(int(i) - int(1))]))
                                                        # diff_price_profit = float(float(abs(float(value_1["price"][int(i)]))) - float(abs(float(value_1["price"][int(int(i) - int(1))]))))
                                                else:
                                                    diff_price_profit = float(float(value_1["price"][int(i)]) - float(value_1["price"][int(int(i) - int(1))]))
                                                    # diff_price_profit = float(float(abs(float(value_1["price"][int(i)]))) - float(abs(float(value_1["price"][int(int(i) - int(1))]))))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"], dict):
                                                    if not ("Long_Position_profit_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_profit_date_transaction"] = []  # 每兩次對衝交易價格差值利潤，向量;
                                                    if ("Long_Position_profit_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_profit_date_transaction"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_profit_date_transaction"].append(float(diff_price_profit))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                        if ("index" in value_1) and isinstance(value_1["index"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["index"])):
                                                diff_date = int(int(value_1["index"][int(i)]) - int(value_1["index"][int(int(i) - int(1))]))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"], dict):
                                                    if not ("Long_Position_date_transaction_between" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_date_transaction_between"] = []  # 兩次對衝交易間隔日長，向量;
                                                    if ("Long_Position_date_transaction_between" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_date_transaction_between"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_date_transaction_between"].append(int(diff_date))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                        if ("amplitude" in value_1) and isinstance(value_1["amplitude"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["amplitude"])):
                                                synthetic_amplitude = float(numpy.sqrt(float(value_1["amplitude"][int(i)])**2 + float(value_1["amplitude"][int(int(i) - int(1))])**2))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"], dict):
                                                    if not ("Long_Position_price_amplitude_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_price_amplitude_date_transaction"] = []  # 兩次對衝交易日成交價振幅平方和，向量;
                                                    if ("Long_Position_price_amplitude_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_price_amplitude_date_transaction"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_price_amplitude_date_transaction"].append(float(synthetic_amplitude))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                        if ("turnover_volume" in value_1) and isinstance(value_1["turnover_volume"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["turnover_volume"])):
                                                volume_mean = float(float(float(value_1["turnover_volume"][int(i)]) + float(value_1["turnover_volume"][int(int(i) - int(1))])) / int(2))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"], dict):
                                                    if not ("Long_Position_volume_turnover_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_volume_turnover_date_transaction"] = []  # 兩次對衝交易日成交量（換手率）向量;
                                                    if ("Long_Position_volume_turnover_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_volume_turnover_date_transaction"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["Long_Position_volume_turnover_date_transaction"].append(float(volume_mean))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                        if ("drawdown" in value_1) and isinstance(value_1["drawdown"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["drawdown"])):
                                                drawdown_sequence_Array = value_1["drawdown"][int(i)]
                                                # if (value_1["drawdown"][int(i)] is None) or numpy.isnan(value_1["drawdown"][int(i)]):
                                                #     drawdown_sequence_Array = numpy.nan  # numpy.nan  # None
                                                # else:
                                                #     drawdown_sequence_Array = value_1["drawdown"][int(i)]
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Long_Position" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Long_Position" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"], dict):
                                                    if not ("drawdown" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"] = []  # 每輪對衝交易的回撤值序列向量;
                                                    if ("drawdown" in profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]["drawdown"].append(drawdown_sequence_Array)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                                                drawdown_sequence_Array = None  # 釋放内存;

                    maximum_dates_transaction_sequence = None  # 釋放内存;
                    minimum_dates_transaction_sequence = None  # 釋放内存;

                # 做空（Short Selling）記錄;
                if isinstance(value, dict) and ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict) and int(len(value["Short_Selling"])) > int(0):

                    maximum_dates_transaction_sequence = int(0)  # 各股票裏的最長交易天數;
                    minimum_dates_transaction_sequence = int(0)  # 各股票裏的最短交易天數;
                    dates_transaction_sequence_Array = []
                    # 遍歷字典的鍵:值對;
                    for key_1, value_1 in value["Short_Selling"].items():
                        # print("Key: {key_1}, Value: {value_1}")
                        if isinstance(value_1, dict):
                            if ("index" in value_1) and isinstance(value_1["index"], list):
                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                dates_transaction_sequence_Array.append(int(len(value_1["index"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選最長交易天數;
                                if int(len(value_1["index"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["index"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("direction" in value_1) and isinstance(value_1["direction"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["direction"])))
                                if int(len(value_1["direction"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["direction"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("price" in value_1) and isinstance(value_1["price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["price"])))
                                if int(len(value_1["price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("SizePosition" in value_1) and isinstance(value_1["SizePosition"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["SizePosition"])))
                                if int(len(value_1["SizePosition"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["SizePosition"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("focus" in value_1) and isinstance(value_1["focus"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["focus"])))
                                if int(len(value_1["focus"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["focus"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("amplitude" in value_1) and isinstance(value_1["amplitude"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["amplitude"])))
                                if int(len(value_1["amplitude"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["amplitude"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("date_transaction" in value_1) and isinstance(value_1["date_transaction"], list):
                                # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                dates_transaction_sequence_Array.append(int(len(value_1["date_transaction"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
                                # 篩選最長交易天數;
                                if int(len(value_1["date_transaction"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["date_transaction"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("turnover_volume" in value_1) and isinstance(value_1["turnover_volume"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["turnover_volume"])))
                                if int(len(value_1["turnover_volume"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["turnover_volume"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("opening_price" in value_1) and isinstance(value_1["opening_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["opening_price"])))
                                if int(len(value_1["opening_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["opening_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("close_price" in value_1) and isinstance(value_1["close_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["close_price"])))
                                if int(len(value_1["close_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["close_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("low_price" in value_1) and isinstance(value_1["low_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["low_price"])))
                                if int(len(value_1["low_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["low_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                            if ("high_price" in value_1) and isinstance(value_1["high_price"], list):
                                dates_transaction_sequence_Array.append(int(len(value_1["high_price"])))
                                if int(len(value_1["high_price"])) > int(maximum_dates_transaction_sequence):
                                    maximum_dates_transaction_sequence_2 = int(len(value_1["high_price"]))
                                    maximum_dates_transaction_sequence *= int(0)
                                    maximum_dates_transaction_sequence += int(maximum_dates_transaction_sequence_2)
                    # print(maximum_dates_transaction_sequence)
                    if int(len(dates_transaction_sequence_Array)) > int(0):
                        minimum_dates_transaction_sequence_2 = int(min(dates_transaction_sequence_Array))
                        minimum_dates_transaction_sequence *= int(0)
                        minimum_dates_transaction_sequence += int(minimum_dates_transaction_sequence_2)
                    # print(minimum_dates_transaction_sequence)
                    dates_transaction_sequence_Array = None  # 釋放内存;

                    for i in range(int(0), int(minimum_dates_transaction_sequence), int(1)):
                        # 判斷：i 是偶數，還是奇數，符號：% 表示除法取餘數，若餘數爲 0 則表示可以被 2 整除，即爲偶數;
                        if int(int(i) + int(1)) % int(2) == int(0):
                            for key_1, value_1 in value["Short_Selling"].items():
                                if ("direction" in value_1) and isinstance(value_1["direction"], list):
                                    if str(value_1["direction"][int(i)]) == "sell" and str(value_1["direction"][int(int(i) - int(1))]) == "buy":
                                        if ("price" in value_1) and isinstance(value_1["price"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["price"])):
                                                if ("SizePosition" in value_1) and isinstance(value_1["SizePosition"], list):
                                                    if int(int(i) + int(1)) <= int(len(value_1["SizePosition"])):
                                                        diff_price_profit = float(float(float(abs(float(value_1["price"][int(i)]))) * float(value_1["SizePosition"][int(i)][0]) * float(value_1["SizePosition"][int(i)][1])) - float(float(abs(float(value_1["price"][int(int(i) - int(1))]))) * float(value_1["SizePosition"][int(int(i) - int(1))][0]) * float(value_1["SizePosition"][int(int(i) - int(1))][1])))
                                                    else:
                                                        diff_price_profit = float(float(abs(float(value_1["price"][int(i)]))) - float(abs(float(value_1["price"][int(int(i) - int(1))]))))
                                                else:
                                                    diff_price_profit = float(float(abs(float(value_1["price"][int(i)]))) - float(abs(float(value_1["price"][int(int(i) - int(1))]))))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict):
                                                    if not ("Short_Selling_profit_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_profit_date_transaction"] = []  # 每兩次對衝交易價格差值利潤，向量;
                                                    if ("Short_Selling_profit_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_profit_date_transaction"].append(float(diff_price_profit))  # 記錄兩次對衝交易的差值獲利，使用 list.append() 函數在列表末尾追加推入新元素;
                                        if ("index" in value_1) and isinstance(value_1["index"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["index"])):
                                                diff_date = int(int(value_1["index"][int(i)]) - int(value_1["index"][int(int(i) - int(1))]))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict):
                                                    if not ("Short_Selling_date_transaction_between" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_date_transaction_between"] = []  # 兩次對衝交易間隔日長，向量;
                                                    if ("Short_Selling_date_transaction_between" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_date_transaction_between"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_date_transaction_between"].append(int(diff_date))
                                        if ("amplitude" in value_1) and isinstance(value_1["amplitude"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["amplitude"])):
                                                synthetic_amplitude = float(numpy.sqrt(float(value_1["amplitude"][int(i)])**2 + float(value_1["amplitude"][int(int(i) - int(1))])**2))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict):
                                                    if not ("Short_Selling_price_amplitude_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"] = []  # 兩次對衝交易日成交價振幅平方和，向量;
                                                    if ("Short_Selling_price_amplitude_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"].append(float(synthetic_amplitude))
                                        if ("turnover_volume" in value_1) and isinstance(value_1["turnover_volume"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["turnover_volume"])):
                                                volume_mean = float(float(float(value_1["turnover_volume"][int(i)]) + float(value_1["turnover_volume"][int(int(i) - int(1))])) / int(2))
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict):
                                                    if not ("Short_Selling_volume_turnover_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"] = []  # 兩次對衝交易日成交量（換手率）向量;
                                                    if ("Short_Selling_volume_turnover_date_transaction" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"].append(float(volume_mean))
                                        if ("drawdown" in value_1) and isinstance(value_1["drawdown"], list):
                                            if int(int(i) + int(1)) <= int(len(value_1["drawdown"])):
                                                drawdown_sequence_Array = value_1["drawdown"][int(i)]
                                                # if (value_1["drawdown"][int(i)] is None) or numpy.isnan(value_1["drawdown"][int(i)]):
                                                #     drawdown_sequence_Array = numpy.nan  # numpy.nan  # None
                                                # else:
                                                #     drawdown_sequence_Array = value_1["drawdown"][int(i)]
                                                if not (str(key) in profit_paired_data_transaction_sequence_Dict):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)] = {"Short_Selling" : {}}
                                                elif (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and (not ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)])):
                                                    profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"] = {}
                                                # else:
                                                if (str(key) in profit_paired_data_transaction_sequence_Dict) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)], dict) and ("Short_Selling" in profit_paired_data_transaction_sequence_Dict[str(key)]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"], dict):
                                                    if not ("drawdown" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"] = []  # 每輪對衝交易的回撤值序列向量;
                                                    if ("drawdown" in profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]) and isinstance(profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"], list):
                                                        profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]["drawdown"].append(drawdown_sequence_Array)
                                                drawdown_sequence_Array = None;  # 釋放内存;

                    maximum_dates_transaction_sequence = None  # 釋放内存;
                    minimum_dates_transaction_sequence = None  # 釋放内存;

        # 交易信息序列的空值，刪除未曾交易過的股票數據;
        profit_paired_data_transaction_sequence_Dict_2 = {key : value for key, value in profit_paired_data_transaction_sequence_Dict.items()}  # 使用 Python 字典（dict）的推導式，創建副本;
        for key, value in profit_paired_data_transaction_sequence_Dict_2.items():
            if isinstance(value, dict):
                if ("Long_Position" in value) and isinstance(value["Long_Position"], dict) and int(len(value["Long_Position"])) <= int(0):
                    del profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]  # 刪除：profit_paired_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                if ("Long_Position" in value) and isinstance(value["Long_Position"], dict) and int(len(value["Long_Position"])) > int(0):
                    if (("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list) and int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) == int(0)) and (("Long_Position_price_amplitude_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"], list) and int(len(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"])) == int(0)) and (("Long_Position_volume_turnover_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"], list) and int(len(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"])) == int(0)) and (("Long_Position_date_transaction_between" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_date_transaction_between"], list) and int(len(value["Long_Position"]["Long_Position_date_transaction_between"])) == int(0)):
                        del profit_paired_data_transaction_sequence_Dict[str(key)]["Long_Position"]  # 刪除：profit_paired_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict) and int(len(value["Short_Selling"])) <= int(0):
                    del profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]  # 刪除：profit_paired_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict) and int(len(value["Short_Selling"])) > int(0):
                    if (("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list) and int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) == int(0)) and (("Short_Selling_price_amplitude_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"], list) and int(len(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"])) == int(0)) and (("Short_Selling_volume_turnover_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"], list) and int(len(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"])) == int(0)) and (("Short_Selling_date_transaction_between" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_date_transaction_between"], list) and int(len(value["Short_Selling"]["Short_Selling_date_transaction_between"])) == int(0)):
                        del profit_paired_data_transaction_sequence_Dict[str(key)]["Short_Selling"]  # 刪除：profit_paired_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
                # if int(len(value)) <= int(0):
                #     del profit_paired_data_transaction_sequence_Dict[key]  # 刪除：profit_paired_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
        profit_paired_data_transaction_sequence_Dict_2 = None  # 釋放内存;
        profit_paired_data_transaction_sequence_Dict_2 = {key : value for key, value in profit_paired_data_transaction_sequence_Dict.items()}  # 使用 Python 字典（dict）的推導式，創建副本;
        for key, value in profit_paired_data_transaction_sequence_Dict_2.items():
            if isinstance(value, dict):
                if int(len(value)) <= int(0):
                    del profit_paired_data_transaction_sequence_Dict[key]  # 刪除：profit_paired_data_transaction_sequence_Dict 字典（dict）中的鍵值對：key:value ;
        profit_paired_data_transaction_sequence_Dict_2 = None  # 釋放内存;

        # 交易信息序列匯總求和;
        for key, value in profit_paired_data_transaction_sequence_Dict.items():
            if isinstance(value, dict):

                if investment_method == "Long_Position_and_Short_Selling" or investment_method == "Long_Position":
                    if ("Long_Position" in value) and isinstance(value["Long_Position"], dict):

                        # 交易信息序列數據（融資做多 buying long）的匯總求和;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"] = None  # int(0)  # 對衝交易總次數;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] = None  # float(0.0)  # 最大回撤值;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"] = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] = None  # float(0.0)  # 每兩次對衝交易收益纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] = None  # float(0.0)  # 每兩次對衝交易損失纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交價振幅平方和，均值;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交量（換手率）均值;
                        profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"] = None  # float(0.0)  # 兩次對衝交易間隔日長，均值;
                        # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = None  # float(0.0)  # 優化目標變量，做多（Long Position），每兩次對衝交易利潤 × 權重，加權纍加總計;

                        if ("drawdown" in value["Long_Position"]) and isinstance(value["Long_Position"]["drawdown"], list):
                            # print(value["Long_Position"]["drawdown"])
                            if int(len(value["Long_Position"]["drawdown"])) > int(0) and int(max([int(len(value["Long_Position"]["drawdown"][i])) if isinstance(value["Long_Position"]["drawdown"][i], list) else (-math.inf) for i in range(int(0), int(len(value["Long_Position"]["drawdown"])), int(1))])) > int(0):
                                # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] = float(min([float(min(value["Long_Position"]["drawdown"][i])) if (isinstance(value["Long_Position"]["drawdown"][i], list) and int(len(value["Long_Position"]["drawdown"][i])) > int(0)) else (+math.inf) for i in range(int(0), int(len(value["Long_Position"]["drawdown"])), int(1))]))  # 每兩次對衝交易之間的回撤值，纍加總計;
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] = float(min([float(min(value["Long_Position"]["drawdown"][i])) for i in range(int(0), int(len(value["Long_Position"]["drawdown"])), int(1)) if (isinstance(value["Long_Position"]["drawdown"][i], list) and int(len(value["Long_Position"]["drawdown"][i])) > int(0))]))  # 每兩次對衝交易之間的回撤值，纍加總計;

                        if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                            # print(value["Long_Position"]["Long_Position_profit_date_transaction"])
                            profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"] = int(len(value["Long_Position"]["Long_Position_profit_date_transaction"]))

                        if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                            # print(value["Long_Position"]["Long_Position_profit_date_transaction"]);
                            if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"] = float(sum([float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 頻率，纍加總計;

                        if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                            # print(value["Long_Position"]["Long_Position_profit_date_transaction"])
                            if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                                if int(len([float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) if (float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0)) else float(0.0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))])) > int(0):
                                    profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] = float(sum([float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0) else float(0.0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))
                                if int(len([float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) if (float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0)) else float(0.0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))])) > int(0):
                                    profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] = float(sum([float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0) else float(0.0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))

                                # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] = float(0.0)  # 交易規則正利潤纍計;
                                # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] = float(0.0)  # 交易規則負利潤纍計;
                                # for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1)):
                                #     if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] + value["Long_Position"]["Long_Position_profit_date_transaction"][i])
                                #     elif float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] + value["Long_Position"]["Long_Position_profit_date_transaction"][i])
                                #     # else:

                        if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                            # print(value["Long_Position"]["Long_Position_profit_date_transaction"])
                            if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"] = float(int(sum([int(1) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))])) / int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])))
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"] = float(int(sum([int(1) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))])) / int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])))

                                # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"] = int(0)  # float(0.0)  # 交易規則正利潤頻率;
                                # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"] = int(0)  # float(0.0)  # 交易規則負利潤頻率;
                                # for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1)):
                                #     if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"] = int(int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) + int(1))
                                #     elif float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"] = int(int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) + int(1))
                                #     # else:
                                # if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                                #     profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"] = float(int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) / int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])))
                                #     profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"] = float(int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) / int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])))

                        # # y = float(y_Positive_Long_Position * y_P_Positive_Long_Position)  # 每兩次對衝交易正利潤 × 頻率，纍加總計;
                        # # y = float(y_Negative_Long_Position * y_P_Negative_Long_Position)  # 每兩次對衝交易負利潤 × 頻率，纍加總計;
                        # y = float(y_Positive_Long_Position * y_P_Positive_Long_Position) - float(y_Negative_Long_Position * y_P_Negative_Long_Position)

                        if ("Long_Position_price_amplitude_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"], list):
                            # print(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"])
                            if int(len(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] = float(numpy.mean(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"]))  # amplitude_rate;

                        if ("Long_Position_volume_turnover_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"], list):
                            # print(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"])
                            if int(len(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] = float(numpy.mean(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"]))  # turnover_volume; turnover_rate;

                        if ("Long_Position_date_transaction_between" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_date_transaction_between"], list):
                            # print(value["Long_Position"]["Long_Position_date_transaction_between"])
                            if int(len(value["Long_Position"]["Long_Position_date_transaction_between"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"] = float(numpy.mean(value["Long_Position"]["Long_Position_date_transaction_between"]))  # Between two date_transaction;

                        # weight_Long_Position = []
                        # # if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                        # #     # print(value["Long_Position"]["Long_Position_profit_date_transaction"])
                        # #     if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                        # #         if float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) > float(0.0) and float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) > float(0.0):
                        # #             weight_Long_Position = [float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) if (float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0)) else float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]
                        # #         elif float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) > float(0.0) and float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) <= float(0.0):
                        # #             weight_Long_Position = [float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) if (float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0)) else float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]
                        # #         elif float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) <= float(0.0) and float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) > float(0.0):
                        # #             weight_Long_Position = [float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive_probability"]) if (float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0)) else float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative_probability"]) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]
                        # #         else:
                        # #             weight_Long_Position = [float(1.0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]
                        # # if ("Long_Position_date_transaction_between" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_date_transaction_between"], list):
                        # #     # print(value["Long_Position"]["Long_Position_date_transaction_between"])
                        # #     if int(len(value["Long_Position"]["Long_Position_date_transaction_between"])) > int(0):
                        # #         weight_Long_Position = [float(int(1) / int(value["Long_Position"]["Long_Position_date_transaction_between"][i])) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_date_transaction_between"])), int(1))]  # 每兩次對衝交易間隔日長的倒數;
                        # # if ("Long_Position_price_amplitude_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"], list):
                        # #     # print(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"])
                        # #     if int(len(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"])) > int(0):
                        # #         weight_Long_Position = [float(int(1) / float(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"][i])) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_price_amplitude_date_transaction"])), int(1))]  # 兩次對衝交易日成交價振幅平方和的倒數;
                        # # if ("Long_Position_volume_turnover_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"], list):
                        # #     # print(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"])
                        # #     if int(len(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"])) > int(0):
                        # #         weight_Long_Position = [float(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"][i]) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_volume_turnover_date_transaction"])), int(1))]  # 兩次對衝交易日成交量（換手率）均值;

                        # if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                        #     # print(value["Long_Position"]["Long_Position_profit_date_transaction"])
                        #     if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                        #         if int(len(weight_Long_Position)) > int(0):
                        #             profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = float(sum([float(float(weight_Long_Position[i]) * float(value["Long_Position"]["Long_Position_profit_date_transaction"][i])) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                        #             # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = float(0.0)  # 每兩次對衝交易利潤 × 權重，纍加總計;
                        #             # for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1)):
                        #             #     profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"]) + float(weight_Long_Position[i] * value["Long_Position"]["Long_Position_profit_date_transaction"][i])
                        #         elif int(len(weight_Long_Position)) <= int(0):
                        #             profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = float(sum([float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤，加權纍加總計;
                        #             # profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                        #             # for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1)):
                        #             #     profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"]) + float(value["Long_Position"]["Long_Position_profit_date_transaction"][i])
                        #         # else:

                        # # 優化目標變量合入風險因素;
                        # if float(y_P_Negative_Long_Position) == float(0.0):
                        #     y_Long_Position = float(y_Long_Position * y_P_Positive_Long_Position)  # 每次交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;
                        # else:
                        #     y_Long_Position = float(y_Long_Position * float(y_P_Positive_Long_Position / y_P_Negative_Long_Position))  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;

                if investment_method == "Long_Position_and_Short_Selling" or investment_method == "Short_Selling":
                    if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict):

                        # 交易信息序列數據（融券做空 short selling）的匯總求和;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"] = None  # int(0)  # 對衝交易總次數;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] = None  # float(0.0)  # 最大回撤值;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"] = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] = None  # float(0.0)  # 每兩次對衝交易收益纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] = None  # float(0.0)  # 每兩次對衝交易損失纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交價振幅平方和，均值;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] = None  # float(0.0)  # 兩次對衝交易日成交量（換手率）均值;
                        profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"] = None  # float(0.0)  # 兩次對衝交易間隔日長，均值;
                        # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = None  # float(0.0)  # 優化目標變量，做空（Short Selling），每兩次對衝交易利潤 × 權重，加權纍加總計;

                        if ("drawdown" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["drawdown"], list):
                            # print(value["Short_Selling"]["drawdown"])
                            if int(len(value["Short_Selling"]["drawdown"])) > int(0) and int(max([int(len(value["Short_Selling"]["drawdown"][i])) if isinstance(value["Short_Selling"]["drawdown"][i], list) else (-math.inf) for i in range(int(0), int(len(value["Short_Selling"]["drawdown"])), int(1))])) > int(0):
                                # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] = float(min([float(min(value["Short_Selling"]["drawdown"][i])) if (isinstance(value["Short_Selling"]["drawdown"][i], list) and int(len(value["Short_Selling"]["drawdown"][i])) > int(0)) else (+math.inf) for i in range(int(0), int(len(value["Short_Selling"]["drawdown"])), int(1))]))  # 每兩次對衝交易之間的回撤值，纍加總計;
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] = float(min([float(min(value["Short_Selling"]["drawdown"][i])) for i in range(int(0), int(len(value["Short_Selling"]["drawdown"])), int(1)) if (isinstance(value["Short_Selling"]["drawdown"][i], list) and int(len(value["Short_Selling"]["drawdown"][i])) > int(0))]))  # 每兩次對衝交易之間的回撤值，纍加總計;

                        if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                            # print(value["Short_Selling"]["Short_Selling_profit_date_transaction"])
                            profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"] = int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"]))

                        if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                            # print(value["Short_Selling"]["Short_Selling_profit_date_transaction"])
                            if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"] = float(sum([float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 頻率，纍加總計;

                        if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                            # print(value["Short_Selling"]["Short_Selling_profit_date_transaction"])
                            if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                                if int(len([float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) if (float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0)) else float(0.0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))])) > int(0):
                                    profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] = float(sum([float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0) else float(0.0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))
                                if int(len([float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) if (float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0.0)) else float(0.0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))])) > int(0):
                                    profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] = float(sum([float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0.0) else float(0.0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))

                                # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] = float(0.0)  # 交易規則正利潤纍計;
                                # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] = float(0.0)  # 交易規則負利潤纍計;
                                # for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1)):
                                #     if int(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] + value["Short_Selling"]["Short_Selling_profit_date_transaction"][i])
                                #     elif int(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] + value["Short_Selling"]["Short_Selling_profit_date_transaction"][i])
                                #     # else:

                        if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                            # print(value["Short_Selling"]["Short_Selling_profit_date_transaction"])
                            if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"] = float(int(sum([int(1) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))])) / int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])))
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"] = float(int(sum([int(1) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))])) / int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])))

                                # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"] = int(0)  # float(0.0)  # 交易規則正利潤頻率;
                                # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"] = int(0)  # float(0.0)  # 交易規則負利潤頻率;
                                # for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1)):
                                #     if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"] = int(int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) + int(1))
                                #     elif float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0.0):
                                #         profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"] = int(int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) + int(1))
                                #     # else:
                                # if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                                #     profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"] = float(int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) / int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])))
                                #     profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"] = float(int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) / int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])))

                        # # y = float(y_Positive_Short_Selling * y_P_Positive_Short_Selling)  # 每兩次對衝交易正利潤 × 頻率，纍加總計;
                        # # y = float(y_Negative_Short_Selling * y_P_Negative_Short_Selling)  # 每兩次對衝交易負利潤 × 頻率，纍加總計;
                        # y = float(y_Positive_Short_Selling * y_P_Positive_Short_Selling) - float(y_Negative_Short_Selling * y_P_Negative_Short_Selling)

                        if ("Short_Selling_price_amplitude_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"], list):
                            # print(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"])
                            if int(len(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] = float(numpy.mean(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"]))  # amplitude_rate;

                        if ("Short_Selling_volume_turnover_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"], list):
                            # print(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"])
                            if int(len(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] = float(numpy.mean(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"]))  # turnover_volume; turnover_rate;

                        if ("Short_Selling_date_transaction_between" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_date_transaction_between"], list):
                            # print(value["Short_Selling"]["Short_Selling_date_transaction_between"])
                            if int(len(value["Short_Selling"]["Short_Selling_date_transaction_between"])) > int(0):
                                profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"] = float(numpy.mean(value["Short_Selling"]["Short_Selling_date_transaction_between"]))  # Between two date_transaction;

                        # weight_Short_Selling = []
                        # # if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                        # #     # print(value["Short_Selling"]["Short_Selling_profit_date_transaction"])
                        # #     if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                        # #         if float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) > float(0.0) and float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) > float(0.0):
                        # #             weight_Short_Selling = [float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) if (float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0)) else float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]
                        # #         elif float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) > float(0.0) and float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) <= float(0.0):
                        # #             weight_Short_Selling = [float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) if (float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0)) else float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]
                        # #         elif float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) <= float(0.0) and float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) > float(0.0):
                        # #             weight_Short_Selling = [float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive_probability"]) if (float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0)) else float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative_probability"]) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]
                        # #         else:
                        # #             weight_Short_Selling = [float(1.0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]
                        # # if ("Short_Selling_date_transaction_between" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_date_transaction_between"], list):
                        # #     # print(value["Short_Selling"]["Short_Selling_date_transaction_between"])
                        # #     if int(len(value["Short_Selling"]["Short_Selling_date_transaction_between"])) > int(0):
                        # #         weight_Short_Selling = [float(int(1) / int(value["Short_Selling"]["Short_Selling_date_transaction_between"][i])) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_date_transaction_between"])), int(1))]  # 每兩次對衝交易間隔日長的倒數;
                        # # if ("Short_Selling_price_amplitude_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"], list):
                        # #     # print(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"])
                        # #     if int(len(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"])) > int(0):
                        # #         weight_Short_Selling = [float(int(1) / float(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"][i])) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_price_amplitude_date_transaction"])), int(1))]  # 兩次對衝交易日成交價振幅平方和的倒數;
                        # # if ("Short_Selling_volume_turnover_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"], list):
                        # #     # print(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"])
                        # #     if int(len(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"])) > int(0):
                        # #         weight_Short_Selling = [float(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"][i]) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_volume_turnover_date_transaction"])), int(1))]  # 兩次對衝交易日成交量（換手率）均值;

                        # if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                        #     # print(value["Short_Selling"]["Short_Selling_profit_date_transaction"])
                        #     if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                        #         if int(len(weight_Short_Selling)) > int(0):
                        #             profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = float(sum([float(float(weight_Short_Selling[i]) * float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i])) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
                        #             # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = float(0.0)  # 每兩次對衝交易利潤 × 權重，纍加總計;
                        #             # for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1)):
                        #             #     profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"]) + float(weight_Short_Selling[i] * value["Short_Selling"]["Short_Selling_profit_date_transaction"][i])
                        #         elif int(len(weight_Short_Selling)) <= int(0):
                        #             profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = float(sum([float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))  # 每兩次對衝交易利潤，加權纍加總計;
                        #             # profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = float(0.0)  # 每兩次對衝交易利潤，纍加總計;
                        #             # for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1)):
                        #             #     profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"]) + float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i])
                        #         # else:

                        # # 優化目標變量合入風險因素;
                        # if float(y_P_Negative_Short_Selling) == float(0.0):
                        #     y_Short_Selling = float(y_Short_Selling * y_P_Positive_Short_Selling)  # 每次交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;
                        # else:
                        #     y_Short_Selling = float(y_Short_Selling * float(y_P_Positive_Short_Selling / y_P_Negative_Short_Selling))  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計，然後再 × 正利潤概率，叠加不確定風險效果;

                if investment_method == "Long_Position_and_Short_Selling":
                    if (("Long_Position" in value) and isinstance(value["Long_Position"], dict)) and (("Short_Selling" in value) and isinstance(value["Short_Selling"], dict)):
                        # 交易信息序列數據（融資做多 buying long）+（融券做空 short selling）的匯總求和;
                        profit_paired_data_transaction_sequence_Dict[key]["number_total"] = None  # int(int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"]) + int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"]))  # 兩次對衝交易總輪數，纍加總計;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["number_total"] = float(sum([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"]]))  # 兩次對衝交易總輪數，纍加總計;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"])):
                            profit_paired_data_transaction_sequence_Dict[key]["number_total"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["number_total"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["number_total"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = None  # float(min([float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"]), float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"])]))  # 每兩次對衝交易之間的回撤值，纍加總計;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(min([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"]]))  # 兩次對衝交易之間的最大回撤值，取極值統計;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"])):
                            profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = None  # float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"]))  # 每兩次對衝交易利潤，纍加總計;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = float(sum([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"]]))  # 每兩次對衝交易利潤，纍加總計;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = None  # float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"]))  # 每兩次對衝交易收益纍加總計;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = float(sum([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"]]))  # 每兩次對衝交易收益纍加總計;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = None  # float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"]))  # 每兩次對衝交易損失纍加總計;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = float(sum([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"]]))  # 每兩次對衝交易損失纍加總計;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                        if ((("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list)) and int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0)) or ((("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list)) and int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0)):
                            y_Positive_count_Long_Position = int(0)
                            y_Negative_count_Long_Position = int(0)
                            y_Positive_count_Short_Selling = int(0)
                            y_Negative_count_Short_Selling = int(0)
                            if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                                if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                                    y_Positive_count_Long_Position = int(sum([int(1) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))
                                    y_Negative_count_Long_Position = int(sum([int(1) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))
                            if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                                if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                                    y_Positive_count_Short_Selling = int(sum([int(1) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))
                                    y_Negative_count_Short_Selling = int(sum([int(1) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = float(int(int(y_Positive_count_Long_Position) + int(y_Positive_count_Short_Selling)) / int(int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) + int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"]))))
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = float(int(int(y_Negative_count_Long_Position) + int(y_Negative_count_Short_Selling)) / int(int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) + int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"]))))
                        profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = None  # float(float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])) / int(2))  # 兩次對衝交易日成交價振幅平方和，均值;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(numpy.mean([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"]]))  # 兩次對衝交易日成交價振幅平方和，均值;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = None  # float(float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])) / int(2))  # 兩次對衝交易日成交量（換手率）均值;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(numpy.mean([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"]]))  # 兩次對衝交易日成交量（換手率）均值;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = None
                        profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = None  # float(float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"])) / int(2))  # 兩次對衝交易間隔日長，均值，Between two date_transaction;
                        if (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"]))) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(numpy.mean([profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"], profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"]]))  # 兩次對衝交易總輪數，纍加總計;
                        elif (not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"]))) and ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"])
                        elif ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"])) and (not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"]))):
                            profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"])
                        else:
                            profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = None
                        # profit_paired_data_transaction_sequence_Dict[key]["y"] = float(float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"]) + float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"]))  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                    if (("Long_Position" in value) and isinstance(value["Long_Position"], dict)) and (not (("Short_Selling" in value) and isinstance(value["Short_Selling"], dict))):
                        # 交易信息序列數據（融資做多 buying long）+（融券做空 short selling）的匯總求和;
                        profit_paired_data_transaction_sequence_Dict[key]["number_total"] = None  # int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"])  # 兩次對衝交易總輪數，纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"])):
                            profit_paired_data_transaction_sequence_Dict[key]["number_total"] = int(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_number_total"])  # 兩次對衝交易總輪數，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"])  # 每兩次對衝交易之間的回撤值，纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"])):
                            profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["maximum_drawdown"])  # 每兩次對衝交易之間的回撤值，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"])  # 每兩次對衝交易利潤，纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_total"])  # 每兩次對衝交易利潤，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                        if ((("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list)) and int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0)) or ((("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list)) and int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0)):
                            y_Positive_count_Long_Position = int(0)
                            y_Negative_count_Long_Position = int(0)
                            y_Positive_count_Short_Selling = int(0)
                            y_Negative_count_Short_Selling = int(0)
                            if ("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list):
                                if int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0):
                                    y_Positive_count_Long_Position = int(sum([int(1) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))
                                    y_Negative_count_Long_Position = int(sum([int(1) if float(value["Long_Position"]["Long_Position_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])), int(1))]))
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = float(int(int(y_Positive_count_Long_Position) + int(y_Positive_count_Short_Selling)) / int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])))
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = float(int(int(y_Negative_count_Long_Position) + int(y_Negative_count_Short_Selling)) / int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])))
                        profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])
                        profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])
                        profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值，Between two date_transaction;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值，Between two date_transaction;
                        # profit_paired_data_transaction_sequence_Dict[key]["y"] = float(profit_paired_data_transaction_sequence_Dict[key]["Long_Position"]["y_Long_Position"])  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;
                    if (not (("Long_Position" in value) and isinstance(value["Long_Position"], dict))) and (("Short_Selling" in value) and isinstance(value["Short_Selling"], dict)):
                        # 交易信息序列數據（融資做多 buying long）+（融券做空 short selling）的匯總求和;
                        profit_paired_data_transaction_sequence_Dict[key]["number_total"] = None  # int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"])  # 兩次對衝交易總輪數，纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"])):
                            profit_paired_data_transaction_sequence_Dict[key]["number_total"] = int(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_number_total"])  # 兩次對衝交易總輪數，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"])  # 每兩次對衝交易之間的回撤值，纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"])):
                            profit_paired_data_transaction_sequence_Dict[key]["maximum_drawdown"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["maximum_drawdown"])  # 每兩次對衝交易之間的回撤值，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤，纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_total"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤，纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"])):
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = None  # float(0.0)  # 每兩次對衝交易正利潤概率;
                        profit_paired_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = None  # float(0.0)  # 每兩次對衝交易負利潤概率;
                        if ((("Long_Position_profit_date_transaction" in value["Long_Position"]) and isinstance(value["Long_Position"]["Long_Position_profit_date_transaction"], list)) and int(len(value["Long_Position"]["Long_Position_profit_date_transaction"])) > int(0)) or ((("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list)) and int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0)):
                            y_Positive_count_Long_Position = int(0)
                            y_Negative_count_Long_Position = int(0)
                            y_Positive_count_Short_Selling = int(0)
                            y_Negative_count_Short_Selling = int(0)
                            if ("Short_Selling_profit_date_transaction" in value["Short_Selling"]) and isinstance(value["Short_Selling"]["Short_Selling_profit_date_transaction"], list):
                                if int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])) > int(0):
                                    y_Positive_count_Short_Selling = int(sum([int(1) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) > float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))
                                    y_Negative_count_Short_Selling = int(sum([int(1) if float(value["Short_Selling"]["Short_Selling_profit_date_transaction"][i]) < float(0.0) else int(0) for i in range(int(0), int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])), int(1))]))
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Positive_probability"] = float(int(int(y_Positive_count_Long_Position) + int(y_Positive_count_Short_Selling)) / int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])))
                            profit_paired_data_transaction_sequence_Dict[key]["profit_Negative_probability"] = float(int(int(y_Negative_count_Long_Position) + int(y_Negative_count_Short_Selling)) / int(len(value["Short_Selling"]["Short_Selling_profit_date_transaction"])))
                        profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，均值;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_price_amplitude_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，均值;
                        profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_volume_turnover_date_transaction"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
                        profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = None  # float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值，Between two date_transaction;
                        if not ((profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"])):
                            profit_paired_data_transaction_sequence_Dict[key]["average_date_transaction_between"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值，Between two date_transaction;
                        # profit_paired_data_transaction_sequence_Dict[key]["y"] = float(profit_paired_data_transaction_sequence_Dict[key]["Short_Selling"]["y_Short_Selling"])  # 優化目標變量，每兩次對衝交易利潤 × 權重，加權纍加總計;

        return_stepping_Dict["profit_paired_transaction"] = profit_paired_data_transaction_sequence_Dict

        # 交易選股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
        Array_PickStock_transaction_Long_Position = []  # 做多交易選股票的總隻數;
        Array_PickStock_transaction_Short_Selling = []  # 做空交易選股票的總隻數;
        for key, value in profit_paired_data_transaction_sequence_Dict.items():
            if isinstance(value, dict):
                if ("Long_Position" in value) and isinstance(value["Long_Position"], dict) and int(len(value["Long_Position"])) > int(0):
                    if not (str(key) in Array_PickStock_transaction_Long_Position):
                        Array_PickStock_transaction_Long_Position.append(str(key))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict) and int(len(value["Short_Selling"])) > int(0):
                    if not (str(key) in Array_PickStock_transaction_Short_Selling):
                        Array_PickStock_transaction_Short_Selling.append(str(key))  # 使用 list.append() 函數在列表末尾追加推入新元素;
        Array_PickStock_transaction = []  # 選股票的總隻數;

        for i in range(int(0), int(len(Array_PickStock_transaction_Long_Position)), int(1)):
            if not (str(Array_PickStock_transaction_Long_Position[i]) in Array_PickStock_transaction):
                Array_PickStock_transaction.append(str(Array_PickStock_transaction_Long_Position[i]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
        for i in range(int(0), int(len(Array_PickStock_transaction_Short_Selling)), int(1)):
            if not (str(Array_PickStock_transaction_Short_Selling[i]) in Array_PickStock_transaction):
                Array_PickStock_transaction.append(str(Array_PickStock_transaction_Short_Selling[i]))

        return_stepping_Dict["PickStock"] = Array_PickStock_transaction
        return_stepping_Dict["PickStock_Long_Position"] = Array_PickStock_transaction_Long_Position
        return_stepping_Dict["PickStock_Short_Selling"] = Array_PickStock_transaction_Short_Selling
        return_stepping_Dict["number_PickStock"] = int(len(Array_PickStock_transaction))
        return_stepping_Dict["number_PickStock_Long_Position"] = int(len(Array_PickStock_transaction_Long_Position))
        return_stepping_Dict["number_PickStock_Short_Selling"] = int(len(Array_PickStock_transaction_Short_Selling))

        # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
        # 做多（Long Position）記錄;
        number_total_Long_Position = None  # int(0)  # 兩次對衝交易的總輪數，纍加總計;
        y_total_Long_Position = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
        y_maximum_drawdown_Long_Position = None  # float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
        y_total_Long_Position_Array = []
        y_maximum_drawdown_Long_Position_Array = []
        y_Positive_Long_Position = None  # float(0.0)  # 交易規則正利潤纍計;
        y_Positive_Long_Position_Array = []
        y_Negative_Long_Position = None  # float(0.0)  # 交易規則負利潤纍計;
        y_Negative_Long_Position_Array = []
        y_P_Positive_Long_Position = None  # float(0.0)  # 交易規則正利潤出現頻率;
        y_P_Positive_Long_Position_Array = []
        y_P_Negative_Long_Position = None  # float(0.0)  # 交易規則負利潤出現頻率;
        y_P_Negative_Long_Position_Array = []
        y_amplitude_Long_Position = None  # float(0.0)  # amplitude_rate;
        y_amplitude_Long_Position_Array = []
        y_turnover_Long_Position = None  # float(0.0)  # turnover_volume; turnover_rate;
        y_turnover_Long_Position_Array = []
        y_date_transaction_between_Long_Position = None  # float(0.0)  # Between two date_transaction;
        y_date_transaction_between_Long_Position_Array = []
        y_Long_Position_profit = None  # float(0.0)  # 優化目標變量，利潤 × 權重;
        y_Long_Position_loss = None  # float(0.0)  # 優化目標變量，最大回撤 × 權重;
        y_Long_Position_profit_Array = []
        y_Long_Position_loss_Array = []
        # 做空（Short Selling）記錄;
        number_total_Short_Selling = None  # int(0)  # 兩次對衝交易的總輪數，纍加總計;
        y_total_Short_Selling = None  # float(0.0)  # 每兩次對衝交易利潤，纍加總計;
        y_maximum_drawdown_Short_Selling = None  # float(0.0)  # 兩次對衝交易之間的最大回撤值，取極值統計;
        y_total_Short_Selling_Array = []
        y_maximum_drawdown_Short_Selling_Array = []
        y_Positive_Short_Selling = None  # float(0.0)  # 交易規則正利潤纍計;
        y_Positive_Short_Selling_Array = []
        y_Negative_Short_Selling = None  # float(0.0)  # 交易規則負利潤纍計;
        y_Negative_Short_Selling_Array = []
        y_P_Positive_Short_Selling = None  # float(0.0)  # 交易規則正利潤出現頻率;
        y_P_Positive_Short_Selling_Array = []
        y_P_Negative_Short_Selling = None  # float(0.0)  # 交易規則負利潤出現頻率;
        y_P_Negative_Short_Selling_Array = []
        y_amplitude_Short_Selling = None  # float(0.0)  # amplitude_rate;
        y_amplitude_Short_Selling_Array = []
        y_turnover_Short_Selling = None  # float(0.0)  # turnover_volume; turnover_rate;
        y_turnover_Short_Selling_Array = []
        y_date_transaction_between_Short_Selling = None  # float(0.0)  # Between two date_transaction;
        y_date_transaction_between_Short_Selling_Array = []
        y_Short_Selling_profit = None  # float(0.0)  # 優化目標變量，利潤 × 權重;
        y_Short_Selling_loss = None  # float(0.0)  # 優化目標變量，最大回撤 × 權重;
        y_Short_Selling_profit_Array = []
        y_Short_Selling_loss_Array = []
        # 做多（Long Position）記錄 + 做空（Short Selling）記錄，纍計求和;
        number_total = None  # int(0)  # 兩次對衝交易的總輪數，纍加總計;
        y_total = None  # float(0.0)  # float(y_total_Long_Position + y_total_Short_Selling)  # 每兩次對衝交易利潤，纍加總計;
        y_maximum_drawdown = None  # float(0.0)
        y_total_Array = []
        y_maximum_drawdown_Array = []
        y_Positive = None  # float(0.0)  # float(y_Positive_Long_Position + y_Positive_Short_Selling)  # 交易規則正利潤纍計;
        y_Positive_Array = []
        y_Negative = None  # float(0.0)  # float(y_Negative_Long_Position + y_Negative_Short_Selling)  # 交易規則負利潤纍計;
        y_Negative_Array = []
        y_P_Positive = None  # float(0.0)  # 交易規則正利潤出現頻率;
        y_P_Positive_Array = []
        y_P_Negative = None  # float(0.0)  # 交易規則負利潤出現頻率;
        y_P_Negative_Array = []
        # if int(len(y_A_Long_Position)) > int(0) or int(len(y_A_Short_Selling)) > int(0):
        #     y_Positive_count_Long_Position = int(0)
        #     y_Negative_count_Long_Position = int(0)
        #     y_Positive_count_Short_Selling = int(0)
        #     y_Negative_count_Short_Selling = int(0)
        #     if int(len(y_A_Long_Position)) > int(0):
        #         y_Positive_count_Long_Position = int(sum([int(1) if float(y_A_Long_Position[i]) > float(0.0) else int(0) for i in range(int(0), int(len(y_A_Long_Position)), int(1))]))
        #         y_Negative_count_Long_Position = int(sum([int(1) if float(y_A_Long_Position[i]) < float(0.0) else int(0) for i in range(int(0), int(len(y_A_Long_Position)), int(1))]))
        #     if int(len(y_A_Short_Selling)) > int(0):
        #         y_Positive_count_Short_Selling = int(sum([int(1) if float(y_A_Short_Selling[i]) > float(0.0) else int(0) for i in range(int(0), int(len(y_A_Short_Selling)), int(1))]))
        #         y_Negative_count_Short_Selling = int(sum([int(1) if float(y_A_Short_Selling[i]) < float(0.0) else int(0) for i in range(int(0), int(len(y_A_Short_Selling)), int(1))]))
        #     y_P_Positive = float(int(int(y_Positive_count_Long_Position) + int(y_Positive_count_Short_Selling)) / int(int(len(y_A_Long_Position)) + int(len(y_A_Short_Selling))))
        #     y_P_Negative = float(int(int(y_Negative_count_Long_Position) + int(y_Negative_count_Short_Selling)) / int(int(len(y_A_Long_Position)) + int(len(y_A_Short_Selling))))
        y_amplitude = None  # float(0.0)  # float(float(y_amplitude_Long_Position + y_amplitude_Short_Selling) / int(2))  # amplitude_rate;
        y_amplitude_Array = []
        y_turnover = None  # float(0.0)  # float(float(y_turnover_Long_Position + y_turnover_Short_Selling) / int(2))  # turnover_volume; turnover_rate;
        y_turnover_Array = []
        y_date_transaction_between = None  # float(0.0)  # float(float(y_date_transaction_between_Long_Position + y_date_transaction_between_Short_Selling) / int(2))  # Between two date_transaction;
        y_date_transaction_between_Array = []
        y_profit = None  # float(0.0)  # float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
        y_loss = None  # float(0.0)  # float(min([float(y_Long_Position_loss), float(y_Short_Selling_loss)]))  # 優化目標變量，最大回撤 × 權重;
        y_profit_Array = []
        y_loss_Array = []
        for key, value in profit_paired_data_transaction_sequence_Dict.items():
            if isinstance(value, dict):

                # 做多（Long Position）記錄;
                if ("Long_Position" in value) and isinstance(value["Long_Position"], dict):
                    if "Long_Position_number_total" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_number_total"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_number_total"])):
                            # 取總和;
                            number_total_Long_Position_2 = int(int(number_total_Long_Position) + int(value["Long_Position"]["Long_Position_number_total"]))
                            # global number_total_Long_Position *= int(0)
                            number_total_Long_Position *= int(0)
                            # global number_total_Long_Position += int(number_total_Long_Position_2)
                            number_total_Long_Position += int(number_total_Long_Position_2)
                    if "Long_Position_profit_total" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_profit_total"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_profit_total"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    y_total_Long_Position_2 = float(float(value["Long_Position"]["Long_Position_profit_total"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                else:
                                    y_total_Long_Position_2 = float(value["Long_Position"]["Long_Position_profit_total"])
                            else:
                                y_total_Long_Position_2 = float(value["Long_Position"]["Long_Position_profit_total"])
                            # 取總和;
                            # y_total_Long_Position_2 = float(float(y_total_Long_Position) + float(value["Long_Position"]["Long_Position_profit_total"]))
                            # y_total_Long_Position *= float(0.0)
                            # y_total_Long_Position += float(y_total_Long_Position_2)
                            y_total_Long_Position_Array.append(y_total_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "maximum_drawdown_Long_Position" in value["Long_Position"]:
                        if not ((value["Long_Position"]["maximum_drawdown_Long_Position"] is None) or numpy.isnan(value["Long_Position"]["maximum_drawdown_Long_Position"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    y_maximum_drawdown_Long_Position_2 = float(float(value["Long_Position"]["maximum_drawdown_Long_Position"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                else:
                                    y_maximum_drawdown_Long_Position_2 = float(value["Long_Position"]["maximum_drawdown_Long_Position"])
                            else:
                                y_maximum_drawdown_Long_Position_2 = float(value["Long_Position"]["maximum_drawdown_Long_Position"])
                            # # 取均值;
                            # y_maximum_drawdown_Long_Position_2 = float(float(float(y_maximum_drawdown_Long_Position) + float(value["Long_Position"]["maximum_drawdown_Long_Position"])) / int(2))
                            # # 取最大值;
                            # y_maximum_drawdown_Long_Position_2 = float(max([float(y_maximum_drawdown_Long_Position), float(value["Long_Position"]["maximum_drawdown_Long_Position"])]))
                            # # 取最小值;
                            # y_maximum_drawdown_Long_Position_2 = float(min([float(y_maximum_drawdown_Long_Position), float(value["Long_Position"]["maximum_drawdown_Long_Position"])]))
                            # y_maximum_drawdown_Long_Position *= float(0.0)
                            # y_maximum_drawdown_Long_Position += float(y_maximum_drawdown_Long_Position_2)
                            y_maximum_drawdown_Long_Position_Array.append(y_maximum_drawdown_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_profit_Positive" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_profit_Positive"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_profit_Positive"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    y_Positive_Long_Position_2 = float(float(value["Long_Position"]["Long_Position_profit_Positive"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                else:
                                    y_Positive_Long_Position_2 = float(value["Long_Position"]["Long_Position_profit_Positive"])
                            else:
                                y_Positive_Long_Position_2 = float(value["Long_Position"]["Long_Position_profit_Positive"])
                            # 取總和;
                            # y_Positive_Long_Position_2 = float(float(y_Positive_Long_Position) + float(value["Long_Position"]["Long_Position_profit_Positive"]))
                            # y_Positive_Long_Position *= float(0.0)
                            # y_Positive_Long_Position += float(y_Positive_Long_Position_2)
                            y_Positive_Long_Position_Array.append(y_Positive_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_profit_Negative" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_profit_Negative"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_profit_Negative"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    y_Negative_Long_Position_2 = float(float(value["Long_Position"]["Long_Position_profit_Negative"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                else:
                                    y_Negative_Long_Position_2 = float(value["Long_Position"]["Long_Position_profit_Negative"])
                            else:
                                y_Negative_Long_Position_2 = float(value["Long_Position"]["Long_Position_profit_Negative"])
                            # 取總和;
                            # y_Negative_Long_Position_2 = float(float(y_Negative_Long_Position) + float(value["Long_Position"]["Long_Position_profit_Negative"]))
                            # y_Negative_Long_Position *= float(0.0)
                            # y_Negative_Long_Position += float(y_Negative_Long_Position_2)
                            y_Negative_Long_Position_Array.append(y_Negative_Long_Position_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_profit_Positive_probability" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_profit_Positive_probability"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_profit_Positive_probability"])):
                            # 取均值;
                            # y_P_Positive_Long_Position_2 = float(float(float(y_P_Positive_Long_Position) + float(value["Long_Position"]["Long_Position_profit_Positive_probability"])) / int(2))
                            # # 取最大值;
                            # y_P_Positive_Long_Position_2 = float(max([float(y_P_Positive_Long_Position), float(value["Long_Position"]["Long_Position_profit_Positive_probability"])]))
                            # # 取最小值;
                            # y_P_Positive_Long_Position_2 = float(min([float(y_P_Positive_Long_Position), float(value["Long_Position"]["Long_Position_profit_Positive_probability"])]))
                            # y_P_Positive_Long_Position *= float(0.0)
                            # y_P_Positive_Long_Position += float(y_P_Positive_Long_Position_2)
                            y_P_Positive_Long_Position_Array.append(float(value["Long_Position"]["Long_Position_profit_Positive_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_profit_Negative_probability" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_profit_Negative_probability"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_profit_Negative_probability"])):
                            # # 取均值;
                            # y_P_Negative_Long_Position_2 = float(float(float(y_P_Negative_Long_Position) + float(value["Long_Position"]["Long_Position_profit_Negative_probability"])) / int(2))
                            # 取最大值;
                            # y_P_Negative_Long_Position_2 = float(max([float(y_P_Negative_Long_Position), float(value["Long_Position"]["Long_Position_profit_Negative_probability"])]))
                            # # 取最小值;
                            # y_P_Negative_Long_Position_2 = float(min([float(y_P_Negative_Long_Position), float(value["Long_Position"]["Long_Position_profit_Negative_probability"])]))
                            # y_P_Negative_Long_Position *= float(0.0)
                            # y_P_Negative_Long_Position += float(y_P_Negative_Long_Position_2)
                            y_P_Negative_Long_Position_Array.append(float(value["Long_Position"]["Long_Position_profit_Negative_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_average_price_amplitude_date_transaction" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])):
                            # # 取均值;
                            # y_amplitude_Long_Position_2 = float(float(float(y_amplitude_Long_Position) + float(value["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])) / int(2))
                            # 取最大值;
                            # y_amplitude_Long_Position_2 = float(max([float(y_amplitude_Long_Position), float(value["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])]))
                            # # 取最小值;
                            # y_amplitude_Long_Position_2 = float(min([float(y_amplitude_Long_Position), float(value["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"])]))
                            # y_amplitude_Long_Position *= float(0.0)
                            # y_amplitude_Long_Position += float(y_amplitude_Long_Position_2)
                            y_amplitude_Long_Position_Array.append(float(value["Long_Position"]["Long_Position_average_price_amplitude_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_average_volume_turnover_date_transaction" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])):
                            # # 取均值;
                            # y_turnover_Long_Position_2 = float(float(float(y_turnover_Long_Position) + float(value["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])) / int(2))
                            # # 取最大值;
                            # y_turnover_Long_Position_2 = float(max([float(y_turnover_Long_Position), float(value["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])]))
                            # 取最小值;
                            # y_turnover_Long_Position_2 = float(min([float(y_turnover_Long_Position), float(value["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"])]))
                            # y_turnover_Long_Position *= float(0.0)
                            # y_turnover_Long_Position += float(y_turnover_Long_Position_2)
                            y_turnover_Long_Position_Array.append(float(value["Long_Position"]["Long_Position_average_volume_turnover_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Long_Position_average_date_transaction_between" in value["Long_Position"]:
                        if not ((value["Long_Position"]["Long_Position_average_date_transaction_between"] is None) or numpy.isnan(value["Long_Position"]["Long_Position_average_date_transaction_between"])):
                            # # 取均值;
                            # y_date_transaction_between_Long_Position_2 = float(float(float(y_date_transaction_between_Long_Position) + float(value["Long_Position"]["Long_Position_average_date_transaction_between"])) / int(2))
                            # 取最大值;
                            # y_date_transaction_between_Long_Position_2 = float(max([float(y_date_transaction_between_Long_Position), float(value["Long_Position"]["Long_Position_average_date_transaction_between"])]))
                            # # 取最小值;
                            # y_date_transaction_between_Long_Position_2 = float(min([float(y_date_transaction_between_Long_Position), float(value["Long_Position"]["Long_Position_average_date_transaction_between"])]))
                            # y_date_transaction_between_Long_Position *= float(0.0)
                            # y_date_transaction_between_Long_Position += float(y_date_transaction_between_Long_Position_2)
                            y_date_transaction_between_Long_Position_Array.append(float(value["Long_Position"]["Long_Position_average_date_transaction_between"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "y_Long_Position_profit" in value["Long_Position"]:
                        if not ((value["Long_Position"]["y_Long_Position_profit"] is None) or numpy.isnan(value["Long_Position"]["y_Long_Position_profit"])):
                            # 取總和;
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    y_Long_Position_profit_2 = float(float(value["Long_Position"]["y_Long_Position_profit"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                else:
                                    y_Long_Position_profit_2 = float(value["Long_Position"]["y_Long_Position_profit"])
                            else:
                                y_Long_Position_profit_2 = float(value["Long_Position"]["y_Long_Position_profit"])
                            y_Long_Position_profit_Array.append(y_Long_Position_profit_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "y_Long_Position_loss" in value["Long_Position"]:
                        if not ((value["Long_Position"]["y_Long_Position_loss"] is None) or numpy.isnan(value["Long_Position"]["y_Long_Position_loss"])):
                            # # 取均值;
                            # y_Long_Position_loss_2 = float(float(float(y_Long_Position_loss) + float(value["Long_Position"]["y_Long_Position_loss"])) / int(2))
                            # # 取最大值;
                            # y_Long_Position_loss_2 = float(max([float(y_Long_Position_loss), float(value["Long_Position"]["y_Long_Position_loss"])]))
                            # # 取最小值;
                            # y_Long_Position_loss_2 = float(min([float(y_Long_Position_loss), float(value["Long_Position"]["y_Long_Position_loss"])]))
                            # y_Long_Position_loss *= float(0.0)
                            # y_Long_Position_loss += float(y_Long_Position_loss_2)
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]):
                                    y_Long_Position_loss_2 = float(float(value["Long_Position"]["y_Long_Position_loss"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                                else:
                                    y_Long_Position_loss_2 = float(value["Long_Position"]["y_Long_Position_loss"])
                            else:
                                y_Long_Position_loss_2 = float(value["Long_Position"]["y_Long_Position_loss"])
                            y_Long_Position_loss_Array.append(y_Long_Position_loss_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                # 做空（Short Selling）記錄;
                if ("Short_Selling" in value) and isinstance(value["Short_Selling"], dict):
                    if "Short_Selling_number_total" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_number_total"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_number_total"])):
                            # 取總和;
                            number_total_Short_Selling_2 = int(int(number_total_Short_Selling) + int(value["Short_Selling"]["Short_Selling_number_total"]))
                            # global number_total_Short_Selling *= int(0)
                            number_total_Short_Selling *= int(0)
                            # global number_total_Short_Selling += int(number_total_Short_Selling_2)
                            number_total_Short_Selling += int(number_total_Short_Selling_2)
                    if "Short_Selling_profit_total" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_profit_total"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_profit_total"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    y_total_Short_Selling_2 = float(float(value["Short_Selling"]["Short_Selling_profit_total"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                else:
                                    y_total_Short_Selling_2 = float(value["Short_Selling"]["Short_Selling_profit_total"])
                            else:
                                y_total_Short_Selling_2 = float(value["Short_Selling"]["Short_Selling_profit_total"])
                            # 取總和;
                            # y_total_Short_Selling_2 = float(float(y_total_Short_Selling) + float(value["Short_Selling"]["Short_Selling_profit_total"]))
                            # y_total_Short_Selling *= float(0.0)
                            # y_total_Short_Selling += float(y_total_Short_Selling_2)
                            y_total_Short_Selling_Array.append(y_total_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "maximum_drawdown_Short_Selling" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["maximum_drawdown_Short_Selling"] is None) or numpy.isnan(value["Short_Selling"]["maximum_drawdown_Short_Selling"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    y_maximum_drawdown_Short_Selling_2 = float(float(value["Short_Selling"]["maximum_drawdown_Short_Selling"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                else:
                                    y_maximum_drawdown_Short_Selling_2 = float(value["Short_Selling"]["maximum_drawdown_Short_Selling"])
                            else:
                                y_maximum_drawdown_Short_Selling_2 = float(value["Short_Selling"]["maximum_drawdown_Short_Selling"])
                            # # 取均值;
                            # y_maximum_drawdown_Short_Selling_2 = float(float(float(y_maximum_drawdown_Short_Selling) + float(value["Short_Selling"]["maximum_drawdown_Short_Selling"])) / int(2))
                            # # 取最大值;
                            # y_maximum_drawdown_Short_Selling_2 = float(max([float(y_maximum_drawdown_Short_Selling), float(value["Short_Selling"]["maximum_drawdown_Short_Selling"])]))
                            # # 取最小值;
                            # y_maximum_drawdown_Short_Selling_2 = float(min([float(y_maximum_drawdown_Short_Selling), float(value["Short_Selling"]["maximum_drawdown_Short_Selling"])]))
                            # y_maximum_drawdown_Short_Selling *= float(0.0)
                            # y_maximum_drawdown_Short_Selling += float(y_maximum_drawdown_Short_Selling_2)
                            y_maximum_drawdown_Short_Selling_Array.append(y_maximum_drawdown_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_profit_Positive" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_profit_Positive"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_profit_Positive"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    y_Positive_Short_Selling_2 = float(float(value["Short_Selling"]["Short_Selling_profit_Positive"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                else:
                                    y_Positive_Short_Selling_2 = float(value["Short_Selling"]["Short_Selling_profit_Positive"])
                            else:
                                y_Positive_Short_Selling_2 = float(value["Short_Selling"]["Short_Selling_profit_Positive"])
                            # 取總和;
                            # y_Positive_Short_Selling_2 = float(float(y_Positive_Short_Selling) + float(value["Short_Selling"]["Short_Selling_profit_Positive"]))
                            # y_Positive_Short_Selling *= float(0.0)
                            # y_Positive_Short_Selling += float(y_Positive_Short_Selling_2)
                            y_Positive_Short_Selling_Array.append(y_Positive_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_profit_Negative" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_profit_Negative"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_profit_Negative"])):
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    y_Negative_Short_Selling_2 = float(float(value["Short_Selling"]["Short_Selling_profit_Negative"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                else:
                                    y_Negative_Short_Selling_2 = float(value["Short_Selling"]["Short_Selling_profit_Negative"])
                            else:
                                y_Negative_Short_Selling_2 = float(value["Short_Selling"]["Short_Selling_profit_Negative"])
                            # 取總和;
                            # y_Negative_Short_Selling_2 = float(float(y_Negative_Short_Selling) + float(value["Short_Selling"]["Short_Selling_profit_Negative"]))
                            # y_Negative_Short_Selling *= float(0.0)
                            # y_Negative_Short_Selling += float(y_Negative_Short_Selling_2)
                            y_Negative_Short_Selling_Array.append(y_Negative_Short_Selling_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_profit_Positive_probability" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_profit_Positive_probability"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_profit_Positive_probability"])):
                            # 取均值;
                            # y_P_Positive_Short_Selling_2 = float(float(float(y_P_Positive_Short_Selling) + float(value["Short_Selling"]["Short_Selling_profit_Positive_probability"])) / int(2))
                            # # 取最大值;
                            # y_P_Positive_Short_Selling_2 = float(max([float(y_P_Positive_Short_Selling), float(value["Short_Selling"]["Short_Selling_profit_Positive_probability"])]))
                            # # 取最小值;
                            # y_P_Positive_Short_Selling_2 = float(min([float(y_P_Positive_Short_Selling), float(value["Short_Selling"]["Short_Selling_profit_Positive_probability"])]))
                            # y_P_Positive_Short_Selling *= float(0.0)
                            # y_P_Positive_Short_Selling += float(y_P_Positive_Short_Selling_2)
                            y_P_Positive_Short_Selling_Array.append(float(value["Short_Selling"]["Short_Selling_profit_Positive_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_profit_Negative_probability" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_profit_Negative_probability"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_profit_Negative_probability"])):
                            # # 取均值;
                            # y_P_Negative_Short_Selling_2 = float(float(float(y_P_Negative_Short_Selling) + float(value["Short_Selling"]["Short_Selling_profit_Negative_probability"])) / int(2))
                            # 取最大值;
                            # y_P_Negative_Short_Selling_2 = float(max([float(y_P_Negative_Short_Selling), float(value["Short_Selling"]["Short_Selling_profit_Negative_probability"])]))
                            # # 取最小值;
                            # y_P_Negative_Short_Selling_2 = float(min([float(y_P_Negative_Short_Selling), float(value["Short_Selling"]["Short_Selling_profit_Negative_probability"])]))
                            # y_P_Negative_Short_Selling *= float(0.0)
                            # y_P_Negative_Short_Selling += float(y_P_Negative_Short_Selling_2)
                            y_P_Negative_Short_Selling_Array.append(float(value["Short_Selling"]["Short_Selling_profit_Negative_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_average_price_amplitude_date_transaction" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])):
                            # # 取均值;
                            # y_amplitude_Short_Selling_2 = float(float(float(y_amplitude_Short_Selling) + float(value["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])) / int(2))
                            # 取最大值;
                            # y_amplitude_Short_Selling_2 = float(max([float(y_amplitude_Short_Selling), float(value["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])]))
                            # # 取最小值;
                            # y_amplitude_Short_Selling_2 = float(min([float(y_amplitude_Short_Selling), float(value["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"])]))
                            # y_amplitude_Short_Selling *= float(0.0)
                            # y_amplitude_Short_Selling += float(y_amplitude_Short_Selling_2)
                            y_amplitude_Short_Selling_Array.append(float(value["Short_Selling"]["Short_Selling_average_price_amplitude_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_average_volume_turnover_date_transaction" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])):
                            # # 取均值;
                            # y_turnover_Short_Selling_2 = float(float(float(y_turnover_Short_Selling) + float(value["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])) / int(2))
                            # # 取最大值;
                            # y_turnover_Short_Selling_2 = float(max([float(y_turnover_Short_Selling), float(value["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])]))
                            # 取最小值;
                            # y_turnover_Short_Selling_2 = float(min([float(y_turnover_Short_Selling), float(value["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"])]))
                            # y_turnover_Short_Selling *= float(0.0)
                            # y_turnover_Short_Selling += float(y_turnover_Short_Selling_2)
                            y_turnover_Short_Selling_Array.append(float(value["Short_Selling"]["Short_Selling_average_volume_turnover_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "Short_Selling_average_date_transaction_between" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["Short_Selling_average_date_transaction_between"] is None) or numpy.isnan(value["Short_Selling"]["Short_Selling_average_date_transaction_between"])):
                            # # 取均值;
                            # y_date_transaction_between_Short_Selling_2 = float(float(float(y_date_transaction_between_Short_Selling) + float(value["Short_Selling"]["Short_Selling_average_date_transaction_between"])) / int(2))
                            # 取最大值;
                            # y_date_transaction_between_Short_Selling_2 = float(max([float(y_date_transaction_between_Short_Selling), float(value["Short_Selling"]["Short_Selling_average_date_transaction_between"])]))
                            # # 取最小值;
                            # y_date_transaction_between_Short_Selling_2 = float(min([float(y_date_transaction_between_Short_Selling), float(value["Short_Selling"]["Short_Selling_average_date_transaction_between"])]))
                            # y_date_transaction_between_Short_Selling *= float(0.0)
                            # y_date_transaction_between_Short_Selling += float(y_date_transaction_between_Short_Selling_2)
                            y_date_transaction_between_Short_Selling_Array.append(float(value["Short_Selling"]["Short_Selling_average_date_transaction_between"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "y_Short_Selling_profit" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["y_Short_Selling_profit"] is None) or numpy.isnan(value["Short_Selling"]["y_Short_Selling_profit"])):
                            # 取總和;
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    y_Short_Selling_profit_2 = float(float(value["Short_Selling"]["y_Short_Selling_profit"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                else:
                                    y_Short_Selling_profit_2 = float(value["Short_Selling"]["y_Short_Selling_profit"])
                            else:
                                y_Short_Selling_profit_2 = float(value["Short_Selling"]["y_Short_Selling_profit"])
                            y_Short_Selling_profit_Array.append(y_Short_Selling_profit_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    if "y_Short_Selling_loss" in value["Short_Selling"]:
                        if not ((value["Short_Selling"]["y_Short_Selling_loss"] is None) or numpy.isnan(value["Short_Selling"]["y_Short_Selling_loss"])):
                            # # 取均值;
                            # y_Short_Selling_loss_2 = float(float(float(y_Short_Selling_loss) + float(value["Short_Selling"]["y_Short_Selling_loss"])) / int(2))
                            # # 取最大值;
                            # y_Short_Selling_loss_2 = float(max([float(y_Short_Selling_loss), float(value["Short_Selling"]["y_Short_Selling_loss"])]))
                            # # 取最小值;
                            # y_Short_Selling_loss_2 = float(min([float(y_Short_Selling_loss), float(value["Short_Selling"]["y_Short_Selling_loss"])]))
                            # y_Short_Selling_loss *= float(0.0)
                            # y_Short_Selling_loss += float(y_Short_Selling_loss_2)
                            if int(len(weight_PickStock_Dict)) > int(0):
                                if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                    y_Short_Selling_loss_2 = float(float(value["Short_Selling"]["y_Short_Selling_loss"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                                else:
                                    y_Short_Selling_loss_2 = float(value["Short_Selling"]["y_Short_Selling_loss"])
                            else:
                                y_Short_Selling_loss_2 = float(value["Short_Selling"]["y_Short_Selling_loss"])
                            y_Short_Selling_loss_Array.append(y_Short_Selling_loss_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;

                # 做多（Long Position）記錄 + 做空（Short Selling）記錄，纍計求和;
                if "profit_total" in value:
                    if not ((value["profit_total"] is None) or numpy.isnan(value["profit_total"])):
                        # 取總和;
                        # y_total_2 = float(float(y_total) + float(value["profit_total"]))
                        # # 取均值;
                        # y_total_2 = float(float(float(y_total) + float(value["profit_total"])) / int(2))
                        # # 取極大值;
                        # y_total_2 = float(max([float(y_total), float(value["profit_total"])]))
                        # # 取極小值;
                        # y_total_2 = float(min([float(y_total), float(value["profit_total"])]))
                        # y_total *= float(0.0)
                        # y_total += float(y_total_2)
                        y_total_Array.append(float(value["profit_total"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "maximum_drawdown" in value:
                    if not ((value["maximum_drawdown"] is None) or numpy.isnan(value["maximum_drawdown"])):
                        # # 取均值;
                        # y_maximum_drawdown_2 = float(float(float(y_maximum_drawdown) + float(value["maximum_drawdown"])) / int(2))
                        # # 取最大值;
                        # y_maximum_drawdown_2 = float(max([float(y_maximum_drawdown), float(value["maximum_drawdown"])]))
                        # # 取最小值;
                        # y_maximum_drawdown_2 = float(min([float(y_maximum_drawdown), float(value["maximum_drawdown"])]))
                        # y_maximum_drawdown *= float(0.0)
                        # y_maximum_drawdown += float(y_maximum_drawdown_2)
                        y_maximum_drawdown_Array.append(float(value["maximum_drawdown"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "profit_Positive" in value:
                    if not ((value["profit_Positive"] is None) or numpy.isnan(value["profit_Positive"])):
                        # 取總和;
                        # y_Positive_2 = float(float(y_Positive) + float(value["profit_Positive"]))
                        # # 取均值;
                        # y_Positive_2 = float(float(float(y_Positive) + float(value["profit_Positive"])) / int(2))
                        # # 取極大值;
                        # y_Positive_2 = float(max([float(y_Positive), float(value["profit_Positive"])]))
                        # # 取極小值;
                        # y_Positive_2 = float(min([float(y_Positive), float(value["profit_Positive"])]))
                        # y_Positive *= float(0.0)
                        # y_Positive += float(y_Positive_2)
                        y_Positive_Array.append(float(value["profit_Positive"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "profit_Negative" in value:
                    if not ((value["profit_Negative"] is None) or numpy.isnan(value["profit_Negative"])):
                        # 取總和;
                        # y_Negative_2 = float(float(y_Negative) + float(value["profit_Negative"]))
                        # # 取均值;
                        # y_Negative_2 = float(float(float(y_Negative) + float(value["profit_Negative"])) / int(2))
                        # # 取極大值;
                        # y_Negative_2 = float(max([float(y_Negative), float(value["profit_Negative"])]))
                        # # 取極小值;
                        # y_Negative_2 = float(min([float(y_Negative), float(value["profit_Negative"])]))
                        # y_Negative *= float(0.0)
                        # y_Negative += float(y_Negative_2)
                        y_Negative_Array.append(float(value["profit_Negative"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "profit_Positive_probability" in value:
                    if not ((value["profit_Positive_probability"] is None) or numpy.isnan(value["profit_Positive_probability"])):
                        # # 取總和;
                        # y_P_Positive_2 = float(float(y_P_Positive) + float(value["profit_Positive_probability"]))
                        # 取均值;
                        # y_P_Positive_2 = float(float(float(y_P_Positive) + float(value["profit_Positive_probability"])) / int(2))
                        # # 取極大值;
                        # y_P_Positive_2 = float(max([float(y_P_Positive), float(value["profit_Positive_probability"])]))
                        # # 取極小值;
                        # y_P_Positive_2 = float(min([float(y_P_Positive), float(value["profit_Positive_probability"])]))
                        # y_P_Positive *= float(0.0)
                        # y_P_Positive += float(y_P_Positive_2)
                        y_P_Positive_Array.append(float(value["profit_Positive_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "profit_Negative_probability" in value:
                    if not ((value["profit_Negative_probability"] is None) or numpy.isnan(value["profit_Negative_probability"])):
                        # # 取總和;
                        # y_P_Negative_2 = float(float(y_P_Negative) + float(value["profit_Negative_probability"]))
                        # # 取均值;
                        # y_P_Negative_2 = float(float(float(y_P_Negative) + float(value["profit_Negative_probability"])) / int(2))
                        # 取極大值;
                        # y_P_Negative_2 = float(max([float(y_P_Negative), float(value["profit_Negative_probability"])]))
                        # # 取極小值;
                        # y_P_Negative_2 = float(min([float(y_P_Negative), float(value["profit_Negative_probability"])]))
                        # y_P_Negative *= float(0.0)
                        # y_P_Negative += float(y_P_Negative_2)
                        y_P_Negative_Array.append(float(value["profit_Negative_probability"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "average_price_amplitude_date_transaction" in value:
                    if not ((value["average_price_amplitude_date_transaction"] is None) or numpy.isnan(value["average_price_amplitude_date_transaction"])):
                        # # 取總和;
                        # y_amplitude_2 = float(float(y_amplitude) + float(value["average_price_amplitude_date_transaction"]))
                        # # 取均值;
                        # y_amplitude_2 = float(float(float(y_amplitude) + float(value["average_price_amplitude_date_transaction"])) / int(2))
                        # 取極大值;
                        # y_amplitude_2 = float(max([float(y_amplitude), float(value["average_price_amplitude_date_transaction"])]))
                        # # 取極小值;
                        # y_amplitude_2 = float(min([float(y_amplitude), float(value["average_price_amplitude_date_transaction"])]))
                        # y_amplitude *= float(0.0)
                        # y_amplitude += float(y_amplitude_2)
                        y_amplitude_Array.append(float(value["average_price_amplitude_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "average_volume_turnover_date_transaction" in value:
                    if not ((value["average_volume_turnover_date_transaction"] is None) or numpy.isnan(value["average_volume_turnover_date_transaction"])):
                        # # 取總和;
                        # y_turnover_2 = float(float(y_turnover) + float(value["average_volume_turnover_date_transaction"]))
                        # # 取均值;
                        # y_turnover_2 = float(float(float(y_turnover) + float(value["average_volume_turnover_date_transaction"])) / int(2))
                        # # 取極大值;
                        # y_turnover_2 = float(max([float(y_turnover), float(value["average_volume_turnover_date_transaction"])]))
                        # 取極小值;
                        # y_turnover_2 = float(min([float(y_turnover), float(value["average_volume_turnover_date_transaction"])]))
                        # y_turnover *= float(0.0)
                        # y_turnover += float(y_turnover_2)
                        y_turnover_Array.append(float(value["average_volume_turnover_date_transaction"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "average_date_transaction_between" in value:
                    if not ((value["average_date_transaction_between"] is None) or numpy.isnan(value["average_date_transaction_between"])):
                        # # 取總和;
                        # y_date_transaction_between_2 = float(float(y_date_transaction_between) + float(value["average_date_transaction_between"]))
                        # # 取均值;
                        # y_date_transaction_between_2 = float(float(float(y_date_transaction_between) + float(value["average_date_transaction_between"])) / int(2))
                        # 取極大值;
                        # y_date_transaction_between_2 = float(max([float(y_date_transaction_between), float(value["average_date_transaction_between"])]))
                        # # 取極小值;
                        # y_date_transaction_between_2 = float(min([float(y_date_transaction_between), float(value["average_date_transaction_between"])]))
                        # y_date_transaction_between *= float(0.0)
                        # y_date_transaction_between += float(y_date_transaction_between_2)
                        y_date_transaction_between_Array.append(float(value["average_date_transaction_between"]))  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "y_profit" in value:
                    if not ((value["y_profit"] is None) or numpy.isnan(value["y_profit"])):
                        # # 取總和;
                        # if int(len(weight_PickStock_Dict)) > int(0):
                        #     if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                        #         y_profit_2 = float(float(y_profit) + float(float(value["y_profit"]) * float(float(weight_PickStock_Dict[str(key)]["Long_Position"]) + float(weight_PickStock_Dict[str(key)]["Short_Selling"]))))
                        #     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and (not ("Short_Selling" in weight_PickStock_Dict[str(key)])):
                        #         y_profit_2 = float(float(y_profit) + float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"])))
                        #     elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and (not ("Long_Position" in weight_PickStock_Dict[str(key)])) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                        #         y_profit_2 = float(float(y_profit) + float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"])))
                        #     else:
                        #         y_profit_2 = float(float(y_profit) + float(value["y_profit"]))
                        # else:
                        #     y_profit_2 = float(float(y_profit) + float(value["y_profit"]))
                        # # 取總和;
                        # y_profit_2 = float(float(y_profit) + float(value["y_profit"]))
                        # # 取均值;
                        # y_profit_2 = float(float(float(y_profit) + float(value["y_profit"])) / int(2))
                        # # 取極大值;
                        # y_profit_2 = float(max([float(y_profit), float(value["y_profit"])]))
                        # # 取極小值;
                        # y_profit_2 = float(min([float(y_profit), float(value["y_profit"])]))
                        # y_profit *= float(0.0)
                        # y_profit += float(y_profit_2)
                        if int(len(weight_PickStock_Dict)) > int(0):
                            if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                y_profit_2 = float(float(value["y_profit"]) * float(float(weight_PickStock_Dict[str(key)]["Long_Position"]) + float(weight_PickStock_Dict[str(key)]["Short_Selling"])))
                            elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and (not ("Short_Selling" in weight_PickStock_Dict[str(key)])):
                                y_profit_2 = float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                            elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and (not ("Long_Position" in weight_PickStock_Dict[str(key)])) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                y_profit_2 = float(float(value["y_profit"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                            else:
                                y_profit_2 = float(value["y_profit"])
                        else:
                            y_profit_2 = float(value["y_profit"])
                        y_profit_Array.append(y_profit_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
                if "y_loss" in value:
                    if not ((value["y_loss"] is None) or numpy.isnan(value["y_loss"])):
                        # # 取均值;
                        # y_loss_2 = float(float(float(y_loss) + float(value["y_loss"])) / int(2))
                        # # 取最大值;
                        # y_loss_2 = float(max([float(y_loss), float(value["y_loss"])]))
                        # # 取最小值;
                        # y_loss_2 = float(min([float(y_loss), float(value["y_loss"])]))
                        # y_loss *= float(0.0)
                        # y_loss += float(y_loss_2)
                        if int(len(weight_PickStock_Dict)) > int(0):
                            if (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                y_loss_2 = float(float(value["y_loss"]) * float(float(weight_PickStock_Dict[str(key)]["Long_Position"]) + float(weight_PickStock_Dict[str(key)]["Short_Selling"])))
                            elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and ("Long_Position" in weight_PickStock_Dict[str(key)]) and (not ("Short_Selling" in weight_PickStock_Dict[str(key)])):
                                y_loss_2 = float(float(value["y_loss"]) * float(weight_PickStock_Dict[str(key)]["Long_Position"]))
                            elif (str(key) in weight_PickStock_Dict) and isinstance(weight_PickStock_Dict[str(key)], dict) and (not ("Long_Position" in weight_PickStock_Dict[str(key)])) and ("Short_Selling" in weight_PickStock_Dict[str(key)]):
                                y_loss_2 = float(float(value["y_loss"]) * float(weight_PickStock_Dict[str(key)]["Short_Selling"]))
                            else:
                                y_loss_2 = float(value["y_loss"])
                        else:
                            y_loss_2 = float(value["y_loss"])
                        y_loss_Array.append(y_loss_2)  # 使用 list.append() 函數在列表末尾追加推入新元素;
        number_total = None  # int(int(number_total_Long_Position) + int(number_total_Short_Selling))  # 兩次對衝交易的總輪數，纍加總計;
        if (not ((number_total_Long_Position is None) or numpy.isnan(number_total_Long_Position))) and (not ((number_total_Short_Selling is None) or numpy.isnan(number_total_Short_Selling))):
            number_total = int(int(number_total_Long_Position) + int(number_total_Short_Selling))  # 兩次對衝交易的總輪數，纍加總計;
        elif (not ((number_total_Long_Position is None) or numpy.isnan(number_total_Long_Position))) and ((number_total_Short_Selling is None) or numpy.isnan(number_total_Short_Selling)):
            number_total = int(number_total_Long_Position)
        elif ((number_total_Long_Position is None) or numpy.isnan(number_total_Long_Position)) and (not ((number_total_Short_Selling is None) or numpy.isnan(number_total_Short_Selling))):
            number_total = int(number_total_Short_Selling)
        else:
            number_total = None  # int(int(number_total_Long_Position) + int(number_total_Short_Selling))  # 兩次對衝交易的總輪數，纍加總計;
        if int(len(y_total_Long_Position_Array)) > int(0):
            # y_total_Long_Position = float(min(y_total_Long_Position_Array))
            y_total_Long_Position = float(sum(y_total_Long_Position_Array))
        y_total_Long_Position_Array = None  # 釋放内存;
        if int(len(y_total_Short_Selling_Array)) > int(0):
            # y_total_Short_Selling = float(min(y_total_Short_Selling_Array))
            y_total_Short_Selling = float(sum(y_total_Short_Selling_Array))
        y_total_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_total_Array)) > int(0):
            # y_total = float(min(y_total_Array))
            y_total = float(sum(y_total_Array))
        y_total_Array = None  # 釋放内存;
        # y_total = None  # float(0.0)  # float(float(y_total_Long_Position) + float(y_total_Short_Selling))  # 每兩次對衝交易利潤，纍加總計;
        if (not ((y_total_Long_Position is None) or numpy.isnan(y_total_Long_Position))) and (not ((y_total_Short_Selling is None) or numpy.isnan(y_total_Short_Selling))):
            y_total = float(float(y_total_Long_Position) + float(y_total_Short_Selling))  # 每兩次對衝交易利潤，纍加總計;
        elif (not ((y_total_Long_Position is None) or numpy.isnan(y_total_Long_Position))) and ((y_total_Short_Selling is None) or numpy.isnan(y_total_Short_Selling)):
            y_total = float(y_total_Long_Position)
        elif ((y_total_Long_Position is None) or numpy.isnan(y_total_Long_Position)) and (not ((y_total_Short_Selling is None) or numpy.isnan(y_total_Short_Selling))):
            y_total = float(y_total_Short_Selling)
        else:
            y_total = None  # float(float(y_total_Long_Position) + float(y_total_Short_Selling))  # 每兩次對衝交易利潤，纍加總計;
        if int(len(y_maximum_drawdown_Long_Position_Array)) > int(0):
            y_maximum_drawdown_Long_Position = float(min(y_maximum_drawdown_Long_Position_Array))
        y_maximum_drawdown_Long_Position_Array = None  # 釋放内存;
        if int(len(y_maximum_drawdown_Short_Selling_Array)) > int(0):
            y_maximum_drawdown_Short_Selling = float(min(y_maximum_drawdown_Short_Selling_Array))
        y_maximum_drawdown_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_maximum_drawdown_Array)) > int(0):
            y_maximum_drawdown = float(min(y_maximum_drawdown_Array))
        y_maximum_drawdown_Array = None  # 釋放内存;
        if (not ((y_maximum_drawdown_Long_Position is None) or numpy.isnan(y_maximum_drawdown_Long_Position))) and (not ((y_maximum_drawdown_Short_Selling is None) or numpy.isnan(y_maximum_drawdown_Short_Selling))):
            y_maximum_drawdown = float(min([y_maximum_drawdown_Long_Position, y_maximum_drawdown_Short_Selling]))  # 兩次對衝交易之間的最大回撤值，取極值統計;
        elif (not ((y_maximum_drawdown_Long_Position is None) or numpy.isnan(y_maximum_drawdown_Long_Position))) and ((y_maximum_drawdown_Short_Selling is None) or numpy.isnan(y_maximum_drawdown_Short_Selling)):
            y_maximum_drawdown = float(y_maximum_drawdown_Long_Position)  # 兩次對衝交易之間的最大回撤值，取極值統計;
        elif ((y_maximum_drawdown_Long_Position is None) or numpy.isnan(y_maximum_drawdown_Long_Position)) and (not ((y_maximum_drawdown_Short_Selling is None) or numpy.isnan(y_maximum_drawdown_Short_Selling))):
            y_maximum_drawdown = float(y_maximum_drawdown_Short_Selling)  # 兩次對衝交易之間的最大回撤值，取極值統計;
        else:
            y_maximum_drawdown = None
        if int(len(y_Positive_Long_Position_Array)) > int(0):
            # y_Positive_Long_Position = float(min(y_Positive_Long_Position_Array))
            y_Positive_Long_Position = float(sum(y_Positive_Long_Position_Array))
        y_Positive_Long_Position_Array = None  # 釋放内存;
        if int(len(y_Positive_Short_Selling_Array)) > int(0):
            # y_Positive_Short_Selling = float(min(y_Positive_Short_Selling_Array))
            y_Positive_Short_Selling = float(sum(y_Positive_Short_Selling_Array))
        y_Positive_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_Positive_Array)) > int(0):
            # y_Positive = float(min(y_Positive_Array))
            y_Positive = float(sum(y_Positive_Array))
        y_Positive_Array = None  # 釋放内存;
        # y_Positive = None  # float(0.0)  # float(float(y_Positive_Long_Position) + float(y_Positive_Short_Selling))
        if (not ((y_Positive_Long_Position is None) or numpy.isnan(y_Positive_Long_Position))) and (not ((y_Positive_Short_Selling is None) or numpy.isnan(y_Positive_Short_Selling))):
            y_Positive = float(float(y_Positive_Long_Position) + float(y_Positive_Short_Selling))
        elif (not ((y_Positive_Long_Position is None) or numpy.isnan(y_Positive_Long_Position))) and ((y_Positive_Short_Selling is None) or numpy.isnan(y_Positive_Short_Selling)):
            y_Positive = float(y_Positive_Long_Position)
        elif ((y_Positive_Long_Position is None) or numpy.isnan(y_Positive_Long_Position)) and (not ((y_Positive_Short_Selling is None) or numpy.isnan(y_Positive_Short_Selling))):
            y_Positive = float(y_Positive_Short_Selling)
        else:
            y_Positive = None  # float(float(y_Positive_Long_Position) + float(y_Positive_Short_Selling))
        if int(len(y_Negative_Long_Position_Array)) > int(0):
            # y_Negative_Long_Position = float(min(y_Negative_Long_Position_Array))
            y_Negative_Long_Position = float(sum(y_Negative_Long_Position_Array))
        y_Negative_Long_Position_Array = None  # 釋放内存;
        if int(len(y_Negative_Short_Selling_Array)) > int(0):
            # y_Negative_Short_Selling = float(min(y_Negative_Short_Selling_Array))
            y_Negative_Short_Selling = float(sum(y_Negative_Short_Selling_Array))
        y_Negative_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_Negative_Array)) > int(0):
            # y_Negative = float(min(y_Negative_Array))
            y_Negative = float(sum(y_Negative_Array))
        y_Negative_Array = None  # 釋放内存;
        # y_Negative = None  # float(0.0)  # float(float(y_Negative_Long_Position) + float(y_Negative_Short_Selling))
        if (not ((y_Negative_Long_Position is None) or numpy.isnan(y_Negative_Long_Position))) and (not ((y_Negative_Short_Selling is None) or numpy.isnan(y_Negative_Short_Selling))):
            y_Negative = float(float(y_Negative_Long_Position) + float(y_Negative_Short_Selling))
        elif (not ((y_Negative_Long_Position is None) or numpy.isnan(y_Negative_Long_Position))) and ((y_Negative_Short_Selling is None) or numpy.isnan(y_Negative_Short_Selling)):
            y_Negative = float(y_Negative_Long_Position)
        elif ((y_Negative_Long_Position is None) or numpy.isnan(y_Negative_Long_Position)) and (not ((y_Negative_Short_Selling is None) or numpy.isnan(y_Negative_Short_Selling))):
            y_Negative = float(y_Negative_Short_Selling)
        else:
            y_Negative = None  # float(float(y_Negative_Long_Position) + float(y_Negative_Short_Selling))
        if int(len(y_P_Positive_Long_Position_Array)) > int(0):
            # y_P_Positive_Long_Position = float(min(y_P_Positive_Long_Position_Array))
            # y_P_Positive_Long_Position = float(sum(y_P_Positive_Long_Position_Array))
            y_P_Positive_Long_Position = float(numpy.mean(y_P_Positive_Long_Position_Array))
        y_P_Positive_Long_Position_Array = None  # 釋放内存;
        if int(len(y_P_Positive_Short_Selling_Array)) > int(0):
            # y_P_Positive_Short_Selling = float(min(y_P_Positive_Short_Selling_Array))
            # y_P_Positive_Short_Selling = float(sum(y_P_Positive_Short_Selling_Array))
            y_P_Positive_Short_Selling = float(numpy.mean(y_P_Positive_Short_Selling_Array))
        y_P_Positive_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_P_Positive_Array)) > int(0):
            # y_P_Positive = float(min(y_P_Positive_Array))
            # y_P_Positive = float(sum(y_P_Positive_Array))
            y_P_Positive = float(numpy.mean(y_P_Positive_Array))
        y_P_Positive_Array = None  # 釋放内存;
        # y_P_Positive = None  # float(0.0)  # float(float(y_P_Positive_Long_Position) + float(y_P_Positive_Short_Selling))
        if (not ((y_P_Positive_Long_Position is None) or numpy.isnan(y_P_Positive_Long_Position))) and (not ((y_P_Positive_Short_Selling is None) or numpy.isnan(y_P_Positive_Short_Selling))):
            # y_P_Positive = float(float(y_P_Positive_Long_Position) + float(y_P_Positive_Short_Selling))
            y_P_Positive = float(numpy.mean([float(y_P_Positive_Long_Position), float(y_P_Positive_Short_Selling)]))
        elif (not ((y_P_Positive_Long_Position is None) or numpy.isnan(y_P_Positive_Long_Position))) and ((y_P_Positive_Short_Selling is None) or numpy.isnan(y_P_Positive_Short_Selling)):
            y_P_Positive = float(y_P_Positive_Long_Position)
        elif ((y_P_Positive_Long_Position is None) or numpy.isnan(y_P_Positive_Long_Position)) and (not ((y_P_Positive_Short_Selling is None) or numpy.isnan(y_P_Positive_Short_Selling))):
            y_P_Positive = float(y_P_Positive_Short_Selling)
        else:
            y_P_Positive = None  # float(float(y_P_Positive_Long_Position) + float(y_P_Positive_Short_Selling))
        if int(len(y_P_Negative_Long_Position_Array)) > int(0):
            # y_P_Negative_Long_Position = float(min(y_P_Negative_Long_Position_Array))
            # y_P_Negative_Long_Position = float(sum(y_P_Negative_Long_Position_Array))
            y_P_Negative_Long_Position = float(numpy.mean(y_P_Negative_Long_Position_Array))
        y_P_Negative_Long_Position_Array = None  # 釋放内存;
        if int(len(y_P_Negative_Short_Selling_Array)) > int(0):
            # y_P_Negative_Short_Selling = float(min(y_P_Negative_Short_Selling_Array))
            # y_P_Negative_Short_Selling = float(sum(y_P_Negative_Short_Selling_Array))
            y_P_Negative_Short_Selling = float(numpy.mean(y_P_Negative_Short_Selling_Array))
        y_P_Negative_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_P_Negative_Array)) > int(0):
            # y_P_Negative = float(min(y_P_Negative_Array))
            # y_P_Negative = float(sum(y_P_Negative_Array))
            y_P_Negative = float(numpy.mean(y_P_Negative_Array))
        y_P_Negative_Array = None  # 釋放内存;
        # y_P_Negative = None  # float(0.0)  # float(float(y_P_Negative_Long_Position) + float(y_P_Negative_Short_Selling))
        if (not ((y_P_Negative_Long_Position is None) or numpy.isnan(y_P_Negative_Long_Position))) and (not ((y_P_Negative_Short_Selling is None) or numpy.isnan(y_P_Negative_Short_Selling))):
            # y_P_Negative = float(float(y_P_Negative_Long_Position) + float(y_P_Negative_Short_Selling))
            y_P_Negative = float(numpy.mean([float(y_P_Negative_Long_Position), float(y_P_Negative_Short_Selling)]))
        elif (not ((y_P_Negative_Long_Position is None) or numpy.isnan(y_P_Negative_Long_Position))) and ((y_P_Negative_Short_Selling is None) or numpy.isnan(y_P_Negative_Short_Selling)):
            y_P_Negative = float(y_P_Negative_Long_Position)
        elif ((y_P_Negative_Long_Position is None) or numpy.isnan(y_P_Negative_Long_Position)) and (not ((y_P_Negative_Short_Selling is None) or numpy.isnan(y_P_Negative_Short_Selling))):
            y_P_Negative = float(y_P_Negative_Short_Selling)
        else:
            y_P_Negative = None  # float(float(y_P_Negative_Long_Position) + float(y_P_Negative_Short_Selling))
        if int(len(y_amplitude_Long_Position_Array)) > int(0):
            # y_amplitude_Long_Position = float(min(y_amplitude_Long_Position_Array))  # 去極小值;
            # y_amplitude_Long_Position = float(sum(y_amplitude_Long_Position_Array))  # 取總和
            # y_amplitude_Long_Position = float(numpy.mean(y_amplitude_Long_Position_Array))  # 取均值;
            y_amplitude_Long_Position = float(numpy.median(y_amplitude_Long_Position_Array))  # 取中位數;
        y_amplitude_Long_Position_Array = None  # 釋放内存;
        if int(len(y_amplitude_Short_Selling_Array)) > int(0):
            # y_amplitude_Short_Selling = float(min(y_amplitude_Short_Selling_Array))  # 去極小值;
            # y_amplitude_Short_Selling = float(sum(y_amplitude_Short_Selling_Array))  # 取總和
            # y_amplitude_Short_Selling = float(numpy.mean(y_amplitude_Short_Selling_Array))  # 取均值;
            y_amplitude_Short_Selling = float(numpy.median(y_amplitude_Short_Selling_Array))  # 取中位數;
        y_amplitude_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_amplitude_Array)) > int(0):
            # y_amplitude = float(min(y_amplitude_Array))  # 去極小值;
            # y_amplitude = float(sum(y_amplitude_Array))  # 取總和
            # y_amplitude = float(numpy.mean(y_amplitude_Array))  # 取均值;
            y_amplitude = float(numpy.median(y_amplitude_Array))  # 取中位數;
        y_amplitude_Array = None  # 釋放内存;
        # y_amplitude = None  # float(0.0)  # float(float(y_amplitude_Long_Position) + float(y_amplitude_Short_Selling))
        if (not ((y_amplitude_Long_Position is None) or numpy.isnan(y_amplitude_Long_Position))) and (not ((y_amplitude_Short_Selling is None) or numpy.isnan(y_amplitude_Short_Selling))):
            # y_amplitude = float(float(y_amplitude_Long_Position) + float(y_amplitude_Short_Selling))  # 取總和
            # y_amplitude = float(numpy.mean([float(y_amplitude_Long_Position), float(y_amplitude_Short_Selling)]))  # 取均值;
            y_amplitude = float(numpy.median([float(y_amplitude_Long_Position), float(y_amplitude_Short_Selling)]))  # 取中位數;
        elif (not ((y_amplitude_Long_Position is None) or numpy.isnan(y_amplitude_Long_Position))) and ((y_amplitude_Short_Selling is None) or numpy.isnan(y_amplitude_Short_Selling)):
            y_amplitude = float(y_amplitude_Long_Position)
        elif ((y_amplitude_Long_Position is None) or numpy.isnan(y_amplitude_Long_Position)) and (not ((y_amplitude_Short_Selling is None) or numpy.isnan(y_amplitude_Short_Selling))):
            y_amplitude = float(y_amplitude_Short_Selling)
        else:
            y_amplitude = None  # float(float(y_amplitude_Long_Position) + float(y_amplitude_Short_Selling))
        if int(len(y_turnover_Long_Position_Array)) > int(0):
            # y_turnover_Long_Position = float(min(y_turnover_Long_Position_Array))  # 去極小值;
            # y_turnover_Long_Position = float(sum(y_turnover_Long_Position_Array))  # 取總和
            # y_turnover_Long_Position = float(numpy.mean(y_turnover_Long_Position_Array))  # 取均值;
            y_turnover_Long_Position = float(numpy.median(y_turnover_Long_Position_Array))  # 取中位數;
        y_turnover_Long_Position_Array = None  # 釋放内存;
        if int(len(y_turnover_Short_Selling_Array)) > int(0):
            # y_turnover_Short_Selling = float(min(y_turnover_Short_Selling_Array))  # 去極小值;
            # y_turnover_Short_Selling = float(sum(y_turnover_Short_Selling_Array))  # 取總和
            # y_turnover_Short_Selling = float(numpy.mean(y_turnover_Short_Selling_Array))  # 取均值;
            y_turnover_Short_Selling = float(numpy.median(y_turnover_Short_Selling_Array))  # 取中位數;
        y_turnover_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_turnover_Array)) > int(0):
            # y_turnover = float(min(y_turnover_Array))  # 去極小值;
            # y_turnover = float(sum(y_turnover_Array))  # 取總和
            # y_turnover = float(numpy.mean(y_turnover_Array))  # 取均值;
            y_turnover = float(numpy.median(y_turnover_Array))  # 取中位數;
        y_turnover_Array = None  # 釋放内存;
        # y_turnover = None  # float(0.0)  # float(float(y_turnover_Long_Position) + float(y_turnover_Short_Selling))
        if (not ((y_turnover_Long_Position is None) or numpy.isnan(y_turnover_Long_Position))) and (not ((y_turnover_Short_Selling is None) or numpy.isnan(y_turnover_Short_Selling))):
            # y_turnover = float(float(y_turnover_Long_Position) + float(y_turnover_Short_Selling))  # 取總和
            # y_turnover = float(numpy.mean([float(y_turnover_Long_Position), float(y_turnover_Short_Selling)]))  # 取均值;
            y_turnover = float(numpy.median([float(y_turnover_Long_Position), float(y_turnover_Short_Selling)]))  # 取中位數;
        elif (not ((y_turnover_Long_Position is None) or numpy.isnan(y_turnover_Long_Position))) and ((y_turnover_Short_Selling is None) or numpy.isnan(y_turnover_Short_Selling)):
            y_turnover = float(y_turnover_Long_Position)
        elif ((y_turnover_Long_Position is None) or numpy.isnan(y_turnover_Long_Position)) and (not ((y_turnover_Short_Selling is None) or numpy.isnan(y_turnover_Short_Selling))):
            y_turnover = float(y_turnover_Short_Selling)
        else:
            y_turnover = None  # float(float(y_turnover_Long_Position) + float(y_turnover_Short_Selling))
        if int(len(y_date_transaction_between_Long_Position_Array)) > int(0):
            # y_date_transaction_between_Long_Position = float(min(y_date_transaction_between_Long_Position_Array))  # 去極小值;
            # y_date_transaction_between_Long_Position = float(sum(y_date_transaction_between_Long_Position_Array))  # 取總和
            # y_date_transaction_between_Long_Position = float(numpy.mean(y_date_transaction_between_Long_Position_Array))  # 取均值;
            y_date_transaction_between_Long_Position = float(numpy.median(y_date_transaction_between_Long_Position_Array))  # 取中位數;
        y_date_transaction_between_Long_Position_Array = None  # 釋放内存;
        if int(len(y_date_transaction_between_Short_Selling_Array)) > int(0):
            # y_date_transaction_between_Short_Selling = float(min(y_date_transaction_between_Short_Selling_Array))  # 去極小值;
            # y_date_transaction_between_Short_Selling = float(sum(y_date_transaction_between_Short_Selling_Array))  # 取總和
            # y_date_transaction_between_Short_Selling = float(numpy.mean(y_date_transaction_between_Short_Selling_Array))  # 取均值;
            y_date_transaction_between_Short_Selling = float(numpy.median(y_date_transaction_between_Short_Selling_Array))  # 取中位數;
        y_date_transaction_between_Short_Selling_Array = None  # 釋放内存;
        if int(len(y_date_transaction_between_Array)) > int(0):
            # y_date_transaction_between = float(min(y_date_transaction_between_Array))  # 去極小值;
            # y_date_transaction_between = float(sum(y_date_transaction_between_Array))  # 取總和
            # y_date_transaction_between = float(numpy.mean(y_date_transaction_between_Array))  # 取均值;
            y_date_transaction_between = float(numpy.median(y_date_transaction_between_Array))  # 取中位數;
        y_date_transaction_between_Array = None  # 釋放内存;
        # y_date_transaction_between = None  # float(0.0)  # float(float(y_date_transaction_between_Long_Position) + float(y_date_transaction_between_Short_Selling))
        if (not ((y_date_transaction_between_Long_Position is None) or numpy.isnan(y_date_transaction_between_Long_Position))) and (not ((y_date_transaction_between_Short_Selling is None) or numpy.isnan(y_date_transaction_between_Short_Selling))):
            # y_date_transaction_between = float(float(y_date_transaction_between_Long_Position) + float(y_date_transaction_between_Short_Selling))  # 取總和
            # y_date_transaction_between = float(numpy.mean([float(y_date_transaction_between_Long_Position), float(y_date_transaction_between_Short_Selling)]))  # 取均值;
            y_date_transaction_between = float(numpy.median([float(y_date_transaction_between_Long_Position), float(y_date_transaction_between_Short_Selling)]))  # 取中位數;
        elif (not ((y_date_transaction_between_Long_Position is None) or numpy.isnan(y_date_transaction_between_Long_Position))) and ((y_date_transaction_between_Short_Selling is None) or numpy.isnan(y_date_transaction_between_Short_Selling)):
            y_date_transaction_between = float(y_date_transaction_between_Long_Position)
        elif ((y_date_transaction_between_Long_Position is None) or numpy.isnan(y_date_transaction_between_Long_Position)) and (not ((y_date_transaction_between_Short_Selling is None) or numpy.isnan(y_date_transaction_between_Short_Selling))):
            y_date_transaction_between = float(y_date_transaction_between_Short_Selling)
        else:
            y_date_transaction_between = None  # float(float(y_date_transaction_between_Long_Position) + float(y_date_transaction_between_Short_Selling))
        if int(len(y_Long_Position_profit_Array)) > int(0):
            # y_Long_Position_profit = float(min(y_Long_Position_profit_Array))
            y_Long_Position_profit = float(sum(y_Long_Position_profit_Array))
        y_Long_Position_profit_Array = None  # 釋放内存;
        if int(len(y_Short_Selling_profit_Array)) > int(0):
            # y_Short_Selling_profit = float(min(y_Short_Selling_profit_Array))
            y_Short_Selling_profit = float(sum(y_Short_Selling_profit_Array))
        y_Short_Selling_profit_Array = None  # 釋放内存;
        if int(len(y_profit_Array)) > int(0):
            # y_profit = float(min(y_profit_Array))
            y_profit = float(sum(y_profit_Array))
        y_profit_Array = None  # 釋放内存;
        # y_profit = None  # float(0.0)  # float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
        if (not ((y_Long_Position_profit is None) or numpy.isnan(y_Long_Position_profit))) and (not ((y_Short_Selling_profit is None) or numpy.isnan(y_Short_Selling_profit))):
            y_profit = float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
        elif (not ((y_Long_Position_profit is None) or numpy.isnan(y_Long_Position_profit))) and ((y_Short_Selling_profit is None) or numpy.isnan(y_Short_Selling_profit)):
            y_profit = float(y_Long_Position_profit)
        elif ((y_Long_Position_profit is None) or numpy.isnan(y_Long_Position_profit)) and (not ((y_Short_Selling_profit is None) or numpy.isnan(y_Short_Selling_profit))):
            y_profit = float(y_Short_Selling_profit)
        else:
            y_profit = None  # float(float(y_Long_Position_profit) + float(y_Short_Selling_profit))  # 優化目標變量，利潤 × 權重;
        if int(len(y_Long_Position_loss_Array)) > int(0):
            y_Long_Position_loss = float(min(y_Long_Position_loss_Array))
        y_Long_Position_loss_Array = None  # 釋放内存;
        if int(len(y_Short_Selling_loss_Array)) > int(0):
            y_Short_Selling_loss = float(min(y_Short_Selling_loss_Array))
        y_Short_Selling_loss_Array = None  # 釋放内存;
        if int(len(y_loss_Array)) > int(0):
            y_loss = float(min(y_loss_Array))
        y_loss_Array = None  # 釋放内存;
        # y_loss = None  # float(0.0)  # float(min([float(y_Long_Position_loss), float(y_Short_Selling_loss)]))  # 優化目標變量，最大回撤 × 權重;
        if (not ((y_Long_Position_loss is None) or numpy.isnan(y_Long_Position_loss))) and (not ((y_Short_Selling_loss is None) or numpy.isnan(y_Short_Selling_loss))):
            y_loss = float(min([y_Long_Position_loss, y_Short_Selling_loss]))  # 兩次對衝交易之間的最大回撤值，取極值統計;
        elif (not ((y_Long_Position_loss is None) or numpy.isnan(y_Long_Position_loss))) and ((y_Short_Selling_loss is None) or numpy.isnan(y_Short_Selling_loss)):
            y_loss = float(y_Long_Position_loss)  # 兩次對衝交易之間的最大回撤值，取極值統計;
        elif ((y_Long_Position_loss is None) or numpy.isnan(y_Long_Position_loss)) and (not ((y_Short_Selling_loss is None) or numpy.isnan(y_Short_Selling_loss))):
            y_loss = float(y_Short_Selling_loss)  # 兩次對衝交易之間的最大回撤值，取極值統計;
        else:
            y_loss = None

        return_stepping_Dict["number_transaction_total"] = number_total
        return_stepping_Dict["number_transaction_total_Long_Position"] = number_total_Long_Position
        return_stepping_Dict["number_transaction_total_Short_Selling"] = number_total_Short_Selling
        return_stepping_Dict["maximum_drawdown"] = y_maximum_drawdown
        return_stepping_Dict["maximum_drawdown_Long_Position"] = y_maximum_drawdown_Long_Position
        return_stepping_Dict["maximum_drawdown_Short_Selling"] = y_maximum_drawdown_Short_Selling
        return_stepping_Dict["profit_total"] = y_total
        return_stepping_Dict["Long_Position_profit_total"] = y_total_Long_Position
        return_stepping_Dict["Short_Selling_profit_total"] = y_total_Short_Selling
        return_stepping_Dict["profit_Positive"] = y_Positive
        return_stepping_Dict["profit_Negative"] = y_Negative
        return_stepping_Dict["Long_Position_profit_Positive"] = y_Positive_Long_Position
        return_stepping_Dict["Long_Position_profit_Negative"] = y_Negative_Long_Position
        return_stepping_Dict["Short_Selling_profit_Positive"] = y_Positive_Short_Selling
        return_stepping_Dict["Short_Selling_profit_Negative"] = y_Negative_Short_Selling
        return_stepping_Dict["profit_Positive_probability"] = y_P_Positive
        return_stepping_Dict["profit_Negative_probability"] = y_P_Negative
        return_stepping_Dict["Long_Position_profit_Positive_probability"] = y_P_Positive_Long_Position
        return_stepping_Dict["Long_Position_profit_Negative_probability"] = y_P_Negative_Long_Position
        return_stepping_Dict["Short_Selling_profit_Positive_probability"] = y_P_Positive_Short_Selling
        return_stepping_Dict["Short_Selling_profit_Negative_probability"] = y_P_Negative_Short_Selling
        return_stepping_Dict["average_price_amplitude_date_transaction"] = y_amplitude
        return_stepping_Dict["Long_Position_average_price_amplitude_date_transaction"] = y_amplitude_Long_Position
        return_stepping_Dict["Short_Selling_average_price_amplitude_date_transaction"] = y_amplitude_Short_Selling
        return_stepping_Dict["average_volume_turnover_date_transaction"] = y_turnover
        return_stepping_Dict["Long_Position_average_volume_turnover_date_transaction"] = y_turnover_Long_Position
        return_stepping_Dict["Short_Selling_average_volume_turnover_date_transaction"] = y_turnover_Short_Selling
        return_stepping_Dict["average_date_transaction_between"] = y_date_transaction_between
        return_stepping_Dict["Long_Position_average_date_transaction_between"] = y_date_transaction_between_Long_Position
        return_stepping_Dict["Short_Selling_average_date_transaction_between"] = y_date_transaction_between_Short_Selling

        # 釋放内存;
        stepping_sequence_Array = None
        data_transaction_sequence_Dict = None
        profit_paired_data_transaction_sequence_Dict = None
        Array_PickStock_transaction_Long_Position = None
        Array_PickStock_transaction_Short_Selling = None
        number_transactions_total_Long_Position = None
        number_transactions_total_Short_Selling = None

        # print("number PickStock : ", return_stepping_Dict["number_PickStock"])
        # print("number PickStock Long Position : ", return_stepping_Dict["number_PickStock_Long_Position"])
        # print("number PickStock Short Selling : ", return_stepping_Dict["number_PickStock_Short_Selling"])
        # print("number transaction : ", return_stepping_Dict["number_transaction_total"])
        # print("number transaction Long Position : ", return_stepping_Dict["number_transaction_total_Long_Position"])
        # print("number transaction Short Selling : ", return_stepping_Dict["number_transaction_total_Short_Selling"])
        # print("maximum drawdown : ", return_stepping_Dict["maximum_drawdown"])
        # print("maximum drawdown Long Position : ", return_stepping_Dict["maximum_drawdown_Long_Position"])
        # print("maximum drawdown Short Selling : ", return_stepping_Dict["maximum_drawdown_Short_Selling"])
        # print("profit total : ", return_stepping_Dict["profit_total"])
        # print("Long Position profit total : ", return_stepping_Dict["Long_Position_profit_total"])
        # print("Short Selling profit total : ", return_stepping_Dict["Short_Selling_profit_total"])
        # print("profit Positive : ", return_stepping_Dict["profit_Positive"])
        # print("profit Negative : ", return_stepping_Dict["profit_Negative"])
        # print("Long Position profit Positive : ", return_stepping_Dict["Long_Position_profit_Positive"])
        # print("Long Position profit Negative : ", return_stepping_Dict["Long_Position_profit_Negative"])
        # print("Short Selling profit Positive : ", return_stepping_Dict["Short_Selling_profit_Positive"])
        # print("Short Selling profit Negative : ", return_stepping_Dict["Short_Selling_profit_Negative"])
        # print("profit Positive probability : ", return_stepping_Dict["profit_Positive_probability"])
        # print("profit Negative probability : ", return_stepping_Dict["profit_Negative_probability"])
        # print("Long Position profit Positive probability : ", return_stepping_Dict["Long_Position_profit_Positive_probability"])
        # print("Long Position profit Negative probability : ", return_stepping_Dict["Long_Position_profit_Negative_probability"])
        # print("Short Selling profit Positive probability : ", return_stepping_Dict["Short_Selling_profit_Positive_probability"])
        # print("Short Selling profit Negative probability : ", return_stepping_Dict["Short_Selling_profit_Negative_probability"])
        # print("average price amplitude date transaction : ", return_stepping_Dict["average_price_amplitude_date_transaction"])
        # print("Long Position average price amplitude date transaction : ", return_stepping_Dict["Long_Position_average_price_amplitude_date_transaction"])
        # print("Short Selling average price amplitude date transaction : ", return_stepping_Dict["Short_Selling_average_price_amplitude_date_transaction"])
        # print("average volume turnover date transaction : ", return_stepping_Dict["average_volume_turnover_date_transaction"])
        # print("Long Position average volume turnover date transaction : ", return_stepping_Dict["Long_Position_average_volume_turnover_date_transaction"])
        # print("Short Selling average volume turnover date transaction : ", return_stepping_Dict["Short_Selling_average_volume_turnover_date_transaction"])
        # print("average date transaction between : ", return_stepping_Dict["average_date_transaction_between"])
        # print("Long Position average date transaction between : ", return_stepping_Dict["Long_Position_average_date_transaction_between"])
        # print("Short Selling average date transaction between : ", return_stepping_Dict["Short_Selling_average_date_transaction_between"])
        # # print("PickStock Long Position Array :", "\n", return_stepping_Dict["PickStock_Long_Position"])
        # # print("PickStock Short Selling Array :", "\n", return_stepping_Dict["PickStock_Short_Selling"])
        # # print("PickStock Array :", "\n", return_stepping_Dict["PickStock"])
        # # print("profit paired transaction Dict :", "\n", return_stepping_Dict["profit_paired_transaction"])
        # # print("transaction sequence Dict :", "\n", return_stepping_Dict["transaction_sequence"])
        # # print("stepping sequence Array :", "\n", return_stepping_Dict["stepping_sequence"])

    # 繪圖;
    # https://matplotlib.org/stable/contents.html
    # 使用第三方擴展包「matplotlib」中的「pyplot()」函數繪製散點圖示;
    # import matplotlib  # as mpl
    # import matplotlib.pyplot as matplotlib_pyplot
    # import matplotlib.font_manager as matplotlib_font_manager  # 導入第三方擴展包「matplotlib」中的字體管理器，用於設置生成圖片中文字的字體;
    # %matplotlib inline
    # matplotlib.rcParams['font.sans-serif'] = ['SimHei']
    # matplotlib.rcParams['font.family'] = 'sans-serif'
    # matplotlib.rcParams['axes.unicode_minus'] = False
    # import mplfinance  # 導入第三方擴展包「mplfinance」，用於製作日棒缐（K Days Line）圖;
    # from mplfinance.original_flavor import candlestick_ohlc as mplfinance_original_flavor_candlestick_ohlc  # 從第三方擴展包「mplfinance」中導入「original_flavor」模組的「candlestick_ohlc()」函數，用於繪製股票作日棒缐（K Days Line）圖;
    # matplotlib.pyplot.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.Figure'>, clear=False, **kwargs)
    # 參數 figsize=(float,float) 表示繪圖板的長、寬數，預設值為 figsize=[6.4,4.8] 單位為英寸；參數 dpi=float 表示圖形分辨率，預設值為 dpi=100，單位為每平方英尺中的點數；參數 constrained_layout=True 設置子圖區域不要有重叠;
    fig = None
    if False:

        ticker_symbol = str("002611")  # 流通代碼;

        # import matplotlib  # as mpl
        import matplotlib.pyplot as matplotlib_pyplot
        # import mplfinance  # 導入第三方擴展包「mplfinance」，用於製作日棒缐（K Days Line）圖;
        # from mplfinance.original_flavor import candlestick_ohlc as mplfinance_original_flavor_candlestick_ohlc  # 從第三方擴展包「mplfinance」中導入「original_flavor」模組的「candlestick_ohlc()」函數，用於繪製股票作日棒缐（K Days Line）圖;

        fig = matplotlib_pyplot.figure(figsize=(16, 9), dpi=300, constrained_layout=True)  # 參數 constrained_layout=True 設置子圖區域不要有重叠
        # fig.tight_layout()  # 自動調整子圖參數，使之填充整個圖像區域;
        # matplotlib.pyplot.subplot2grid(shape, loc, rowspan=1, colspan=1, fig=None, **kwargs)
        # 參數 shape=(int,int) 表示創建網格行列數，傳入參數值類型為一維整型數組[int,int]；參數 loc=(int,int) 表示一個畫布所占網格起點的橫縱坐標，傳入參數值類型為一維整型數組[int,int]；參數 rowspan=1 表示該畫布占一行的長度，參數 colspan=1 表示該畫布占一列的寬度;
        axes_1 = matplotlib_pyplot.subplot2grid((2, 1), (0, 0), rowspan=1, colspan=1)  # 參數 (2,1) 表示創建 2 行 1 列的網格，參數 (0,0) 表示第一個畫布 axes_1 的起點在橫坐標為 0 縱坐標為 0 的網格，參數 rowspan=1 表示該畫布占一行的長度，參數 colspan=1 表示該畫布占一列的寬度;
        axes_2 = matplotlib_pyplot.subplot2grid((2, 1), (1, 0), rowspan=1, colspan=1)
        # 繪製擬合曲綫圖;
        # plot1 = matplotlib_pyplot.scatter(
        #     Xdata,
        #     Ydata,
        #     s=None,
        #     c='blue',
        #     edgecolors=None,
        #     linewidths=1,
        #     marker='o',
        #     alpha=0.5,
        #     label='observation values'
        # )  # 繪製散點圖;
        # # plot2 = matplotlib_pyplot.plot(Xdata, Yvals, color='red', linewidth=2.0, linestyle='-', label='polyfit values')  # 繪製折綫圖;
        # plot2 = matplotlib_pyplot.plot(
        #     Xnew,
        #     Ynew,
        #     color='red',
        #     linewidth=2.0,
        #     linestyle='-',
        #     alpha=1,
        #     label='polyfit values'
        # )  # 繪製平滑折綫圖;
        # matplotlib_pyplot.xticks(idx, Xdata)  # 設置顯示坐標橫軸刻度標簽;
        # matplotlib_pyplot.xlabel('Independent Variable ( x )')  # 設置顯示橫軸標題為 'Independent Variable ( x )'
        # matplotlib_pyplot.ylabel('Dependent Variable ( y )')  # 設置顯示縱軸標題為 'Dependent Variable ( y )'
        # matplotlib_pyplot.legend(loc=4)  # 設置顯示圖例（legend）的位置為圖片右下角，覆蓋圖片;
        # matplotlib_pyplot.title('4 parameter logistic model')  # 設置顯示圖標題;
        # matplotlib_pyplot.show()  # 顯示圖片;

        # 繪製訓練集折缐圖示;
        # img1 = None
        if isinstance(steppingData, dict) and int(len(steppingData)) > int(0):

            steppingData_index = steppingData[ticker_symbol]
            stepping_result = steppingData[ticker_symbol]  # return_stepping_Dict["stepping_sequence"][ticker_symbol]

            # 繪製均值散點圖;
            axes_1.scatter(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                steppingData_index["focus"],  # YdataMean,  # Ydata,
                s = 15,  # 點大小，取 0 表示不顯示;
                c = 'black',  # 點顔色;
                edgecolors = 'black',  # 邊顔色;  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidths = 0.25,  # 邊粗細;
                marker = 'o',  # 點標志;
                alpha = 1,  # 點透明度;
                label = ''
            )
            # axes_1.plot(Xdata, Yvals, color='red', linewidth=2.0, linestyle='-', label='polyfit values')  # 繪製折綫圖;
            # 繪製均值平滑折綫圖;
            axes_1.plot(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                steppingData_index["focus"],  # YdataMean,  # Yvals,
                color = 'black',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidth = 1.0,
                linestyle = '-',
                alpha = 1,
                label = 'focus'
            )
            # 繪製極小值平滑折綫圖;
            axes_1.plot(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                steppingData_index["low_price"],  # YvalsUncertaintyLower,
                color = 'black',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidth = 0.5,
                linestyle = ':',
                alpha = 1,
                label = 'low'
            )
            # 繪製極大值平滑折綫圖;
            axes_1.plot(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                steppingData_index["high_price"],  # YvalsUncertaintyUpper,
                color = 'black',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidth = 0.5,
                linestyle = ':',
                alpha = 1,
                label = 'high'
            )
            # 描繪曲綫的填充置信區間;
            axes_1.fill_between(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                # steppingData_index["focus"],  # YdataMean,  # Yvals,
                steppingData_index["low_price"],  # YvalsUncertaintyLower,
                steppingData_index["high_price"],  # YvalsUncertaintyUpper,
                color = 'grey',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linestyle = ':',
                linewidth = 0.5,
                alpha = 0.15,
            )
            # 繪製開盤值平滑折綫圖;
            axes_1.plot(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                steppingData_index["opening_price"],  # YvalsUncertaintyLower,
                color = 'black',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidth = 0.5,
                linestyle = ':',
                alpha = 1,
                label = 'low'
            )
            # 繪製收盤值平滑折綫圖;
            axes_1.plot(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                steppingData_index["close_price"],  # YvalsUncertaintyUpper,
                color = 'black',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidth = 0.5,
                linestyle = ':',
                alpha = 1,
                label = 'high'
            )
            # 描繪曲綫的填充置信區間;
            axes_1.fill_between(
                [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["date_transaction"])), int(1))],  # steppingData_index["date_transaction"],  # Xdata,
                # steppingData_index["focus"],  # YdataMean,  # Yvals,
                [float(min([float(steppingData_index["opening_price"][i]), float(steppingData_index["close_price"][i])])) for i in range(int(0), int(len(steppingData_index["focus"])), int(1))],  # steppingData_index["opening_price"],  # YvalsUncertaintyLower,
                [float(max([float(steppingData_index["opening_price"][i]), float(steppingData_index["close_price"][i])])) for i in range(int(0), int(len(steppingData_index["focus"])), int(1))],  # steppingData_index["close_price"],  # YvalsUncertaintyUpper,
                color = 'grey',  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linestyle = ':',
                linewidth = 0.5,
                alpha = 0.15,
            )
            # 繪製交易數據;
            buy_x = []
            # [int(stepping_result["Long_Position_date_transaction"][i][5]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))]
            # [int(stepping_result["Short_Selling_date_transaction"][i][5]) if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1))]
            buy_y = []
            # [float(stepping_result["Long_Position_date_transaction"][i][2]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))]
            # [float(stepping_result["Short_Selling_date_transaction"][i][2]) if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1))]
            buy_label = []
            # [str(str(stepping_result["Long_Position_date_transaction"][i][1]) * " " * str(stepping_result["Long_Position_date_transaction"][i][4])) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))]
            # [str(str(stepping_result["Short_Selling_date_transaction"][i][1]) * " " * str(stepping_result["Short_Selling_date_transaction"][i][4])) if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1))]
            for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1)):
                if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy"):
                    # buy_x.append(stepping_result["Long_Position_date_transaction"][i][0])  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    buy_x.append(int(stepping_result["Long_Position_date_transaction"][i][5]))
                    buy_y.append(float(stepping_result["Long_Position_date_transaction"][i][2]))
                    buy_label.append(str(str(stepping_result["Long_Position_date_transaction"][i][1]) * " " * str(stepping_result["Long_Position_date_transaction"][i][4])))
            # for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1)):
            #     if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("buy"):
            #         # buy_x.append(stepping_result["Short_Selling_date_transaction"][i][0])  # 使用 list.append() 函數在列表末尾追加推入新元素;
            #         buy_x.append(int(stepping_result["Short_Selling_date_transaction"][i][5]))
            #         buy_y.append(float(stepping_result["Short_Selling_date_transaction"][i][2]))
            #         buy_label.append(str(str(stepping_result["Short_Selling_date_transaction"][i][1]) * " " * str(stepping_result["Short_Selling_date_transaction"][i][4])))
            axes_1.scatter(
                buy_x,  # [int(stepping_result["Long_Position_date_transaction"][i][5]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))],  # [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["Long_Position_date_transaction"])), int(1))],  # steppingData_index["Long_Position_date_transaction"],  # Xdata,
                buy_y,  # [float(stepping_result["Long_Position_date_transaction"][i][2]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))],  # steppingData_index["focus"],  # YdataMean,  # Ydata,
                s = 15,  # 點大小，取 0 表示不顯示;
                c = 'red',  # 點顔色;
                edgecolors = 'red',  # 邊顔色;  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidths = 0.25,  # 邊粗細;
                marker = 'o',  # 點標志;
                alpha = 1,  # 點透明度;
                label = buy_label,  # [str(str(stepping_result["Long_Position_date_transaction"][i][1]) * " " * str(stepping_result["Long_Position_date_transaction"][i][4])) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("buy") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))],
            )
            sell_x = []
            # [int(stepping_result["Long_Position_date_transaction"][i][5]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))]
            # [int(stepping_result["Short_Selling_date_transaction"][i][5]) if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1))]
            sell_y = []
            # [float(stepping_result["Long_Position_date_transaction"][i][2]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))]
            # [float(stepping_result["Short_Selling_date_transaction"][i][2]) if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1))]
            sell_label = []
            # [str(str(stepping_result["Long_Position_date_transaction"][i][1]) * " " * str(stepping_result["Long_Position_date_transaction"][i][4])) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))]
            # [str(str(stepping_result["Short_Selling_date_transaction"][i][1]) * " " * str(stepping_result["Short_Selling_date_transaction"][i][4])) if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1))]
            for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1)):
                if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell"):
                    # sell_x.append(stepping_result["Long_Position_date_transaction"][i][0])  # 使用 list.append() 函數在列表末尾追加推入新元素;
                    sell_x.append(int(stepping_result["Long_Position_date_transaction"][i][5]))
                    sell_y.append(float(stepping_result["Long_Position_date_transaction"][i][2]))
                    sell_label.append(str(str(stepping_result["Long_Position_date_transaction"][i][1]) * " " * str(stepping_result["Long_Position_date_transaction"][i][4])))
            # for i in range(int(0), int(len(stepping_result["Short_Selling_date_transaction"])), int(1)):
            #     if str(stepping_result["Short_Selling_date_transaction"][i][1]) == str("sell"):
            #         # sell_x.append(stepping_result["Short_Selling_date_transaction"][i][0])  # 使用 list.append() 函數在列表末尾追加推入新元素;
            #         sell_x.append(int(stepping_result["Short_Selling_date_transaction"][i][5]))
            #         sell_y.append(float(stepping_result["Short_Selling_date_transaction"][i][2]))
            #         sell_label.append(str(str(stepping_result["Short_Selling_date_transaction"][i][1]) * " " * str(stepping_result["Short_Selling_date_transaction"][i][4])))
            axes_1.scatter(
                sell_x,  # [int(stepping_result["Long_Position_date_transaction"][i][5]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))],  # [int(int(i) + int(1)) for i in range(int(0), int(len(steppingData_index["Long_Position_date_transaction"])), int(1))],  # steppingData_index["Long_Position_date_transaction"],  # Xdata,
                sell_y,  # [float(stepping_result["Long_Position_date_transaction"][i][2]) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))],  # steppingData_index["focus"],  # YdataMean,  # Ydata,
                s = 15,  # 點大小，取 0 表示不顯示;
                c = 'green',  # 點顔色;
                edgecolors = 'green',  # 邊顔色;  # "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightpink", "lightsalmon"
                linewidths = 0.25,  # 邊粗細;
                marker = 'o',  # 點標志;
                alpha = 1,  # 點透明度;
                label = sell_label,  # [str(str(stepping_result["Long_Position_date_transaction"][i][1]) * " " * str(stepping_result["Long_Position_date_transaction"][i][4])) if str(stepping_result["Long_Position_date_transaction"][i][1]) == str("sell") else None for i in range(int(0), int(len(stepping_result["Long_Position_date_transaction"])), int(1))],
            )
            # 設置坐標軸標題
            axes_1.set_xlabel(
                'date transaction',  # 'Independent Variable ( x )',
                fontdict={"family": "Times New Roman", "size": 7},  # "family": "SimSun"
                fontsize='xx-small'
            )
            axes_1.set_ylabel(
                'price transaction',  # 'Dependent Variable ( y )',
                fontdict={"family": "Times New Roman", "size": 7},  # "family": "SimSun"
                fontsize='xx-small'
            )
            # # 確定橫縱坐標範圍;
            # axes_1.set_xlim(
            #     float(numpy.min(Xdata)) - float((numpy.max(Xdata) - numpy.min(Xdata)) * 0.1),
            #     float(numpy.max(Xdata)) + float((numpy.max(Xdata) - numpy.min(Xdata)) * 0.1)
            # )
            # axes_1.set_ylim(
            #     float(numpy.min(Ydata)) - float((numpy.max(Ydata) - numpy.min(Ydata)) * 0.1),
            #     float(numpy.max(Ydata)) + float((numpy.max(Ydata) - numpy.min(Ydata)) * 0.1)
            # )
            # # 設置坐標軸間隔和標簽
            # axes_1.set_xticks(Xdata)
            # # axes_1.set_xticklabels(
            # #     [
            # #         str(round(int(Xdata[0]), 0)),
            # #         str(round(int(Xdata[1]), 0)),
            # #         str(round(int(Xdata[2]), 0)),
            # #         str(round(int(Xdata[3]), 0)),
            # #         str(round(int(Xdata[4]), 0)),
            # #         str(round(int(Xdata[5]), 0)),
            # #         str(round(int(Xdata[6]), 0)),
            # #         str(round(int(Xdata[7]), 0)),
            # #         str(round(int(Xdata[8]), 0)),
            # #         str(round(int(Xdata[9]), 0)),
            # #         str(round(int(Xdata[10]), 0))
            # #     ],
            # #     rotation=0,
            # #     ha='center',
            # #     fontdict={"family": "SimSun", "size": 7},
            # #     fontsize='xx-small'
            # # )  # [str(round([0, 0.2, 0.4, 0.6, 0.8, 1][i], 1)) for i in range(len([0, 0.2, 0.4, 0.6, 0.8, 1]))]
            # axes_1.set_xticklabels(
            #     [str(round(int(Xdata[i]), 0)) for i in range(len(Xdata))],
            #     rotation=0,
            #     ha='center',
            #     fontdict={"family": "SimSun", "size": 7},
            #     fontsize='xx-small'
            # )
            for tl in axes_1.get_xticklabels():
                tl.set_rotation(0)
                tl.set_ha('center')
                tl.set_fontsize(7)
                tl.set_fontfamily('SimSun')
                # tl.set_color('red')
            # axes_1.set_yticks(YdataMean)  # Ydata;
            # # axes_1.set_yticklabels(
            # #     [
            # #         str(round(int(YdataMean[0]), 0)),
            # #         str(round(int(YdataMean[1]), 0)),
            # #         str(round(int(YdataMean[2]), 0)),
            # #         str(round(int(YdataMean[3]), 0)),
            # #         str(round(int(YdataMean[4]), 0)),
            # #         str(round(int(YdataMean[5]), 0)),
            # #         str(round(int(YdataMean[6]), 0)),
            # #         str(round(int(YdataMean[7]), 0)),
            # #         str(round(int(YdataMean[8]), 0)),
            # #         str(round(int(YdataMean[9]), 0)),
            # #         str(round(int(YdataMean[10]), 0))
            # #     ],
            # #     rotation=0,
            # #     ha='right',
            # #     fontdict={"family": "SimSun", "size": 7},
            # #     fontsize='xx-small'
            # # )  # [str(round([0, 0.2, 0.4, 0.6, 0.8, 1][i], 1)) for i in range(len([0, 0.2, 0.4, 0.6, 0.8, 1]))]
            # axes_1.set_yticklabels(
            #     [str(round(int(YdataMean[i]), 0)) for i in range(len(YdataMean))],
            #     rotation=0,
            #     ha='right',
            #     fontdict={"family": "SimSun", "size": 7},
            #     fontsize='xx-small'
            # )
            for tl in axes_1.get_yticklabels():
                tl.set_rotation(0)
                tl.set_ha('right')
                tl.set_fontsize(7)
                tl.set_fontfamily('SimSun')
                # tl.set_color('red')
            axes_1.grid(True, which='major', linestyle=':', color='grey', linewidth=0.25, alpha=0.3)  # which='minor'
            axes_1.legend(
                loc='lower right',
                shadow=False,
                frameon=False,
                edgecolor='grey',
                framealpha=0,
                facecolor="none",
                prop={"family": "Times New Roman", "size": 7},
                fontsize='xx-small'
            )  # best', 'upper left','center left' 在圖上顯示圖例標志 'x-large';
            axes_1.spines['left'].set_linewidth(0.1)
            # axes_1.spines['left'].set_visible(False)  # 去除邊框;
            axes_1.spines['top'].set_visible(False)
            axes_1.spines['right'].set_visible(False)
            # axes_1.spines['bottom'].set_visible(False)
            axes_1.spines['bottom'].set_linewidth(0.1)
            axes_1.set_title(
                "market timing model ( training )",
                fontdict={"family": "SimSun", "size": 7},
                fontsize='xx-small'
            )

            # # https://github.com/matplotlib/mplfinance
            # # 使用第三方擴展包「mplfinance」繪製日棒缐（K Days Line）圖;
            # # import mplfinance  # 導入第三方擴展包「mplfinance」，用於製作日棒缐（K Days Line）圖;
            # # from mplfinance.original_flavor import candlestick_ohlc as mplfinance_original_flavor_candlestick_ohlc  # 從第三方擴展包「mplfinance」中導入「original_flavor」模組的「candlestick_ohlc()」函數，用於繪製股票作日棒缐（K Days Line）圖;
            # mplfinance.plot(
            #     pandas.DataFrame({
            #         "Date": [str(item) for item in steppingData_index["date_transaction"]],  # steppingData_index["date_transaction"],
            #         "Open": steppingData_index["opening_price"],
            #         "High": steppingData_index["high_price"],
            #         "Low": steppingData_index["low_price"],
            #         "Close": steppingData_index["close_price"],
            #         "Volume": steppingData_index["turnover_volume"],
            #     }),
            #     type = "candle",  # 指定繪圖類型爲日棒缐圖（K Days Line），可取值：type="candle", type="line", type="renko", or type="pnf" ;
            #     mav = (
            #         # 1,  # 添加滑動平均缐（1 日）;
            #         5,  # 添加滑動平均缐（5 日~周）;
            #         20,  # 添加滑動平均缐（20 日~月）;
            #         60  # 添加滑動平均缐（60 日~季）;
            #     ),  # 添加滑動平均缐;
            #     volume = True,  # 添加成交量柱形圖;
            #     show_nontrading = False,  # 取 True 時，表示設定顯示非交易日，將非交易日添加爲空白;
            #     # study = [
            #     #     "macd",
            #     #     "rsi"
            #     # ],
            #     # macd_n_fast = 12,
            #     # macd_n_slow = 26,
            #     # rsi_n = 14,
            #     # style = mplfinance.make_mpf_style(
            #     #     gridaxis = "both",  # 設置圖片網格缐位置;
            #     #     gridstyle = "-.",  # 設置圖片網格缐形狀;
            #     #     y_on_right = False,  # 設置 y 軸位置是否在右側;
            #     #     marketcolors = mplfinance.make_marketcolors(
            #     #         up = "green",
            #     #         down = "red",
            #     #         edge = "i",  # 設置棒圖方框邊缐顔色，取 "i" 值，表示繼承參數：up、down 的顔色配置;
            #     #         wick = "i",  # 設置棒圖上下影缐顔色，，取 "i" 值，表示繼承參數：up、down 的顔色配置;
            #     #         volume = "in",  # 設置成交量柱形圖顔色;
            #     #         inherit = True  # 指定是否繼承;
            #     #     )
            #     # ),
            #     # savefig = {"fname": "stock_K_Days_Line.png"},  # 將圖片存儲爲硬盤文檔;
            #     ylabel = "transaction price",
            #     ylabel_lower = "shares\ntransaction volume",
            #     xlabel = "transaction date",
            #     title = "\nstock %s candle line" % (ticker_symbol),
            #     figratio = (15, 10),  # 設置圖片長、寬比;
            #     figscale = 5  # 設置圖片質量等級;
            # )

        # matplotlib_pyplot.xlabel('date transaction')  # 設置顯示橫軸標題為 'Independent Variable ( x )'
        # matplotlib_pyplot.ylabel('price transaction')  # 設置顯示縱軸標題為 'Dependent Variable ( y )'
        # # matplotlib_pyplot.legend(loc=4)  # 設置顯示圖例（legend）的位置為圖片右下角，覆蓋圖片;
        # matplotlib_pyplot.title('market timing model')  # 設置顯示圖標題;
        # # fig.savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
        # matplotlib_pyplot.show()  # 顯示圖片;
        # # plot_Thread = threading.Thread(target=matplotlib.pyplot.show, args=(), daemon=False)
        # # plot_Thread.start()
        # # matplotlib_pyplot.savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;

        return_stepping_Dict["fit-image"] = fig  # 擬合曲綫繪圖;

    return return_stepping_Dict



# # 函數使用示例;
# import pickle  # 導入 Python 原生模組「pickle」，用於將結構化的内存數據直接備份到硬盤二進制文檔，以及從硬盤文檔直接導入結構化内存數據;
# # import string  # 加載Python原生的字符串處理模組;
# # import time  # 加載Python原生的日期數據處理模組;
# # import datetime  # 加載Python原生的日期數據處理模組;
# # 將字典（Dict）類型數據，寫入磁盤（hide disk）的 Python 語言特有類型的 pickle 類型（.pickle）的變量存儲文檔;
# # 使用 pickle 模組，從保存到硬盤的（.pickle）文檔，導入 Python 結構化的數據;
# pickle_K_Line_Daily_file = "C:/QuantitativeTrading/Data/steppingData.pickle"
# stepping_data = None
# with open(pickle_K_Line_Daily_file, "rb") as f:
#     stepping_data = pickle.load(f)
#     f.close()
# # print(stepping_data)
# # # 使用 pickle 模組，將 Python 字典類型的數據，保存到硬盤（.pickle）文檔;
# # with open(pickle_K_Line_Daily_file, "wb") as f:
# #     pickle.dump(stepping_data, f)
# #     f.close()

# # training_data = {}
# # training_data = stepping_data

# # testing_data = {}
# # testing_data = stepping_data

# if not (isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0)):
#     print(str("Error : stepping test data sequence Dictionary unrecognize .") + "\n" + str("steppingData::Base.Dict{Core.String, Core.Any} .") + "\n")
#     exit(0)

# # # 優化求解擇時參數;
# # MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
# # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
# # Plower_weight_MarketTiming_Dict = {}
# # Pupper_weight_MarketTiming_Dict = {}
# # if isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0):
# #     for key, value in stepping_data.items():
# #         # print("Key: {key}, Value: {value}")
# #         if isinstance(value, dict) and ("date_transaction" in value and isinstance(value["date_transaction"], list)) and ("turnover_volume" in value and isinstance(value["turnover_volume"], list)) and ("opening_price" in value and isinstance(value["opening_price"], list)) and ("close_price" in value and isinstance(value["close_price"], list)) and ("low_price" in value and isinstance(value["low_price"], list)) and ("high_price" in value and isinstance(value["high_price"], list)) and ("focus" in value and isinstance(value["focus"], list)) and ("amplitude" in value and isinstance(value["amplitude"], list)) and ("amplitude_rate" in value and isinstance(value["amplitude_rate"], list)) and ("opening_price_Standardization" in value and isinstance(value["opening_price_Standardization"], list)) and ("closing_price_Standardization" in value and isinstance(value["closing_price_Standardization"], list)) and ("low_price_Standardization" in value and isinstance(value["low_price_Standardization"], list)) and ("high_price_Standardization" in value and isinstance(value["high_price_Standardization"], list)) and ("turnover_volume_growth_rate" in value and isinstance(value["turnover_volume_growth_rate"], list)) and ("opening_price_growth_rate" in value and isinstance(value["opening_price_growth_rate"], list)) and ("closing_price_growth_rate" in value and isinstance(value["closing_price_growth_rate"], list)) and ("closing_minus_opening_price_growth_rate" in value and isinstance(value["closing_minus_opening_price_growth_rate"], list)) and ("high_price_proportion" in value and isinstance(value["high_price_proportion"], list)) and ("low_price_proportion" in value and isinstance(value["low_price_proportion"], list)):

# #             x0 = value["date_transaction"]  # 交易日期;
# #             x1 = value["turnover_volume"]  # 成交量;
# #             # x2 = value["turnover_amount"]  # 成交總金額;
# #             x3 = value["opening_price"]  # 開盤成交價;
# #             x4 = value["close_price"]  # 收盤成交價;
# #             x5 = value["low_price"]  # 最低成交價;
# #             x6 = value["high_price"]  # 最高成交價;
# #             x7 = value["focus"]  # 當日成交價重心;
# #             x8 = value["amplitude"]  # 當日成交價絕對振幅;
# #             x9 = value["amplitude_rate"]  # 當日成交價相對振幅（%）;
# #             x10 = value["opening_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
# #             x11 = value["closing_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
# #             x12 = value["low_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
# #             x13 = value["high_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
# #             x14 = value["turnover_volume_growth_rate"]  # 成交量的成長率;
# #             x15 = value["opening_price_growth_rate"]  # 開盤價的成長率;
# #             x16 = value["closing_price_growth_rate"]  # 收盤價的成長率;
# #             x17 = value["closing_minus_opening_price_growth_rate"]  # 收盤價減開盤價的成長率;
# #             x18 = value["high_price_proportion"]  # 收盤價和開盤價裏的最大值占最高價的比例;
# #             x19 = value["low_price_proportion"]  # 最低價占收盤價和開盤價裏的最小值的比例;
# #             # x20 = value["turnover_rate"]  # 成交量換手率;
# #             # x21 = value["price_earnings"]  # 每股收益（公司經營利潤率 ÷ 股本）;
# #             # x22 = value["book_value_per_share"]  # 每股净值（公司净資產 ÷ 股本）;
# #             # x23 = value["capitalization"]  # 總市值;
# #             # x24 = value["moving_average_5"]  # 收盤價 5 日滑動平均缐;
# #             # x25 = value["moving_average_10"]  # 收盤價 10 日滑動平均缐;
# #             # x26 = value["moving_average_20"]  # 收盤價 20 日滑動平均缐;
# #             # x27 = value["moving_average_30"]  # 收盤價 30 日滑動平均缐;
# #             Pdata_0 = value["Pdata_0"]
# #             Plower = value["Plower"]
# #             Pupper = value["Pupper"]
# #             weight = value["weight"]

# #             # investment_method = "Long_Position"
# #             return_MarketTiming = MarketTiming(
# #                 training_data = {
# #                     str(key) : {
# #                         "date_transaction": x0,
# #                         "turnover_volume": x1,
# #                         "opening_price": x3,
# #                         "close_price": x4,
# #                         "low_price": x5,
# #                         "high_price": x6,
# #                         "focus": x7,
# #                         "amplitude": x8,
# #                         "amplitude_rate": x9,
# #                         "opening_price_Standardization": x10,
# #                         "closing_price_Standardization": x11,
# #                         "low_price_Standardization": x12,
# #                         "high_price_Standardization": x13,
# #                         "turnover_volume_growth_rate": x14,
# #                         "opening_price_growth_rate": x15,
# #                         "closing_price_growth_rate": x16,
# #                         "closing_minus_opening_price_growth_rate": x17,
# #                         "high_price_proportion": x18,
# #                         "low_price_proportion": x19,
# #                         "Pdata_0": Pdata_0,
# #                         "Plower": Plower,
# #                         "Pupper": Pupper,
# #                         "weight": weight
# #                     }
# #                 },
# #                 testing_data = {
# #                     str(key) : {
# #                         "date_transaction": x0,
# #                         "turnover_volume": x1,
# #                         "opening_price": x3,
# #                         "close_price": x4,
# #                         "low_price": x5,
# #                         "high_price": x6,
# #                         "focus": x7,
# #                         "amplitude": x8,
# #                         "amplitude_rate": x9,
# #                         "opening_price_Standardization": x10,
# #                         "closing_price_Standardization": x11,
# #                         "low_price_Standardization": x12,
# #                         "high_price_Standardization": x13,
# #                         "turnover_volume_growth_rate": x14,
# #                         "opening_price_growth_rate": x15,
# #                         "closing_price_growth_rate": x16,
# #                         "closing_minus_opening_price_growth_rate": x17,
# #                         "high_price_proportion": x18,
# #                         "low_price_proportion": x19,
# #                         "Pdata_0": Pdata_0,
# #                         "Plower": Plower,
# #                         "Pupper": Pupper,
# #                         "weight": weight
# #                     }
# #                 },
# #                 Pdata_0 = [int(3), float(+0.1), float(-0.1), float(0.0)],  # [Pdata_0[1], Pdata_0[2], Pdata_0[3], Pdata_0[4]],  # Pdata_0, # value["Pdata_0"],
# #                 weight = [],  # weight,  # value["weight"],
# #                 Plower = [-math.inf, -math.inf, -math.inf, -math.inf],  # [Plower[1], Plower[2], Plower[3], Plower[4]],  # Plower, # value["Plower"],
# #                 Pupper = [+math.inf, +math.inf, +math.inf, +math.inf],  # [Pupper[1], Pupper[2], Pupper[3], Pupper[4]],  # Pupper, # value["Pupper"],
# #                 MarketTiming_fit_model = MarketTiming_fit_model,
# #                 Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
# #                 investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# #             )
# #             # return_MarketTiming == {
# #             #     "ticker_symbol" : {
# #             #         "Coefficient": coefficient_from_fit,  # 最優化計算之後得到的參數;
# #             #         "y_profit": y_profit,  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# #             #         "y_Long_Position_profit": y_Long_Position_profit,  # 優化目標變量;
# #             #         "y_Short_Selling_profit": y_Short_Selling_profit,  # 優化目標變量;
# #             #         "y_loss": y_loss,  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# #             #         "y_Long_Position_loss": y_Long_Position_loss,  # 優化目標變量;
# #             #         "y_Short_Selling_loss": y_Short_Selling_loss,  # 優化目標變量;
# #             #         "profit_total": y_total,  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #             #         "Long_Position_profit_total": y_total_Long_Position,  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #             #         "Short_Selling_profit_total": y_total_Short_Selling,  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #             #         "profit_Positive": y_Positive,  # 每兩次對衝交易收益纍加總計;
# #             #         "Long_Position_profit_Positive": y_Positive_Long_Position,  # 每兩次對衝交易收益纍加總計;
# #             #         "Short_Selling_profit_Positive": y_Positive_Short_Selling,  # 每兩次對衝交易收益纍加總計;
# #             #         "profit_Positive_probability": y_P_Positive,  # 每兩次對衝交易正利潤概率;
# #             #         "Long_Position_profit_Positive_probability": y_P_Positive_Long_Position,  # 每兩次對衝交易正利潤概率;
# #             #         "Short_Selling_profit_Positive_probability": y_P_Positive_Short_Selling,  # 每兩次對衝交易正利潤概率;
# #             #         "profit_Negative": y_Negative,  # 每兩次對衝交易損失纍加總計;
# #             #         "Long_Position_profit_Negative": y_Negative_Long_Position,  # 每兩次對衝交易損失纍加總計;
# #             #         "Short_Selling_profit_Negative": y_Negative_Short_Selling,  # 每兩次對衝交易損失纍加總計;
# #             #         "profit_Negative_probability": y_P_Negative,  # 每兩次對衝交易負利潤概率;
# #             #         "Long_Position_profit_Negative_probability": y_P_Negative_Long_Position,  # 每兩次對衝交易負利潤概率;
# #             #         "Short_Selling_profit_Negative_probability": y_P_Negative_Short_Selling,  # 每兩次對衝交易負利潤概率;
# #             #         "Long_Position_profit_date_transaction": y_A_Long_Position,  # 每兩次對衝交易利潤，向量;
# #             #         "Short_Selling_profit_date_transaction": y_A_Short_Selling,  # 每兩次對衝交易利潤，向量;
# #             #         "maximum_drawdown": y_maximum_drawdown,  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #             #         "maximum_drawdown_Long_Position": y_maximum_drawdown_Long_Position,  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #             #         "maximum_drawdown_Short_Selling": y_maximum_drawdown_Short_Selling,  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #             #         "Long_Position_drawdown_date_transaction": y_H_Long_Position,  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# #             #         "Short_Selling_drawdown_date_transaction": y_H_Short_Selling,  # 向量，記錄做空模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# #             #         "average_price_amplitude_date_transaction": y_amplitude,  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #             #         "Long_Position_average_price_amplitude_date_transaction": y_amplitude_Long_Position,  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #             #         "Short_Selling_average_price_amplitude_date_transaction": y_amplitude_Short_Selling,  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #             #         "Long_Position_price_amplitude_date_transaction": y_D_Long_Position,  # 兩次對衝交易日成交價振幅平方和，向量;
# #             #         "Short_Selling_price_amplitude_date_transaction": y_D_Short_Selling,  # 兩次對衝交易日成交價振幅平方和，向量;
# #             #         "average_volume_turnover_date_transaction": y_turnover,  # 兩次對衝交易日成交量（換手率）均值;
# #             #         "Long_Position_average_volume_turnover_date_transaction": y_turnover_Long_Position,  # 兩次對衝交易日成交量（換手率）均值;
# #             #         "Short_Selling_average_volume_turnover_date_transaction": y_turnover_Short_Selling,  # 兩次對衝交易日成交量（換手率）均值;
# #             #         "Long_Position_volume_turnover_date_transaction": y_E_Long_Position,  # 兩次對衝交易日成交量（換手率）向量;
# #             #         "Short_Selling_volume_turnover_date_transaction": y_E_Short_Selling,  # 兩次對衝交易日成交量（換手率）向量;
# #             #         "average_date_transaction_between": y_date_transaction_between,  # 兩次對衝交易間隔日長，均值;
# #             #         "Long_Position_average_date_transaction_between": y_date_transaction_between_Long_Position,  # 兩次對衝交易間隔日長，均值;
# #             #         "Short_Selling_average_date_transaction_between": y_date_transaction_between_Short_Selling,  # 兩次對衝交易間隔日長，均值;
# #             #         "Long_Position_date_transaction_between": y_C_Long_Position,  # 兩次對衝交易間隔日長，向量;
# #             #         "Short_Selling_date_transaction_between": y_C_Short_Selling,  # 兩次對衝交易間隔日長，向量;
# #             #         "Long_Position_date_transaction": y_F_Long_Position,  # 按規則執行交易的日期，向量;
# #             #         "Short_Selling_date_transaction": y_F_Short_Selling,  # 按規則執行交易的日期，向量;
# #             #         "P1_Array": P1_Array,  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# #             #         "revenue_and_expenditure_records_date_transaction": y_G,  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# #             #         "weight_MarketTiming": weight_MarketTiming_Dict
# #             #     }
# #             # }
# #             # print(return_MarketTiming[key]["Coefficient"])  # 最優化計算之後得到的參數;
# #             # print(return_MarketTiming[key]["y_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# #             # print(return_MarketTiming[key]["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# #             # print(return_MarketTiming[key]["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 頻率 × 權重，加權纍加總計;
# #             # print(return_MarketTiming[key]["y_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# #             # print(return_MarketTiming[key]["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# #             # print(return_MarketTiming[key]["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 頻率 × 權重，加權取極值總計;
# #             # print(return_MarketTiming[key]["profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# #             # print(return_MarketTiming[key]["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# #             # print(return_MarketTiming[key]["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 頻率，纍加總計;
# #             # print(return_MarketTiming[key]["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #             # print(return_MarketTiming[key]["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #             # print(return_MarketTiming[key]["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #             # print(return_MarketTiming[key]["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #             # print(return_MarketTiming[key]["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #             # print(return_MarketTiming[key]["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #             # print(return_MarketTiming[key]["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #             # print(return_MarketTiming[key]["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #             # print(return_MarketTiming[key]["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #             # print(return_MarketTiming[key]["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #             # print(return_MarketTiming[key]["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #             # print(return_MarketTiming[key]["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #             # print(return_MarketTiming[key]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# #             # print(return_MarketTiming[key]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# #             # print(return_MarketTiming[key]["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #             # print(return_MarketTiming[key]["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #             # print(return_MarketTiming[key]["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #             # print(return_MarketTiming[key]["Long_Position_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# #             # print(return_MarketTiming[key]["Short_Selling_drawdown_date_transaction"])  # 向量，記錄做多模式每組對衝交易日的回撤值序列，風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# #             # print(return_MarketTiming[key]["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #             # print(return_MarketTiming[key]["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #             # print(return_MarketTiming[key]["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #             # print(return_MarketTiming[key]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# #             # print(return_MarketTiming[key]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# #             # print(return_MarketTiming[key]["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #             # print(return_MarketTiming[key]["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #             # print(return_MarketTiming[key]["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #             # print(return_MarketTiming[key]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# #             # print(return_MarketTiming[key]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# #             # print(return_MarketTiming[key]["average_date_transaction_between"])  # 兩次交易間隔日長，均值;
# #             # print(return_MarketTiming[key]["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #             # print(return_MarketTiming[key]["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# #             # print(return_MarketTiming[key]["weight_MarketTiming"])  # 擇時權重，每兩次對衝交易的盈利概率占比;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# #             # print(return_MarketTiming[key]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# #             # print(return_MarketTiming[key]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# #             # print(return_MarketTiming[key]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# #             # print(return_MarketTiming[key]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# #             # MarketTiming_Parameter[str(key)] = {}
# #             if isinstance(MarketTiming_Parameter, dict) and str(key) in MarketTiming_Parameter:
# #                 if isinstance(MarketTiming_Parameter[str(key)], dict):
# #                     MarketTiming_Parameter[str(key)]["Long_Position"] = return_MarketTiming[key]["Coefficient"]
# #             elif isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
# #                 MarketTiming_Parameter[str(key)] = {}
# #                 MarketTiming_Parameter[str(key)]["Long_Position"] = return_MarketTiming[key]["Coefficient"]
# #             # else:
# #             if isinstance(weight_MarketTiming_Dict, dict) and str(key) in weight_MarketTiming_Dict:
# #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
# #                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["weight_MarketTiming"]["Long_Position"]  # 依照擇時規則交易倉位參數的存儲字典;
# #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
# #                 weight_MarketTiming_Dict[str(key)] = {}
# #                 weight_MarketTiming_Dict[str(key)]["Long_Position"] = return_MarketTiming[key]["weight_MarketTiming"]["Long_Position"]  # 依照擇時規則交易倉位參數的存儲字典;
# #             # else:
# #             if isinstance(Plower_weight_MarketTiming_Dict, dict) and str(key) in Plower_weight_MarketTiming_Dict:
# #                 if isinstance(Plower_weight_MarketTiming_Dict[str(key)], dict):
# #                     Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
# #             elif isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
# #                 Plower_weight_MarketTiming_Dict[str(key)] = {}
# #                 Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
# #             # else:
# #             if isinstance(Pupper_weight_MarketTiming_Dict, dict) and str(key) in Pupper_weight_MarketTiming_Dict:
# #                 if isinstance(Pupper_weight_MarketTiming_Dict[str(key)], dict):
# #                     Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
# #             elif isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
# #                 Pupper_weight_MarketTiming_Dict[str(key)] = {}
# #                 Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
# #             # else:
# #             return_MarketTiming = None  # 釋放内存;

# #             # investment_method = "Short_Selling"
# #             return_MarketTiming = MarketTiming(
# #                 training_data = {
# #                     str(key) : {
# #                         "date_transaction": x0,
# #                         "turnover_volume": x1,
# #                         "opening_price": x3,
# #                         "close_price": x4,
# #                         "low_price": x5,
# #                         "high_price": x6,
# #                         "focus": x7,
# #                         "amplitude": x8,
# #                         "amplitude_rate": x9,
# #                         "opening_price_Standardization": x10,
# #                         "closing_price_Standardization": x11,
# #                         "low_price_Standardization": x12,
# #                         "high_price_Standardization": x13,
# #                         "turnover_volume_growth_rate": x14,
# #                         "opening_price_growth_rate": x15,
# #                         "closing_price_growth_rate": x16,
# #                         "closing_minus_opening_price_growth_rate": x17,
# #                         "high_price_proportion": x18,
# #                         "low_price_proportion": x19,
# #                         "Pdata_0": Pdata_0,
# #                         "Plower": Plower,
# #                         "Pupper": Pupper,
# #                         "weight": weight
# #                     }
# #                 },
# #                 testing_data = {
# #                     str(key) : {
# #                         "date_transaction": x0,
# #                         "turnover_volume": x1,
# #                         "opening_price": x3,
# #                         "close_price": x4,
# #                         "low_price": x5,
# #                         "high_price": x6,
# #                         "focus": x7,
# #                         "amplitude": x8,
# #                         "amplitude_rate": x9,
# #                         "opening_price_Standardization": x10,
# #                         "closing_price_Standardization": x11,
# #                         "low_price_Standardization": x12,
# #                         "high_price_Standardization": x13,
# #                         "turnover_volume_growth_rate": x14,
# #                         "opening_price_growth_rate": x15,
# #                         "closing_price_growth_rate": x16,
# #                         "closing_minus_opening_price_growth_rate": x17,
# #                         "high_price_proportion": x18,
# #                         "low_price_proportion": x19,
# #                         "Pdata_0": Pdata_0,
# #                         "Plower": Plower,
# #                         "Pupper": Pupper,
# #                         "weight": weight
# #                     }
# #                 },
# #                 Pdata_0 = [int(3), float(+0.1), float(-0.1), float(0.0)],  # [Pdata_0[1], Pdata_0[2], Pdata_0[3], Pdata_0[4]],  # Pdata_0, # value["Pdata_0"],
# #                 weight = [],  # weight,  # value["weight"],
# #                 Plower = [-math.inf, -math.inf, -math.inf, -math.inf],  # [Plower[1], Plower[2], Plower[3], Plower[4]],  # Plower, # value["Plower"],
# #                 Pupper = [+math.inf, +math.inf, +math.inf, +math.inf],  # [Pupper[1], Pupper[2], Pupper[3], Pupper[4]],  # Pupper, # value["Pupper"],
# #                 MarketTiming_fit_model = MarketTiming_fit_model,
# #                 Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
# #                 investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# #             )
# #             if isinstance(MarketTiming_Parameter, dict) and str(key) in MarketTiming_Parameter:
# #                 if isinstance(MarketTiming_Parameter[str(key)], dict):
# #                     MarketTiming_Parameter[str(key)]["Short_Selling"] = return_MarketTiming[key]["Coefficient"]
# #             elif isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
# #                 MarketTiming_Parameter[str(key)] = {}
# #                 MarketTiming_Parameter[str(key)]["Short_Selling"] = return_MarketTiming[key]["Coefficient"]
# #             # else:
# #             if isinstance(weight_MarketTiming_Dict, dict) and str(key) in weight_MarketTiming_Dict:
# #                 if isinstance(weight_MarketTiming_Dict[str(key)], dict):
# #                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["weight_MarketTiming"]["Short_Selling"]  # 依照擇時規則交易倉位參數的存儲字典;
# #             elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
# #                 weight_MarketTiming_Dict[str(key)] = {}
# #                 weight_MarketTiming_Dict[str(key)]["Short_Selling"] = return_MarketTiming[key]["weight_MarketTiming"]["Short_Selling"]  # 依照擇時規則交易倉位參數的存儲字典;
# #             # else:
# #             if isinstance(Plower_weight_MarketTiming_Dict, dict) and str(key) in Plower_weight_MarketTiming_Dict:
# #                 if isinstance(Plower_weight_MarketTiming_Dict[str(key)], dict):
# #                     Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
# #             elif isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
# #                 Plower_weight_MarketTiming_Dict[str(key)] = {}
# #                 Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
# #             # else:
# #             if isinstance(Pupper_weight_MarketTiming_Dict, dict) and str(key) in Pupper_weight_MarketTiming_Dict:
# #                 if isinstance(Pupper_weight_MarketTiming_Dict[str(key)], dict):
# #                     Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
# #             elif isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
# #                 Pupper_weight_MarketTiming_Dict[str(key)] = {}
# #                 Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
# #             # else:
# #             return_MarketTiming = None  # 釋放内存;
# # # print(MarketTiming_Parameter)
# # # print(weight_MarketTiming_Dict)
# # # print(Plower_weight_MarketTiming_Dict)
# # # print(Pupper_weight_MarketTiming_Dict)

# # # 優化求解選股參數;
# # PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
# # PickStock_ticker_symbol = []
# # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
# # Plower_weight_PickStock_Dict = {}
# # Pupper_weight_PickStock_Dict = {}
# # if isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0):

# #     # x0 = stepping_data["ticker_symbol"]["date_transaction"]  # 交易日期;
# #     # x1 = stepping_data["ticker_symbol"]["turnover_volume"]  # 成交量;
# #     # # x2 = stepping_data["ticker_symbol"]["turnover_amount"]  # 成交總金額;
# #     # x3 = stepping_data["ticker_symbol"]["opening_price"]  # 開盤成交價;
# #     # x4 = stepping_data["ticker_symbol"]["close_price"]  # 收盤成交價;
# #     # x5 = stepping_data["ticker_symbol"]["low_price"]  # 最低成交價;
# #     # x6 = stepping_data["ticker_symbol"]["high_price"]  # 最高成交價;
# #     # x7 = stepping_data["ticker_symbol"]["focus"]  # 當日成交價重心;
# #     # x8 = stepping_data["ticker_symbol"]["amplitude"]  # 當日成交價絕對振幅;
# #     # x9 = stepping_data["ticker_symbol"]["amplitude_rate"]  # 當日成交價相對振幅（%）;
# #     # x10 = stepping_data["ticker_symbol"]["opening_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
# #     # x11 = stepping_data["ticker_symbol"]["closing_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
# #     # x12 = stepping_data["ticker_symbol"]["low_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
# #     # x13 = stepping_data["ticker_symbol"]["high_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
# #     # x14 = stepping_data["ticker_symbol"]["turnover_volume_growth_rate"]  # 成交量的成長率;
# #     # x15 = stepping_data["ticker_symbol"]["opening_price_growth_rate"]  # 開盤價的成長率;
# #     # x16 = stepping_data["ticker_symbol"]["closing_price_growth_rate"]  # 收盤價的成長率;
# #     # x17 = stepping_data["ticker_symbol"]["closing_minus_opening_price_growth_rate"]  # 收盤價減開盤價的成長率;
# #     # x18 = stepping_data["ticker_symbol"]["high_price_proportion"]  # 收盤價和開盤價裏的最大值占最高價的比例;
# #     # x19 = stepping_data["ticker_symbol"]["low_price_proportion"]  # 最低價占收盤價和開盤價裏的最小值的比例;
# #     # # x20 = stepping_data["ticker_symbol"]["turnover_rate"]  # 成交量換手率;
# #     # # x21 = stepping_data["ticker_symbol"]["price_earnings"]  # 每股收益（公司經營利潤率 ÷ 股本）;
# #     # # x22 = stepping_data["ticker_symbol"]["book_value_per_share"]  # 每股净值（公司净資產 ÷ 股本）;
# #     # # x23 = stepping_data["ticker_symbol"]["capitalization"]  # 總市值;
# #     # # x24 = stepping_data["ticker_symbol"]["moving_average_5"]  # 收盤價 5 日滑動平均缐;
# #     # # x25 = stepping_data["ticker_symbol"]["moving_average_10"]  # 收盤價 10 日滑動平均缐;
# #     # # x26 = stepping_data["ticker_symbol"]["moving_average_20"]  # 收盤價 20 日滑動平均缐;
# #     # # x27 = stepping_data["ticker_symbol"]["moving_average_30"]  # 收盤價 30 日滑動平均缐;
# #     # Pdata_0 = stepping_data["ticker_symbol"]["Pdata_0"]
# #     # Plower = stepping_data["ticker_symbol"]["Plower"]
# #     # Pupper = stepping_data["ticker_symbol"]["Pupper"]
# #     # weight = stepping_data["ticker_symbol"]["weight"]
# #     # Pdata_0 = stepping_data["Pdata_0"]
# #     # Plower = stepping_data["Plower"]
# #     # Pupper = stepping_data["Pupper"]
# #     # weight = stepping_data["weight"]

# #     # investment_method = "Long_Position"
# #     return_PickStock = PickStock(
# #         training_data = stepping_data,
# #         testing_data = stepping_data,
# #         Pdata_0 = [int(3), int(10)],  # [Pdata_0[1], Pdata_0[2]],  # Pdata_0, # value["Pdata_0"],
# #         weight = [],  # weight,  # value["weight"],
# #         Plower = [-math.inf, -math.inf],  # [Plower[1], Plower[2]],  # Plower, # value["Plower"],
# #         Pupper = [+math.inf, +math.inf],  # [Pupper[1], Pupper[2]],  # Pupper, # value["Pupper"],
# #         MarketTiming_Parameter = MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;
# #         PickStock_fit_model = PickStock_fit_model,
# #         MarketTiming = MarketTiming,
# #         MarketTiming_fit_model = MarketTiming_fit_model,
# #         Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
# #         investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# #     )
# #     # print("optimization - coefficient : ", return_PickStock["Coefficient"])  # 最優化計算之後得到的參數;
# #     # print("optimization - coefficient StandardDeviation : ", return_PickStock["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
# #     # print("optimization - coefficient Confidence Lower 95% : ", return_PickStock["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
# #     # print("optimization - coefficient Confidence Upper 95% : ", return_PickStock["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
# #     # print("y - fit : ", return_PickStock["Yfit"])  # 擬合 y 值;
# #     # print("y - fit Uncertainty Lower : ", return_PickStock["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
# #     # print("y - fit Uncertainty Upper : ", return_PickStock["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
# #     # print("residual : ", return_PickStock["Residual"])  # 擬合殘差;
# #     # print("optimization - y_profit : ", return_PickStock["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# #     # print("Long Position optimization - y_profit : ", return_PickStock["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# #     # print("Short Selling optimization - y_profit : ", return_PickStock["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# #     # print("optimization - y_loss : ", return_PickStock["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# #     # print("Long Position optimization - y_loss : ", return_PickStock["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# #     # print("Short Selling optimization - y_loss : ", return_PickStock["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# #     # print("maximum_drawdown : ", return_PickStock["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #     # print("maximum_drawdown_Long_Position : ", return_PickStock["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #     # print("maximum_drawdown_Short_Selling : ", return_PickStock["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #     # print("profit total per share : ", return_PickStock["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("Long Position profit total per share : ", return_PickStock["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("Short Selling profit total per share : ", return_PickStock["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("profit Positive : ", return_PickStock["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #     # print("Long Position profit Positive : ", return_PickStock["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #     # print("Short Selling_profit Positive : ", return_PickStock["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #     # print("profit Positive probability : ", return_PickStock["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #     # print("Long Position profit Positive probability : ", return_PickStock["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #     # print("Short Selling profit Positive probability : ", return_PickStock["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #     # print("profit Negative : ", return_PickStock["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #     # print("Long Position profit Negative : ", return_PickStock["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #     # print("Short Selling profit Negative : ", return_PickStock["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #     # print("profit Negative probability : ", return_PickStock["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #     # print("Long Position profit Negative probability : ", return_PickStock["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #     # print("Short Selling profit Negative probability : ", return_PickStock["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #     # print("average price amplitude date transaction : ", return_PickStock["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #     # print("Long Position average price amplitude date transaction : ", return_PickStock["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #     # print("Short Selling average price amplitude date transaction : ", return_PickStock["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #     # print("average volume turnover date transaction : ", return_PickStock["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #     # print("Long Position average volume turnover date transaction : ", return_PickStock["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #     # print("Short Selling average volume turnover date transaction : ", return_PickStock["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #     # print("average date transaction between : ", return_PickStock["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #     # print("Long Position average date transaction between : ", return_PickStock["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #     # print("Short Selling average date transaction between : ", return_PickStock["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #     # print("number PickStock transaction : ", return_PickStock["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
# #     # print("weight_PickStock : ", return_PickStock["weight_PickStock"])  # 選股權重，每隻股票的盈利概率占比;
# #     # print("pick stock sort ticker symbol : ", return_PickStock["PickStock_sort"]["ticker_symbol"])  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
# #     # print("pick stock sort score : ", return_PickStock["PickStock_sort"]["score"])  # 依照選股規則排序篩選出的股票得分值存儲數組;
# #     # print(return_PickStock["PickStock_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# #     # print(return_PickStock["PickStock_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# #     # print("test profit estimate : ", return_PickStock["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("test odds ratio estimate : ", return_PickStock["test_odds_ratio"])
# #     # print("test date transaction between : ", return_PickStock["test_date_transaction_between"])
# #     # # print(return_PickStock["testData"])  # 傳入測試數據集的計算結果;
# #     # print("test profit total per share : ", return_PickStock["testData"]["profit_total"])
# #     # print("test Long Position profit total per share : ", return_PickStock["testData"]["Long_Position_profit_total"])
# #     # print("test Short Selling profit total per share : ", return_PickStock["testData"]["Short_Selling_profit_total"])
# #     # print("test profit positive per share : ", return_PickStock["testData"]["profit_Positive"])
# #     # print("test Long Position profit positive per share : ", return_PickStock["testData"]["Long_Position_profit_Positive"])
# #     # print("test Short Selling profit positive per share : ", return_PickStock["testData"]["Short_Selling_profit_Positive"])
# #     # print("test profit positive probability : ", return_PickStock["testData"]["profit_Positive_probability"])
# #     # print("test Long Position profit positive probability : ", return_PickStock["testData"]["Long_Position_profit_Positive_probability"])
# #     # print("test Short Selling profit positive probability : ", return_PickStock["testData"]["Short_Selling_profit_Positive_probability"])
# #     # print("test profit negative per share : ", return_PickStock["testData"]["profit_Negative"])
# #     # print("test Long Position profit negative per share : ", return_PickStock["testData"]["Long_Position_profit_Negative"])
# #     # print("test Short Selling profit negative per share : ", return_PickStock["testData"]["Short_Selling_profit_Negative"])
# #     # print("test profit negative probability : ", return_PickStock["testData"]["profit_Negative_probability"])
# #     # print("test Long Position profit negative probability : ", return_PickStock["testData"]["Long_Position_profit_Negative_probability"])
# #     # print("test Short Selling profit negative probability : ", return_PickStock["testData"]["Short_Selling_profit_Negative_probability"])
# #     # print("test average date transaction between : ", return_PickStock["testData"]["average_date_transaction_between"])
# #     # print("test Long Position average date transaction between : ", return_PickStock["testData"]["Long_Position_average_date_transaction_between"])
# #     # print("test Short Selling average date transaction between : ", return_PickStock["testData"]["Short_Selling_average_date_transaction_between"])
# #     # print("test number_PickStock_transaction : ", return_PickStock["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
# #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["P1_Array"])
# #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
# #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
# #     # # print(return_PickStock["testData"]["PickStock_transaction_sequence"]["002611"])
# #     # PickStock_Parameter = {}
# #     PickStock_Parameter["Long_Position"] = return_PickStock["Coefficient"]
# #     PickStock_ticker_symbol = return_PickStock["PickStock_sort"]["ticker_symbol"]
# #     for key, value in return_PickStock["weight_PickStock"].items():
# #         # print("Key: {key}, Value: {value}")
# #         if isinstance(value, dict) and "Long_Position" in value:
# #             if isinstance(weight_PickStock_Dict, dict) and str(key) in weight_PickStock_Dict:
# #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
# #                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
# #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
# #                 weight_PickStock_Dict[str(key)] = {}
# #                 weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
# #             # else:
# #             if isinstance(Plower_weight_PickStock_Dict, dict) and str(key) in Plower_weight_PickStock_Dict:
# #                 if isinstance(Plower_weight_PickStock_Dict[str(key)], dict):
# #                     Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
# #             elif isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
# #                 Plower_weight_PickStock_Dict[str(key)] = {}
# #                 Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
# #             # else:
# #             if isinstance(Pupper_weight_PickStock_Dict, dict) and str(key) in Pupper_weight_PickStock_Dict:
# #                 if isinstance(Pupper_weight_PickStock_Dict[str(key)], dict):
# #                     Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
# #             elif isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
# #                 Pupper_weight_PickStock_Dict[str(key)] = {}
# #                 Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
# #             # else:
# #     return_PickStock = None  # 釋放内存;

# #     # investment_method = "Short_Selling"
# #     return_PickStock = PickStock(
# #         training_data = stepping_data,
# #         testing_data = stepping_data,
# #         Pdata_0 = [int(3), int(10)],  # [Pdata_0[1], Pdata_0[2]],  # Pdata_0, # value["Pdata_0"],
# #         weight = [],  # weight,  # value["weight"],
# #         Plower = [-math.inf, -math.inf],  # [Plower[1], Plower[2]],  # Plower, # value["Plower"],
# #         Pupper = [+math.inf, +math.inf],  # [Pupper[1], Pupper[2]],  # Pupper, # value["Pupper"],
# #         MarketTiming_Parameter = MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;  # ::Base.Dict{Core.String, Core.Any} = Base.Dict{Core.String, Core.Any}(),
# #         PickStock_fit_model = PickStock_fit_model,
# #         MarketTiming = MarketTiming,
# #         MarketTiming_fit_model = MarketTiming_fit_model,
# #         Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
# #         investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# #     )
# #     PickStock_Parameter["Short_Selling"] = return_PickStock["Coefficient"]
# #     PickStock_ticker_symbol = return_PickStock["PickStock_sort"]["ticker_symbol"]
# #     for key, value in return_PickStock["weight_PickStock"].items():
# #         # print("Key: {key}, Value: {value}")
# #         if isinstance(value, dict) and "Short_Selling" in value:
# #             if isinstance(weight_PickStock_Dict, dict) and str(key) in weight_PickStock_Dict:
# #                 if isinstance(weight_PickStock_Dict[str(key)], dict):
# #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
# #             elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
# #                 weight_PickStock_Dict[str(key)] = {}
# #                 weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
# #             # else:
# #             if isinstance(Plower_weight_PickStock_Dict, dict) and str(key) in Plower_weight_PickStock_Dict:
# #                 if isinstance(Plower_weight_PickStock_Dict[str(key)], dict):
# #                     Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
# #             elif isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
# #                 Plower_weight_PickStock_Dict[str(key)] = {}
# #                 Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
# #             # else:
# #             if isinstance(Pupper_weight_PickStock_Dict, dict) and str(key) in Pupper_weight_PickStock_Dict:
# #                 if isinstance(Pupper_weight_PickStock_Dict[str(key)], dict):
# #                     Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
# #             elif isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
# #                 Pupper_weight_PickStock_Dict[str(key)] = {}
# #                 Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
# #             # else:
# #     return_PickStock = None  # 釋放内存;
# # # print(PickStock_Parameter)
# # # print(PickStock_ticker_symbol)
# # # print(weight_PickStock_Dict)
# # # print(Plower_weight_PickStock_Dict)
# # # print(Pupper_weight_PickStock_Dict)

# # SizePosition_Parameter_Array = []  # 依照倉位規則優化之後得到的倉位數據存儲字典;
# # # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
# # # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
# # if isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0):

# #     # x0 = stepping_data["ticker_symbol"]["date_transaction"]  # 交易日期;
# #     # x1 = stepping_data["ticker_symbol"]["turnover_volume"]  # 成交量;
# #     # # x2 = stepping_data["ticker_symbol"]["turnover_amount"]  # 成交總金額;
# #     # x3 = stepping_data["ticker_symbol"]["opening_price"]  # 開盤成交價;
# #     # x4 = stepping_data["ticker_symbol"]["close_price"]  # 收盤成交價;
# #     # x5 = stepping_data["ticker_symbol"]["low_price"]  # 最低成交價;
# #     # x6 = stepping_data["ticker_symbol"]["high_price"]  # 最高成交價;
# #     # x7 = stepping_data["ticker_symbol"]["focus"]  # 當日成交價重心;
# #     # x8 = stepping_data["ticker_symbol"]["amplitude"]  # 當日成交價絕對振幅;
# #     # x9 = stepping_data["ticker_symbol"]["amplitude_rate"]  # 當日成交價相對振幅（%）;
# #     # x10 = stepping_data["ticker_symbol"]["opening_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日首筆成交價（開盤價）標準化值;
# #     # x11 = stepping_data["ticker_symbol"]["closing_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日尾筆成交價（收盤價）標準化值;
# #     # x12 = stepping_data["ticker_symbol"]["low_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最低成交價標準化值;
# #     # x13 = stepping_data["ticker_symbol"]["high_price_Standardization"]  # 日棒缐（K Line Daily）數據交易日最高成交價標準化值;
# #     # x14 = stepping_data["ticker_symbol"]["turnover_volume_growth_rate"]  # 成交量的成長率;
# #     # x15 = stepping_data["ticker_symbol"]["opening_price_growth_rate"]  # 開盤價的成長率;
# #     # x16 = stepping_data["ticker_symbol"]["closing_price_growth_rate"]  # 收盤價的成長率;
# #     # x17 = stepping_data["ticker_symbol"]["closing_minus_opening_price_growth_rate"]  # 收盤價減開盤價的成長率;
# #     # x18 = stepping_data["ticker_symbol"]["high_price_proportion"]  # 收盤價和開盤價裏的最大值占最高價的比例;
# #     # x19 = stepping_data["ticker_symbol"]["low_price_proportion"]  # 最低價占收盤價和開盤價裏的最小值的比例;
# #     # # x20 = stepping_data["ticker_symbol"]["turnover_rate"]  # 成交量換手率;
# #     # # x21 = stepping_data["ticker_symbol"]["price_earnings"]  # 每股收益（公司經營利潤率 ÷ 股本）;
# #     # # x22 = stepping_data["ticker_symbol"]["book_value_per_share"]  # 每股净值（公司净資產 ÷ 股本）;
# #     # # x23 = stepping_data["ticker_symbol"]["capitalization"]  # 總市值;
# #     # # x24 = stepping_data["ticker_symbol"]["moving_average_5"]  # 收盤價 5 日滑動平均缐;
# #     # # x25 = stepping_data["ticker_symbol"]["moving_average_10"]  # 收盤價 10 日滑動平均缐;
# #     # # x26 = stepping_data["ticker_symbol"]["moving_average_20"]  # 收盤價 20 日滑動平均缐;
# #     # # x27 = stepping_data["ticker_symbol"]["moving_average_30"]  # 收盤價 30 日滑動平均缐;
# #     # Pdata_0 = stepping_data["ticker_symbol"]["Pdata_0"]
# #     # Plower = stepping_data["ticker_symbol"]["Plower"]
# #     # Pupper = stepping_data["ticker_symbol"]["Pupper"]
# #     # weight = stepping_data["ticker_symbol"]["weight"]
# #     # Pdata_0 = stepping_data["Pdata_0"]
# #     # Plower = stepping_data["Plower"]
# #     # Pupper = stepping_data["Pupper"]
# #     # weight = stepping_data["weight"]

# #     # investment_method = "Long_Position"
# #     return_SizePosition = SizePosition(
# #         training_data = stepping_data,
# #         testing_data = stepping_data,
# #         Pdata_0 = [weight_MarketTiming_Dict, weight_PickStock_Dict],  # stepping_data["002611"]["Pdata_0"],
# #         weight = [],  # stepping_data["002611"]["weight"],
# #         Plower = [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
# #         Pupper = [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
# #         MarketTiming_Parameter = MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;
# #         PickStock_Parameter = PickStock_Parameter,  # 按照選股規則優化之後的參數字典;
# #         PickStock_ticker_symbol = PickStock_ticker_symbol,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
# #         SizePosition_fit_model = SizePosition_fit_model,
# #         PickStock = PickStock,
# #         PickStock_fit_model = PickStock_fit_model,
# #         MarketTiming = MarketTiming,
# #         MarketTiming_fit_model = MarketTiming_fit_model,
# #         Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
# #         investment_method = "Long_Position"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# #     )
# #     # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", return_SizePosition["Coefficient"][1], "\n", "optimization - coefficient 2 - weight_PickStock :", "\n", return_SizePosition["Coefficient"][2])  # 最優化計算之後得到的參數;
# #     # # print("optimization - coefficient StandardDeviation : ", return_SizePosition["Coefficient-StandardDeviation"])  # 擬合得到的參數解的標準差;
# #     # # print("optimization - coefficient Confidence Lower 95% : ", return_SizePosition["Coefficient-Confidence-Lower-95%"])  # 擬合得到的參數解的區間估計下限;
# #     # # print("optimization - coefficient Confidence Upper 95% : ", return_SizePosition["Coefficient-Confidence-Upper-95%"])  # 擬合得到的參數解的區間估計上限;
# #     # # print("y - fit : ", return_SizePosition["Yfit"])  # 擬合 y 值;
# #     # # print("y - fit Uncertainty Lower : ", return_SizePosition["Yfit-Uncertainty-Lower"])  # 擬合的應變量 Yvals 誤差下限;
# #     # # print("y - fit Uncertainty Upper : ", return_SizePosition["Yfit-Uncertainty-Upper"])  # 擬合的應變量 Yvals 誤差上限;
# #     # # print("residual : ", return_SizePosition["Residual"])  # 擬合殘差;
# #     # print("optimization - y_profit : ", return_SizePosition["y_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# #     # print("Long Position optimization - y_profit : ", return_SizePosition["y_Long_Position_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# #     # print("Short Selling optimization - y_profit : ", return_SizePosition["y_Short_Selling_profit"])  # 每兩次對衝交易利潤 × 權重，加權纍加總計;
# #     # print("optimization - y_loss : ", return_SizePosition["y_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# #     # print("Long Position optimization - y_loss : ", return_SizePosition["y_Long_Position_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# #     # print("Short Selling optimization - y_loss : ", return_SizePosition["y_Short_Selling_loss"])  # 每兩次對衝交易最大回撤 × 權重，加權取極值總計;
# #     # print("maximum_drawdown : ", return_SizePosition["maximum_drawdown"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #     # print("maximum_drawdown_Long_Position : ", return_SizePosition["maximum_drawdown_Long_Position"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #     # print("maximum_drawdown_Short_Selling : ", return_SizePosition["maximum_drawdown_Short_Selling"])  # 兩次對衝交易之間的最大回撤值，取極值統計;
# #     # print("profit total per share : ", return_SizePosition["profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("Long Position profit total per share : ", return_SizePosition["Long_Position_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("Short Selling profit total per share : ", return_SizePosition["Short_Selling_profit_total"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("profit Positive : ", return_SizePosition["profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #     # print("Long Position profit Positive : ", return_SizePosition["Long_Position_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #     # print("Short Selling_profit Positive : ", return_SizePosition["Short_Selling_profit_Positive"])  # 每兩次對衝交易收益纍加總計;
# #     # print("profit Positive probability : ", return_SizePosition["profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #     # print("Long Position profit Positive probability : ", return_SizePosition["Long_Position_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #     # print("Short Selling profit Positive probability : ", return_SizePosition["Short_Selling_profit_Positive_probability"])  # 每兩次對衝交易正利潤概率;
# #     # print("profit Negative : ", return_SizePosition["profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #     # print("Long Position profit Negative : ", return_SizePosition["Long_Position_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #     # print("Short Selling profit Negative : ", return_SizePosition["Short_Selling_profit_Negative"])  # 每兩次對衝交易損失纍加總計;
# #     # print("profit Negative probability : ", return_SizePosition["profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #     # print("Long Position profit Negative probability : ", return_SizePosition["Long_Position_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #     # print("Short Selling profit Negative probability : ", return_SizePosition["Short_Selling_profit_Negative_probability"])  # 每兩次對衝交易負利潤概率;
# #     # print("average price amplitude date transaction : ", return_SizePosition["average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #     # print("Long Position average price amplitude date transaction : ", return_SizePosition["Long_Position_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #     # print("Short Selling average price amplitude date transaction : ", return_SizePosition["Short_Selling_average_price_amplitude_date_transaction"])  # 兩兩次對衝交易日成交價振幅平方和，均值;
# #     # print("average volume turnover date transaction : ", return_SizePosition["average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #     # print("Long Position average volume turnover date transaction : ", return_SizePosition["Long_Position_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #     # print("Short Selling average volume turnover date transaction : ", return_SizePosition["Short_Selling_average_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）均值;
# #     # print("average date transaction between : ", return_SizePosition["average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #     # print("Long Position average date transaction between : ", return_SizePosition["Long_Position_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #     # print("Short Selling average date transaction between : ", return_SizePosition["Short_Selling_average_date_transaction_between"])  # 兩次對衝交易間隔日長，均值;
# #     # print("number SizePosition transaction : ", return_SizePosition["number_PickStock_transaction"])  # 交易過股票的總隻數，函數 Base.keys(Dict) 表示獲取字典的所有 key 值，返回值爲字符串向量（Base.Vector）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"])  # 記錄按規則篩選股票按照擇時規則交易信息的序列字典（Dict）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_profit_date_transaction"])  # 每兩次對衝交易利潤，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_price_amplitude_date_transaction"])  # 兩次對衝交易日成交價振幅平方和，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_volume_turnover_date_transaction"])  # 兩次對衝交易日成交量（換手率）向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction_between"])  # 兩次對衝交易間隔日長，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"])  # 按規則執行交易的日期，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][0])  # 交易規則自動選取的交易日期;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][2])  # 交易規則自動選取的成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][3])  # 交易規則自動選取的成交量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][6])  # 交易日（datetime.date 類型）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][7])  # 當日總成交量（turnover volume）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][8])  # 當日開盤（opening）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][9])  # 當日收盤（closing）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][10])  # 當日最低（low）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][11])  # 當日最高（high）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][14])  # 當日每股收益（price earnings）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Long_Position_date_transaction"][15])  # 當日每股净值（book value per share）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"])  # 按規則執行交易的日期，向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][0])  # 交易規則自動選取的交易日期;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][1])  # 交易規則自動選取的買入或賣出;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][2])  # 交易規則自動選取的成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][3])  # 交易規則自動選取的成交量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][4])  # 交易規則自動選取的成交次數記錄;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][5])  # 交易規則自動選取的交易日期的序列號，用於繪圖可視化;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][6])  # 交易日（datetime.date 類型）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][7])  # 當日總成交量（turnover volume）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][8])  # 當日開盤（opening）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][9])  # 當日收盤（closing）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][10])  # 當日最低（low）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][11])  # 當日最高（high）成交價;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][12])  # 當日總成交金額（turnover amount）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][13])  # 當日成交量（turnover volume）換手率（turnover rate）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][14])  # 當日每股收益（price earnings）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["Short_Selling_date_transaction"][15])  # 當日每股净值（book value per share）;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["revenue_and_expenditure_records_date_transaction"])  # 每次交易的收支記錄序列，不區分做多（Long Position）或做空（Short Selling），向量;
# #     # print(return_SizePosition["SizePosition_transaction_sequence"]["ticker_symbol"]["P1_Array"])  # 依照擇時規則計算得到參數 P1 值的序列存儲數組;
# #     # print("test profit estimate : ", return_SizePosition["test_profit"])  # 每兩次對衝交易利潤 × 權重，纍加總計;
# #     # print("test odds ratio estimate : ", return_SizePosition["test_odds_ratio"])
# #     # print("test date transaction between : ", return_SizePosition["test_date_transaction_between"])
# #     # # print(return_SizePosition["testData"])  # 傳入測試數據集的計算結果;
# #     # print("test profit total per share : ", return_SizePosition["testData"]["profit_total"])
# #     # print("test Long Position profit total per share : ", return_SizePosition["testData"]["Long_Position_profit_total"])
# #     # print("test Short Selling profit total per share : ", return_SizePosition["testData"]["Short_Selling_profit_total"])
# #     # print("test profit positive per share : ", return_SizePosition["testData"]["profit_Positive"])
# #     # print("test Long Position profit positive per share : ", return_SizePosition["testData"]["Long_Position_profit_Positive"])
# #     # print("test Short Selling profit positive per share : ", return_SizePosition["testData"]["Short_Selling_profit_Positive"])
# #     # print("test profit positive probability : ", return_SizePosition["testData"]["profit_Positive_probability"])
# #     # print("test Long Position profit positive probability : ", return_SizePosition["testData"]["Long_Position_profit_Positive_probability"])
# #     # print("test Short Selling profit positive probability : ", return_SizePosition["testData"]["Short_Selling_profit_Positive_probability"])
# #     # print("test profit negative per share : ", return_SizePosition["testData"]["profit_Negative"])
# #     # print("test Long Position profit negative per share : ", return_SizePosition["testData"]["Long_Position_profit_Negative"])
# #     # print("test Short Selling profit negative per share : ", return_SizePosition["testData"]["Short_Selling_profit_Negative"])
# #     # print("test profit negative probability : ", return_SizePosition["testData"]["profit_Negative_probability"])
# #     # print("test Long Position profit negative probability : ", return_SizePosition["testData"]["Long_Position_profit_Negative_probability"])
# #     # print("test Short Selling profit negative probability : ", return_SizePosition["testData"]["Short_Selling_profit_Negative_probability"])
# #     # print("test average date transaction between : ", return_SizePosition["testData"]["average_date_transaction_between"])
# #     # print("test Long Position average date transaction between : ", return_SizePosition["testData"]["Long_Position_average_date_transaction_between"])
# #     # print("test Short Selling average date transaction between : ", return_SizePosition["testData"]["Short_Selling_average_date_transaction_between"])
# #     # print("test number SizePosition transaction : ", return_SizePosition["testData"]["number_PickStock_transaction"])  # 交易過股票的總隻數;
# #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["P1_Array"])
# #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Long_Position_date_transaction"])
# #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"]["Short_Selling_date_transaction"])
# #     # # print(return_SizePosition["testData"]["SizePosition_transaction_sequence"]["002611"])
# #     # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
# #     # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
# #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
# #         for key, value in return_SizePosition["Coefficient"][0].items():
# #             # print("Key: {key}, Value: {value}")
# #             if isinstance(value, dict) and ("Long_Position" in value):
# #                 if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
# #                     if isinstance(weight_MarketTiming_Dict[str(key)], dict):
# #                         weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
# #                 elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
# #                     weight_MarketTiming_Dict[str(key)] = {}
# #                     weight_MarketTiming_Dict[str(key)]["Long_Position"] = value["Long_Position"]
# #                 # else:
# #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
# #         for key, value in return_SizePosition["Coefficient"][1].items():
# #             # print("Key: {key}, Value: {value}")
# #             if isinstance(value, dict) and ("Long_Position" in value):
# #                 if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
# #                     if isinstance(weight_PickStock_Dict[str(key)], dict):
# #                         weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
# #                 elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
# #                     weight_PickStock_Dict[str(key)] = {}
# #                     weight_PickStock_Dict[str(key)]["Long_Position"] = value["Long_Position"]
# #                 # else:
# #     return_SizePosition = None  # 釋放内存;

# #     # investment_method = "Short_Selling"
# #     return_SizePosition = SizePosition(
# #         training_data = stepping_data,
# #         testing_data = stepping_data,
# #         Pdata_0 = [weight_MarketTiming_Dict, weight_PickStock_Dict],  # stepping_data["002611"]["Pdata_0"],
# #         weight = [],  # stepping_data["002611"]["weight"],
# #         Plower = [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],
# #         Pupper = [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],
# #         MarketTiming_Parameter = MarketTiming_Parameter,  # 按照擇時規則優化之後的參數字典;
# #         PickStock_Parameter = PickStock_Parameter,  # 按照選股規則優化之後的參數字典;
# #         PickStock_ticker_symbol = PickStock_ticker_symbol,  # 依照選股規則排序篩選出的股票代碼字符串存儲數組;
# #         SizePosition_fit_model = SizePosition_fit_model,
# #         PickStock = PickStock,
# #         PickStock_fit_model = PickStock_fit_model,
# #         MarketTiming = MarketTiming,
# #         MarketTiming_fit_model = MarketTiming_fit_model,
# #         Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
# #         investment_method = "Short_Selling"  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# #     )
# #     # weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
# #     # weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
# #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(1) and isinstance(return_SizePosition["Coefficient"][0], dict):
# #         for key, value in return_SizePosition["Coefficient"][0].items():
# #             # print("Key: {key}, Value: {value}")
# #             if isinstance(value, dict) and ("Short_Selling" in value):
# #                 if isinstance(weight_MarketTiming_Dict, dict) and (str(key) in weight_MarketTiming_Dict):
# #                     if isinstance(weight_MarketTiming_Dict[str(key)], dict):
# #                         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
# #                 elif isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
# #                     weight_MarketTiming_Dict[str(key)] = {}
# #                     weight_MarketTiming_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
# #                 # else:
# #     if isinstance(return_SizePosition["Coefficient"], list) and int(len(return_SizePosition["Coefficient"])) >= int(2) and isinstance(return_SizePosition["Coefficient"][1], dict):
# #         for key, value in return_SizePosition["Coefficient"][1].items():
# #             # print("Key: {key}, Value: {value}")
# #             if isinstance(value, dict) and ("Short_Selling" in value):
# #                 if isinstance(weight_PickStock_Dict, dict) and (str(key) in weight_PickStock_Dict):
# #                     if isinstance(weight_PickStock_Dict[str(key)], dict):
# #                         weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
# #                 elif isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
# #                     weight_PickStock_Dict[str(key)] = {}
# #                     weight_PickStock_Dict[str(key)]["Short_Selling"] = value["Short_Selling"]
# #                 # else:
# #     return_SizePosition = None  # 釋放内存;
# # SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]
# # # print(SizePosition_Parameter_Array)
# # # print("optimization - coefficient 1 - weight_MarketTiming :", "\n", SizePosition_Parameter_Array[0])  # 最優化計算之後得到的參數;
# # # print("optimization - coefficient 2 - weight_PickStock :", "\n", SizePosition_Parameter_Array[1])  # 最優化計算之後得到的參數;

# # 求解各股票裏的最長交易天數;
# # 交易過股票的總隻數，函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
# maximum_ticker_symbol_stepping_data = int(0)  # 交易過股票的總隻數;
# maximum_stepping_data = int(0)  # 各股票裏的最長交易天數;
# minimum_stepping_data = int(0)  # 各股票裏的最短交易天數;
# if isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0):
#     # 交易過股票的總隻數，函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
#     maximum_ticker_symbol_stepping_data = int(len([item for item in stepping_data.keys()]))  # 交易過股票的總隻數;
#     # print(maximum_ticker_symbol_stepping_data)
#     maximum_stepping_data = int(0)  # 各股票裏的最長交易天數;
#     minimum_stepping_data = int(0)  # 各股票裏的最短交易天數;
#     stepping_data_Array = []
#     # 遍歷字典的鍵:值對;
#     for key, value in stepping_data.items():
#         # print("Key: {key}, Value: {value}")
#         if isinstance(value, dict):
#             if ("date_transaction" in value) and isinstance(value["date_transaction"], list):
#                 # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;
#                 stepping_data_Array.append(int(len(value["date_transaction"])))  # 記錄交易天數，使用 list.append() 函數在列表末尾追加推入新元素;

#                 # 篩選最長交易天數;
#                 if int(len(value["date_transaction"])) > int(maximum_stepping_data):
#                     maximum_stepping_data_2 = int(len(value["date_transaction"]))
#                     # global maximum_stepping_data *= int(0)
#                     maximum_stepping_data *= int(0)
#                     # global maximum_stepping_data += int(maximum_stepping_data_2)
#                     maximum_stepping_data += int(maximum_stepping_data_2)
#             if ("turnover_volume" in value) and isinstance(value["turnover_volume"], list):
#                 stepping_data_Array.append(int(len(value["turnover_volume"])))

#                 # 篩選最長交易天數;
#                 if int(len(value["turnover_volume"])) > int(maximum_stepping_data):
#                     maximum_stepping_data_2 = int(len(value["turnover_volume"]))
#                     # global maximum_stepping_data *= int(0)
#                     maximum_stepping_data *= int(0)
#                     # global maximum_stepping_data += int(maximum_stepping_data_2)
#                     maximum_stepping_data += int(maximum_stepping_data_2)
#             if ("opening_price" in value) and isinstance(value["opening_price"], list):
#                 stepping_data_Array.append(int(len(value["opening_price"])))

#                 # 篩選最長交易天數;
#                 if int(len(value["opening_price"])) > int(maximum_stepping_data):
#                     maximum_stepping_data_2 = int(len(value["opening_price"]))
#                     # global maximum_stepping_data *= int(0)
#                     maximum_stepping_data *= int(0)
#                     # global maximum_stepping_data += int(maximum_stepping_data_2)
#                     maximum_stepping_data += int(maximum_stepping_data_2)
#             if ("close_price" in value) and isinstance(value["close_price"], list):
#                 stepping_data_Array.append(int(len(value["close_price"])))

#                 # 篩選最長交易天數;
#                 if int(len(value["close_price"])) > int(maximum_stepping_data):
#                     maximum_stepping_data_2 = int(len(value["close_price"]))
#                     # global maximum_stepping_data *= int(0)
#                     maximum_stepping_data *= int(0)
#                     # global maximum_stepping_data += int(maximum_stepping_data_2)
#                     maximum_stepping_data += int(maximum_stepping_data_2)
#             if ("low_price" in value) and isinstance(value["low_price"], list):
#                 stepping_data_Array.append(int(len(value["low_price"])))

#                 # 篩選最長交易天數;
#                 if int(len(value["low_price"])) > int(maximum_stepping_data):
#                     maximum_stepping_data_2 = int(len(value["low_price"]))
#                     # global maximum_stepping_data *= int(0)
#                     maximum_stepping_data *= int(0)
#                     # global maximum_stepping_data += int(maximum_stepping_data_2)
#                     maximum_stepping_data += int(maximum_stepping_data_2)
#             if ("high_price" in value) and isinstance(value["high_price"], list):
#                 stepping_data_Array.append(int(len(value["high_price"])))

#                 # 篩選最長交易天數;
#                 if int(len(value["high_price"])) > int(maximum_stepping_data):
#                     maximum_stepping_data_2 = int(len(value["high_price"]))
#                     # global maximum_stepping_data *= int(0)
#                     maximum_stepping_data *= int(0)
#                     # global maximum_stepping_data += int(maximum_stepping_data_2)
#                     maximum_stepping_data += int(maximum_stepping_data_2)
#     # print(maximum_stepping_data)
#     if int(len(stepping_data_Array)) > int(0):
#         minimum_stepping_data_2 = int(min(stepping_data_Array))
#         minimum_stepping_data *= int(0)
#         minimum_stepping_data += int(minimum_stepping_data_2)
#     # print(minimum_stepping_data)
#     stepping_data_Array = None

# MarketTiming_Parameter = {}  # 依照擇時規則優化之後得到的擇時規則的輸入參數存儲字典;
# weight_MarketTiming_Dict = {}  # 依照擇時規則交易倉位參數的存儲字典;
# Plower_weight_MarketTiming_Dict = {}
# Pupper_weight_MarketTiming_Dict = {}
# if isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0):
#     for key, value in stepping_data.items():
#         if isinstance(MarketTiming_Parameter, dict) and (not (str(key) in MarketTiming_Parameter)):
#             MarketTiming_Parameter[str(key)] = {}
#         if isinstance(weight_MarketTiming_Dict, dict) and (not (str(key) in weight_MarketTiming_Dict)):
#             weight_MarketTiming_Dict[str(key)] = {}
#         if isinstance(Plower_weight_MarketTiming_Dict, dict) and (not (str(key) in Plower_weight_MarketTiming_Dict)):
#             Plower_weight_MarketTiming_Dict[str(key)] = {}
#         if isinstance(Pupper_weight_MarketTiming_Dict, dict) and (not (str(key) in Pupper_weight_MarketTiming_Dict)):
#             Pupper_weight_MarketTiming_Dict[str(key)] = {}
#         MarketTiming_Parameter[str(key)]["Long_Position"] = [5, 0.1, -0.1, 0.0]
#         MarketTiming_Parameter[str(key)]["Short_Selling"] = [5, 0.1, -0.1, 0.0]
#         weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
#         weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
#         Plower_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(0.0)
#         Plower_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(0.0)
#         Pupper_weight_MarketTiming_Dict[str(key)]["Long_Position"] = float(1.0)
#         Pupper_weight_MarketTiming_Dict[str(key)]["Short_Selling"] = float(1.0)
# MarketTiming_Parameter_Dict = MarketTiming_Parameter

# PickStock_Parameter = {}  # 依照選股規則優化之後得到的選股規則的輸入參數存儲字典;
# PickStock_Parameter["Long_Position"] = [5, 3]
# PickStock_Parameter["Short_Selling"] = [5, 3]
# PickStock_ticker_symbol = [str(item) for item in stepping_data.keys()]  # [str]
# PickStock_ticker_symbol = [PickStock_ticker_symbol for i in range(int(0), int(maximum_stepping_data), int(1))]
# weight_PickStock_Dict = {}  # 依照選股規則配置占比倉位參數的存儲字典;
# Plower_weight_PickStock_Dict = {}
# Pupper_weight_PickStock_Dict = {}
# if isinstance(stepping_data, dict) and int(len(stepping_data)) > int(0):
#     for key, value in stepping_data.items():
#         if isinstance(weight_PickStock_Dict, dict) and (not (str(key) in weight_PickStock_Dict)):
#             weight_PickStock_Dict[str(key)] = {}
#         if isinstance(Plower_weight_PickStock_Dict, dict) and (not (str(key) in Plower_weight_PickStock_Dict)):
#             Plower_weight_PickStock_Dict[str(key)] = {}
#         if isinstance(Pupper_weight_PickStock_Dict, dict) and (not (str(key) in Pupper_weight_PickStock_Dict)):
#             Pupper_weight_PickStock_Dict[str(key)] = {}
#         weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)  # float(int(1) / int(len([key for key in stepping_data.keys()])))
#         Plower_weight_PickStock_Dict[str(key)]["Long_Position"] = float(0.0)
#         Pupper_weight_PickStock_Dict[str(key)]["Long_Position"] = float(1.0)
#         weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)  # float(int(1) / int(len([key for key in stepping_data.keys()])))
#         Plower_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(0.0)
#         Pupper_weight_PickStock_Dict[str(key)]["Short_Selling"] = float(1.0)
# PickStock_Parameter_Dict = PickStock_Parameter
# PickStock_ticker_symbol_Array = PickStock_ticker_symbol

# SizePosition_Parameter_Array = [weight_MarketTiming_Dict, weight_PickStock_Dict]

# # 推進分析訓練集數據序列截取;
# investment_method = "Long_Position_and_Short_Selling"  # "Long_Position_and_Short_Selling", "Long_Position", "Short_Selling";
# # risk_threshold_drawdown_loss = float(0.0)  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
# training_data_sequence_length = int(60)
# training_data_ticker_symbol_Array = [str(item) for item in stepping_data.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
# testing_data_ticker_symbol_Array = [str(item) for item in stepping_data.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
# testing_data_sequence_length = int(1)

# return_stepping_Dict = BackTesting_Stepper(
#     steppingData = stepping_data,
#     # risk_threshold = risk_threshold_drawdown_loss,  # = float(0.0),  # 風險控制閾值，强制平倉，可接受的最大回撤比例：Long_Position = sell_price ÷ buy_price、Short_Selling = 1 + ((sell_price - buy_price) ÷ sell_price) ;
#     training_sequence_length = training_data_sequence_length,  # = int(60),
#     training_ticker_symbol = training_data_ticker_symbol_Array,  # = [str(item) for item in stepping_data.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
#     testing_ticker_symbol = testing_data_ticker_symbol_Array,  # = [str(item) for item in stepping_data.keys()]  # 函數 dict.keys() 表示獲取字典的所有 key 值，返回值爲字符串列表（list）;
#     testing_sequence_length = testing_data_sequence_length,  # = int(1),
#     SizePosition = SizePosition,
#     SizePosition_fit_model = SizePosition_fit_model,
#     SizePosition_Pdata_0 = SizePosition_Parameter_Array,
#     SizePosition_weight = [],  # [float(1.0) for i in 1:len(training_data)],
#     SizePosition_Plower = [Plower_weight_MarketTiming_Dict, Plower_weight_PickStock_Dict],  # [-math.inf, -math.inf],
#     SizePosition_Pupper = [Pupper_weight_MarketTiming_Dict, Pupper_weight_PickStock_Dict],  # [+math.inf, +math.inf],
#     PickStock = PickStock,
#     PickStock_fit_model = PickStock_fit_model,
#     PickStock_Pdata_0 = [],  # [5, 3],  # PickStock_Parameter,
#     PickStock_weight = [],  # [float(1.0) for i in 1:len(training_data)],
#     PickStock_Plower = [int(1), int(1)],  # [-math.inf, -math.inf],
#     PickStock_Pupper = [int([int(maximum_stepping_data) if int(maximum_stepping_data) > int(0) else int(1) for i in range(int(0), int(1), int(1))][int(0)]), int([int(maximum_ticker_symbol_stepping_data) if int(maximum_ticker_symbol_stepping_data) > int(0) else int(1) for i in range(int(0), int(1), int(1))][int(0)])],  # [+math.inf, +math.inf],
#     MarketTiming = MarketTiming,
#     MarketTiming_fit_model = MarketTiming_fit_model,
#     MarketTiming_Pdata_0 = [],  # [5, 0.1, -0.1, 0.0],  # MarketTiming_Parameter,
#     MarketTiming_weight = [],  # [float(1.0) for i in 1:len(training_data)],
#     MarketTiming_Plower = [int(1), -math.inf, -math.inf, -math.inf],  # [-math.inf, -math.inf, -math.inf, -math.inf],
#     MarketTiming_Pupper = [int([int(maximum_stepping_data) if int(maximum_stepping_data) > int(0) else int(1) for i in range(int(0), int(1), int(1))][int(0)]), +math.inf, +math.inf, +math.inf],  # [+math.inf, +math.inf, +math.inf, +math.inf],
#     Quantitative_Indicators_Function = Intuitive_Momentum_KLine,
#     investment_method = investment_method  # "Long_Position_and_Short_Selling" , "Long_Position" , "Short_Selling" ;
# )
# print("number PickStock : ", return_stepping_Dict["number_PickStock"])
# print("number PickStock Long Position : ", return_stepping_Dict["number_PickStock_Long_Position"])
# print("number PickStock Short Selling : ", return_stepping_Dict["number_PickStock_Short_Selling"])
# print("number transaction : ", return_stepping_Dict["number_transaction_total"])
# print("number transaction Long Position : ", return_stepping_Dict["number_transaction_total_Long_Position"])
# print("number transaction Short Selling : ", return_stepping_Dict["number_transaction_total_Short_Selling"])
# print("maximum drawdown : ", return_stepping_Dict["maximum_drawdown"])
# print("maximum drawdown Long Position : ", return_stepping_Dict["maximum_drawdown_Long_Position"])
# print("maximum drawdown Short Selling : ", return_stepping_Dict["maximum_drawdown_Short_Selling"])
# print("profit total : ", return_stepping_Dict["profit_total"])
# print("Long Position profit total : ", return_stepping_Dict["Long_Position_profit_total"])
# print("Short Selling profit total : ", return_stepping_Dict["Short_Selling_profit_total"])
# print("profit Positive : ", return_stepping_Dict["profit_Positive"])
# print("profit Negative : ", return_stepping_Dict["profit_Negative"])
# print("Long Position profit Positive : ", return_stepping_Dict["Long_Position_profit_Positive"])
# print("Long Position profit Negative : ", return_stepping_Dict["Long_Position_profit_Negative"])
# print("Short Selling profit Positive : ", return_stepping_Dict["Short_Selling_profit_Positive"])
# print("Short Selling profit Negative : ", return_stepping_Dict["Short_Selling_profit_Negative"])
# print("profit Positive probability : ", return_stepping_Dict["profit_Positive_probability"])
# print("profit Negative probability : ", return_stepping_Dict["profit_Negative_probability"])
# print("Long Position profit Positive probability : ", return_stepping_Dict["Long_Position_profit_Positive_probability"])
# print("Long Position profit Negative probability : ", return_stepping_Dict["Long_Position_profit_Negative_probability"])
# print("Short Selling profit Positive probability : ", return_stepping_Dict["Short_Selling_profit_Positive_probability"])
# print("Short Selling profit Negative probability : ", return_stepping_Dict["Short_Selling_profit_Negative_probability"])
# print("average price amplitude date transaction : ", return_stepping_Dict["average_price_amplitude_date_transaction"])
# print("Long Position average price amplitude date transaction : ", return_stepping_Dict["Long_Position_average_price_amplitude_date_transaction"])
# print("Short Selling average price amplitude date transaction : ", return_stepping_Dict["Short_Selling_average_price_amplitude_date_transaction"])
# print("average volume turnover date transaction : ", return_stepping_Dict["average_volume_turnover_date_transaction"])
# print("Long Position average volume turnover date transaction : ", return_stepping_Dict["Long_Position_average_volume_turnover_date_transaction"])
# print("Short Selling average volume turnover date transaction : ", return_stepping_Dict["Short_Selling_average_volume_turnover_date_transaction"])
# print("average date transaction between : ", return_stepping_Dict["average_date_transaction_between"])
# print("Long Position average date transaction between : ", return_stepping_Dict["Long_Position_average_date_transaction_between"])
# print("Short Selling average date transaction between : ", return_stepping_Dict["Short_Selling_average_date_transaction_between"])
# # print("PickStock Long Position Array :", "\n", return_stepping_Dict["PickStock_Long_Position"])
# # print("PickStock Short Selling Array :", "\n", return_stepping_Dict["PickStock_Short_Selling"])
# # print("PickStock Array :", "\n", return_stepping_Dict["PickStock"])
# # print("profit paired transaction Dict :", "\n", return_stepping_Dict["profit_paired_transaction"])
# # print("transaction sequence Dict :", "\n", return_stepping_Dict["transaction_sequence"])
# # print("stepping sequence Array :", "\n", return_stepping_Dict["stepping_sequence"])
# # # return_stepping_Dict["fit-image"].savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
# # # import matplotlib
# # # matplotlib.pyplot.show()
# # # plot_Thread = threading.Thread(target=matplotlib.pyplot.show, args=(), daemon=False)
# # # plot_Thread.start()
# # # matplotlib.pyplot.savefig('./fit-curve.png', dpi=400, bbox_inches='tight')  # 將圖片保存到硬盤文檔, 參數 bbox_inches='tight' 邊界緊致背景透明;
